QUICKSTART

This is a copy of the Toolkit Quickstart Guide from https://lc.llnl.gov/confluence/display/ASCT/Toolkit+Quickstart+Guide
It may not always be up-to-date, so refer to the Confluence wiki for the master copy.
Updated: 6/23/2015

Git/Stash workflow
We use git for our version control system.

To brush up on your git-jitsu, Atlassian has a great git tutorial, and for those visual hands-on learner types, this one is pretty sweet. The book Pro Git, by Scott Chacon, is an excellent comprehensive guide to everything you probably ever need to know or want to know about git.
We use Stash to help manage and work with git repositories.

The Toolkit Stash project is located at https://lc.llnl.gov/stash/projects/ATK. Atlassian has lots of good documentation on using Stash.

If you've never used git/Stash, you will need to create an SSH key and add that SSH Key to your CZ Stash Profile.
Cloning the toolkit repo into your working space

Clone the toolkit

git clone ssh://git@cz-stash.llnl.gov:7999/atk/asctoolkit.git
cd asctoolkit

Then checkout the "develop" branch which is where toolkit development worked is pushed to regularly from "topic" branches.

git checkout develop

Performing toolkit development

Basic Workflow:

    Create a topic branch off of the develop branch for your development.
    Commit changes and additions to your topic branch.
    Push your topic branch to Stash.
    Create a Stash pull request to review and merge your topic branch into develop.

Below are more details about each step of the workflow. 
Creating a topic branch

All work in the toolkit is done on a topic branch.  We never work directly on the develop or master branches.

A topic branch should have a descriptive name that indicates the purpose of the branch and includes your user id.  We typically label branches using "feature", "bugfix", etc.  For example,

git checkout -b feature/<userid>/<descriptive-name>

Optionally, you may attach a JIRA issue number to the branch name. Then, Stash will associate the JIRA issue with the commit when you merge your branch to the develop branch. For example,

git checkout -b bugfix/<userid>/jira-atk-<issue #>

After the topic branch is created, do your development in it.  After editing files, adding files, etc.

git add <file>   (Add files to be staged for commit.)
git commit       (Commit files to your branch. 
                  Note: it is good to label your commit messages with the type of changes you made such as ENH (enhancement), STYLE (code style change), etc.)
git push         (Push your commit to the topic branch in the toolkit repo.)

Keeping your topic branch current with develop

If you will be working on your branch for a while, it is a good idea to merge from the develop branch to your topic branch at reasonable intervals to avoid getting too out of sync. Otherwise, you may have to resolve many conflicts when you are ready to merge your topic branch work onto the develop branch.

First, you need to make sure your working space is up-to-date with the develop branch by checking it out and pulling in the latest changes.  This can be done as follows:

git checkout develop
git pull

Second, you need to go back to your branch, merge changes in from the develop branch, and check for conflicts:

git checkout <your topic branch>
git merge develop
git status                (Tells you whether you have any conflicts.)

Third, if you have any conflicts, you need to resolve them before you will be able to merge your topic branch to develop.  For example, you can manually edit files to resolve conflicts and then commit your changes:

git add <file>
git commit

Note: this is the same set of commands you use when you are working on your topic branch (as described above).

Alternatively, you can use a tool to help resolve your conflicts, such as the 'git mergetool' command, the "meld" tool (very powerful and intuitive). Diff tools like "tkdiff" are also helpful for resolving merge conflicts.
Pushing your topic branch to Stash

When your work on the branch is complete, you will push your changes to the develop branch.  First, push to your corresponding branch on origin (in this case cz-stash) 

git push origin

If you are using an older version of git, you may have to explicit arguments for your first push:

git push origin <BRANCH_NAME>:<BRANCH_NAME>

example:

git push origin feature/cyrush/testing_push:feature/cyrush/testing_push

It is important to note that your work on the topic branch is not complete and ready to be merged onto the develop branch until your code compiles, runs, and passes appropriate tests!
Creating a Stash pull request to merge your topic branch into develop

When you are ready to merge your topic branch to the develop branch, initiate a pull request in Stash of your topic branch to develop. This is done by going into the toolkit Stash project and clicking the pull request button ¿ make sure you identify the correct branch you want to merge to.  By default, this is set up to be the develop branch. So, in most cases, you won't have to do anything special. Our project is also set up to require at least one other developer to approve the pull request; you cannot approve your own pull request.

When your pull request is approved, you merge your changes to the develop branch by clicking the "merge" button in Stash. If there are no merge conflicts, the merge will proceed and you are done.

If there are conflicts, Stash will not allow the merge to be done. You must resolve the conflicts first. The preferred way to do this is to go into your branch and do the following:

git fetch origin    (This pulls changes from the remote branch into your branch that were merged since you created your branch.)
git merge origin    (This will indicate which files have conflicts. Conflicts can be resolved using a merge tool such as "meld" or by manual edits.)
git commit          (Commit your changes after all conflicts are resolved.)
git push origin     (This updates the pull request in Stash.)

Lastly, complete the merge in Stash by clicking the merge button.
Checking out an existing branch from Stash

If a developer has published (pushed) a branch to stash, you can check it out with the following commands:

# update the list of remote branches
git fetch
# list the available branches
git branch -a 
git checkout {branch name, excluding the remotes/origin/}

Here is a concrete example:

git branch -a | grep unify 
   remotes/origin/feature/zagaris2/restructure-and-unify
git checkout feature/zagaris2/restructure-and-unify
Branch feature/zagaris2/restructure-and-unify set up to track remote branch feature/zagaris2/restructure-and-unify from origin.
 Switched to a new branch 'feature/zagaris2/restructure-and-unify'

Git Tips
1) Get your prompt to show which branch you are currently on, whether there are untracked (i.e., new) files, modified files, staged, unstaged or stashed changes. See git-prompt.sh 

2) Enable tab-autocompletion for git commands. See git-completion.

Configuring and Building the Toolkit

The toolkit's build system requires cmake > 3.1.  You can download cmake binaries or source from: http://www.cmake.org/download/

Once you have a working version of cmake, here are two ways to configure and build the toolkit:
Configuring using the 'configure' python helper script

If you have python on your platform, you can use the script "scripts/config-build.py" to setup a build. This script is designed to locate the correct cmake cache file to use from the 'host-config' directory, based on your platform and options you have provided.  Scripts options can be displayed by running 'config-build.py --help'.
Example: 

# From the root of the asctoolkit repo, with cmake in your path run:
./scripts/config-build.py
# If no options are provided, will configure and create a build directory with the default compiler for this platform
# cd into the build directory
cd chaos-gnu-Debug
# build the toolkit libs and unit tests
make 
# run the toolkit unit tests
make test

The configure script will also print out the actual cmake line being executed, in case you want to modify and re-run it by hand.

rzalastor2{black27}238: ./scripts/config-build.py -c  intel
Creating build directory 'chaos-intel-Debug'...
Creating install path '/usr/wci/black27/asctoolkit/chaos-intel-Debug-install'...
Changing to build directory...
Executing cmake line: 'cmake -DCMAKE_BUILD_TYPE=Debug -C /usr/wci/black27/asctoolkit/./host-configs/chaos/intel.cmake -DCMAKE_INSTALL_PREFIX=/usr/wci/black27/asctoolkit/chaos-intel-Debug-install /usr/wci/black27/asctoolkit/./scripts/../src '...

Configuring manually using CMake

You can also execute CMake directly to configure a build.
Example:

# from the root of the asctoolkit repo
# our CMake setup disallows in-source builds, so you need to create a build directory
mkdir mybuild
cd mybuild
# configure an out-of-source build in a directory named "build-debug"
cmake  -DCMAKE_BUILD_TYPE=Debug ../src
#
# or, to include a default cache file you can use the -C option
# cmake  -DCMAKE_BUILD_TYPE=Debug -C ../host-configs/other/Darwin.cmake ../src
# cmake  -DCMAKE_BUILD_TYPE=Debug -C ../host-configs/$SYS_TYPE.cmake ../src
#
# build the toolkit libs and unit tests
make 
# run the toolkit unit tests
make test


