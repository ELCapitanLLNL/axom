#!/usr/local/bin/python
import argparse

parser = argparse.ArgumentParser(description="Configure cmake build.")

parser.add_argument("--eclipse", action='store_true', help="create an eclipse project file.")
parser.add_argument("--compiler", type=str, choices=["intel","gnu","clang","xl"], default="gnu", help="compiler to use.")
parser.add_argument("--buildtype", type=str, choices=["Release", "Debug"], default="Debug", help="build type.")

args = parser.parse_args()

import sys
import os
scriptsdir = os.path.dirname( os.path.join( os.getcwd(), sys.argv[0] ) )

cmakeline = "cmake"

# Add build type (opt or debug)
cmakeline += " -DCMAKE_BUILD_TYPE=" + args.buildtype

# Use sys type to identify which default compiler to use.
# If not available, try to use hostname
if "SYS_TYPE" in os.environ:
    systype = os.environ["SYS_TYPE"]
    shortsystype = systype.split("_")[0]
    cachefile = os.path.join("%s/../host-configs/%s-%s.cmake" % ( scriptsdir, shortsystype, args.compiler ) )
else:
    import platform
    cachefile = os.path.join("%s/../host-configs/%s-%s.cmake" % ( scriptsdir, platform.node(), args.compiler ) )

assert os.path.exists( cachefile ), "Could not find cmake cache file %s" % cachefile
cmakeline += " -C %s" % cachefile

if args.eclipse:
    cmakeline += ' -G "Eclipse CDT4 - Unix Makefiles"'

cmakeline += " %s/../src " % scriptsdir

print "cmake line: %s" % cmakeline
os.system(cmakeline)
