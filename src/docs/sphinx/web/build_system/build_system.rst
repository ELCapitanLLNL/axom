=============================
Toolkit Build System Features
=============================
This page documents the targets and features provided by the Toolkit's CMake-based build system.


Overview of CMAKE use in the Toolkit, Organization and Philosophy
-----------------------------------------------------------------

The build system has a modular design to keep it clean, maintainable and extensible. The complexity of 'cmake' logic has been encapsulated into reusable macros and functions. Finally, out of source builds are used, there are separate build and source directory.

Individual 'cmake' modules providing specific functions:
 
* **CMakeBasics.cmake** - Macros are centralized in this file.  It sets up the build space e.g. all the includes go into a *include* directory, libraries in a *lib* directory and all binaries/executables in the *bin* directory.  Besides the normal build options there is also the **advanced** options.  You need to toggle to the advanced mode to see these option in **ccmake**.  Macros are self-documented within this file e.g. **add_component** .  They are the building blocks for the 'cmake' based build system.

.. NOTE:: 
   Put in description of the individual macros.  Is there a way to automatically pull this out from the cmake files. Look into cmake documentation.  could use doxygen tags??*

Individual cmake modules are described below:

==============================  ===============================================
      CMake Module                            Description
==============================  ===============================================
CodeCoverage                    Brings in 'gcov' and 'lcov' tools. 

DartConfig                      Brings in 'ctest' 
                              
EnableCompilerWarningsAsErrors  
 
EnableExtraCompilerWarnings     

Find*                           Bring in third party libraries        
    FindConduit                   
    FindSparsehash                   
    FindSphinx 
    FindUncrustify 
    FindValgrind 

 PreventInSourceBuilds 

 Setup3rdParty                  brings in all 3rd party functionality.  

 SetupCmakeOptions              described later.

 SetupCodeChecks                sets up formatting using 'uncrustify' tool.

 SetupCodeMetrics               enables valgrind and code coverage tests.

 SetupCompilerOptions           sets up compiler flags for C++ and Fortran.  

 SetupDocs                      sets up targets to build docs (doxygen|sphinx)

 SetupGenerate                  creates 'generate' target   

 copy_headers                   copies headers into 'build'space include dir.
==============================  ===============================================

* there is a native third party library in directory  ...'thirdparty'.. have links to it e.g. googletest.

Common Toolkit Make Targets generated by CMake
----------------------------------------------

*        test
            Calls any configured tests using ctest
            Currently this calls the unit tests for each component.
*         check
            Calls any configured source code checks.  
            Currently only runs uncrustify checks for the components where uncrustify support is configured.
*        coverage
            Runs tests, collects generated gcov code coverage files, and generates an html coverage report in 'coverage' directory.
*        docs
            Generates sphinx and doxygen docs.
            Requires sphinx and doxygen to be in your path at CMake configure time, or handed to CMake at configure time via the SPHINX_EXECUTABLE and DOXYGEN_EXECUTABLE cache vars.
*        help
            Lists all make targets generated by CMake

Uncrustify Targets
------------------

*        uncrustify_check
            runs uncrustify with per component configuration on all of the source files to check style.
*        uncrustify_inplace
            runs uncrustify to apply per component configuration to all source files.

Quickstart
----------
See the `Code Development in the Toolkit Guide <https://lc.llnl.gov/confluence/display/ASCT/Code+Development+in+the+Toolkit>`_, it contains an explanation and examples of how to build and select compilers in the toolkit.

**Motivation for "host-config" files:**  `<https://lc.llnl.gov/stash/projects/ATK/repos/asctoolkit/browse/host-configs>`_

* Experience tells us that using hand-typed command line options, ccmake, or cmake-gui to manually set up build options is time consuming, error prone, and not reproducible
* **Solution:** We keep per-host (or per platform) configuration files that are used to seed CMake via CMake's initial cache file option ("-C")

   * Uberenv will produce an initial cache file with default compiler paths and third-party lib locations.

   * New configurations can be set up easily by copying and modifying existing host config files.
   * The host-config files are organized by system type and compiler version.

**config-build scripts** `<https://lc.llnl.gov/stash/projects/ATK/repos/asctoolkit/browse/scripts>`_

This script is designed to wrap commonly used build options and pick up the correct host-config file for Livermore Computing(LC) systems. There is a 'python' version for systems with 'python' installed - *'config-build.py'*. For non-python systems use *'config-build.sh'*. Additional options can be set via 'ccmake' or 'cmake-gui'. For help on the python version do 'config-build.py --help'


**SetupCmakeOptions.cmake** `<https://lc.llnl.gov/stash/projects/ATK/repos/asctoolkit/browse/src/cmake/SetupCmakeOptions.cmake>`_
This is declared at the top of the 'cmake' configuration, and provides a centralized location for checking configuration options and their defaults.

+-------------------------------------+-------------------------------+--------+
|OPTION                               |   Description                 | Default| 
+=====================================+===============================+========+
|ENABLE_SHARED_LIBS                   |Build shared libraries.        |        |
|                                     |Default is Static libraries    |  OFF   |
+-------------------------------------+-------------------------------+--------+
|ENABLE_TESTS                         |Builds unit tests              |  ON    |
+-------------------------------------+-------------------------------+--------+
|ENABLE_BOOST                         |Enable Boost                   |  OFF   |
+-------------------------------------+-------------------------------+--------+
|ENABLE_CODECOV                       |Enable code coverage via gcov  |  ON    |
+-------------------------------------+-------------------------------+--------+
|ENABLE_CXX11                         |Enables C++11 language support |  ON    | 
+-------------------------------------+-------------------------------+--------+
|ENABLE_FORTRAN                       |Enables Fortran compiler       |  ON    |
|                                     |support                        |        |
+-------------------------------------+-------------------------------+--------+
|ENABLE_ALL_WARNINGS                  |Enable extra compiler warnings |        | 
|                                     |in all build targets           |  ON    |
+-------------------------------------+-------------------------------+--------+
|ENABLE_WARNINGS_AS_ERRORS            |Compiler warnings treated as   |        |
|                                     |errors.                        | OFF    |
+-------------------------------------+-------------------------------+--------+
|ENABLE_MPI                           |ENABLE MPI                     | OFF    |
+-------------------------------------+-------------------------------+--------+
|ENABLE_OPENMP                        |ENABLE OpenMP                  | OFF    |
+-------------------------------------+-------------------------------+--------+
|ENABLE_BENCHMARKS                    |ENABLE google benchmark        | OFF    |
+-------------------------------------+-------------------------------+--------+




+New Page - about building 3rd party deps Cyrus D. Harrison





