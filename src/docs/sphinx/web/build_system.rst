=============================
Toolkit Build System Features
=============================
This page documents the targets and features provided by the Toolkit's CMake-based build system.

Common Toolkit Make Targets generated by CMake
----------------------------------------------

*        test
            Calls any configured tests using ctest
            Currently this calls the unit tests for each component.
*         check
            Calls any configured source code checks
            Currently only runs uncrustify checks for the components where uncrustify support is configured.
*        coverage
            Runs tests, collects generated gcov code coverage files, and generates an html coverage report in 'coverage' directory.
*        docs
            Generates sphinx and doxygen docs.
            Requires sphinx and doxygen to be in your path at CMake configure time, or handed to CMake at configure time via the SPHINX_EXECUTABLE and DOXYGEN_EXECUTABLE cache vars.
*        help
            Lists all make targets generated by CMake

Uncrustify Targets
------------------

*        uncrustify_check
            runs uncrustify with per component configuration on all of the source files to check style.
*        uncrustify_inplace
            runs uncrustify to apply per component configuration to all source files.

Quickstart
----------

See the `Code Development in the Toolkit Guide <https://lc.llnl.gov/confluence/display/ASCT/Code+Development+in+the+Toolkit>`_, it contains an explanation and examples of how to build and select compilers in the toolkit.

**Motivation for "host-config" files:**

* Experience tells us that using hand-typed command line options, ccmake, or cmake-gui to manually set up build options is time consuming, error prone, and not reproducible
* **Solution:** We keep per-host (or per platform) configuration files that are used to seed CMake via CMake's initial cache file option ("-C"

   * This is a simplified variant of what VisIt uses, but many projects use a similar strategy

   * Uberenv produces this cache file with all compiler options and third-party lib locations

   * New configurations can be set up easily by copying and modifying existing 

*Details about host-config files Aaron C. Black*

Details about options we provide (ENABLE_FORTRAN, ENABLE_MPI, ENABLE_COMPONENT etc) Aaron C. Black

Explain these in detail:

`<https://lc.llnl.gov/stash/projects/ATK/repos/asctoolkit/browse/src/cmake/SetupCmakeOptions.cmake>`_


**SetupCmakeOptions.cmake**

+-------------------------------------+-------------------------------+--------+
|OPTION                               |   Description                 | Default| 
+=====================================+===============================+========+
|BUILD_SHARED_LIBS                    |Build shared libraries.        |  OFF   |
+-------------------------------------+-------------------------------+--------+
|BUILD_TESTING                        |Builds unit tests              |  ON    |
+-------------------------------------+-------------------------------+--------+
|ENABLE_BOOST                         |Enable Boost                   |  OFF   |
+-------------------------------------+-------------------------------+--------+
|ENABLE_CODECOV                       |Enable code coverage via gcov  |  ON    |
+-------------------------------------+-------------------------------+--------+
|ENABLE_CXX11                         | Enables C++11 language support|  OFF   | 
+-------------------------------------+-------------------------------+--------+
|ENABLE_FORTRAN                       |Enables Fortran compiler       |  ON    |
|                                     |support                        |        |
+-------------------------------------+-------------------------------+--------+
|ENABLE_GLOBALCOMPILERWARNINGS        |Enable extra compiler warnings |        | 
|                                     |in all build targets           |  ON    |
+-------------------------------------+-------------------------------+--------+
|ENABLE_GLOBALCOMPILERWARNINGSASERRORS|Compiler warnings treated as   |        |
|                                     |errors.                        | OFF    |
+-------------------------------------+-------------------------------+--------+
|ENABLE_MPI                           |ENABLE MPI                     | OFF    |
+-------------------------------------+-------------------------------+--------+
|ENABLE_OMP                           |ENABLE OpenMP                  | OFF    |
+-------------------------------------+-------------------------------+--------+
|ENABLE_BENCHMARK                     |ENABLE google benchmark        | OFF    |
+-------------------------------------+-------------------------------+--------+

* Overview of our CMake use, organization and philosophy 
* Details about CMake building blocks  (add_gtest, make_library,etc) George Zagaris


+New Page  how to add a new component (tutorialesque walk though) George Zagaris

+New Page - about building 3rd party deps Cyrus D. Harrison
(we should move everything below this is to a better place - general resources page?)

General CMake Info 
================== 

Resources
---------

*    `CMake Tutorial <https://cmake.org/cmake-tutorial/>`_
*    `CMake FAQ <https://cmake.org/Wiki/CMake_FAQ>`_
*    `CMake Documentation <https://cmake.org/cmake/help/v3.1/>`_
*    `CMake Antipatterns <http://voices.canonical.com/jussi.pakkanen/2013/03/26/a-list-of-common-cmake-antipatterns/>`_



