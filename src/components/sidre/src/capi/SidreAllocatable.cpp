//
// SidreAllocatable.cpp - Routines used by Fortran interface
// Generated by genfsidresplicer.py
//   DO NOT EDIT
//
#include <cstddef>
#include "common/CommonTypes.hpp"

static char *global_char;
static int global_int;
static void *global_void;

extern "C" {
namespace asctoolkit {
namespace sidre {


void *atk_register_allocatable_int_scalar_ptr_(
    char *name, int lname,
    void *array, int atk_type, int rank)
{
    global_char = name;
    global_int = lname;
    global_int = atk_type;
    global_int = rank;
    global_void = array;
    return ATK_NULLPTR;
}


void *atk_register_allocatable_int_1d_ptr_(
    char *name, int lname,
    void *array, int atk_type, int rank)
{
    global_char = name;
    global_int = lname;
    global_int = atk_type;
    global_int = rank;
    global_void = array;
    return ATK_NULLPTR;
}


void *atk_register_allocatable_long_scalar_ptr_(
    char *name, int lname,
    void *array, int atk_type, int rank)
{
    global_char = name;
    global_int = lname;
    global_int = atk_type;
    global_int = rank;
    global_void = array;
    return ATK_NULLPTR;
}


void *atk_register_allocatable_long_1d_ptr_(
    char *name, int lname,
    void *array, int atk_type, int rank)
{
    global_char = name;
    global_int = lname;
    global_int = atk_type;
    global_int = rank;
    global_void = array;
    return ATK_NULLPTR;
}


void *atk_register_allocatable_float_scalar_ptr_(
    char *name, int lname,
    void *array, int atk_type, int rank)
{
    global_char = name;
    global_int = lname;
    global_int = atk_type;
    global_int = rank;
    global_void = array;
    return ATK_NULLPTR;
}


void *atk_register_allocatable_float_1d_ptr_(
    char *name, int lname,
    void *array, int atk_type, int rank)
{
    global_char = name;
    global_int = lname;
    global_int = atk_type;
    global_int = rank;
    global_void = array;
    return ATK_NULLPTR;
}


void *atk_register_allocatable_double_scalar_ptr_(
    char *name, int lname,
    void *array, int atk_type, int rank)
{
    global_char = name;
    global_int = lname;
    global_int = atk_type;
    global_int = rank;
    global_void = array;
    return ATK_NULLPTR;
}


void *atk_register_allocatable_double_1d_ptr_(
    char *name, int lname,
    void *array, int atk_type, int rank)
{
    global_char = name;
    global_int = lname;
    global_int = atk_type;
    global_int = rank;
    global_void = array;
    return ATK_NULLPTR;
}


}  // namespace asctoolkit
}  // namespace sidre
}  // extern "C"

