! Generated by genfsidresplicer.py
! splicer begin class.DataGroup.type_bound_procedure_part
procedure :: register_allocatable_int_scalar_ptr => datagroup_register_allocatable_int_scalar_ptr
procedure :: register_allocatable_int_1d_ptr => datagroup_register_allocatable_int_1d_ptr
procedure :: register_allocatable_long_scalar_ptr => datagroup_register_allocatable_long_scalar_ptr
procedure :: register_allocatable_long_1d_ptr => datagroup_register_allocatable_long_1d_ptr
procedure :: register_allocatable_float_scalar_ptr => datagroup_register_allocatable_float_scalar_ptr
procedure :: register_allocatable_float_1d_ptr => datagroup_register_allocatable_float_1d_ptr
procedure :: register_allocatable_double_scalar_ptr => datagroup_register_allocatable_double_scalar_ptr
procedure :: register_allocatable_double_1d_ptr => datagroup_register_allocatable_double_1d_ptr
generic :: register_allocatable => &
    register_allocatable_int_scalar_ptr,  &
    register_allocatable_int_1d_ptr,  &
    register_allocatable_long_scalar_ptr,  &
    register_allocatable_long_1d_ptr,  &
    register_allocatable_float_scalar_ptr,  &
    register_allocatable_float_1d_ptr,  &
    register_allocatable_double_scalar_ptr,  &
    register_allocatable_double_1d_ptr
procedure :: register_static_int_scalar_ptr => datagroup_register_static_int_scalar_ptr
procedure :: register_static_int_1d_ptr => datagroup_register_static_int_1d_ptr
procedure :: register_static_long_scalar_ptr => datagroup_register_static_long_scalar_ptr
procedure :: register_static_long_1d_ptr => datagroup_register_static_long_1d_ptr
procedure :: register_static_float_scalar_ptr => datagroup_register_static_float_scalar_ptr
procedure :: register_static_float_1d_ptr => datagroup_register_static_float_1d_ptr
procedure :: register_static_double_scalar_ptr => datagroup_register_static_double_scalar_ptr
procedure :: register_static_double_1d_ptr => datagroup_register_static_double_1d_ptr
generic :: register_static => &
    register_static_int_scalar_ptr,  &
    register_static_int_1d_ptr,  &
    register_static_long_scalar_ptr,  &
    register_static_long_1d_ptr,  &
    register_static_float_scalar_ptr,  &
    register_static_float_1d_ptr,  &
    register_static_double_scalar_ptr,  &
    register_static_double_1d_ptr
! splicer end class.DataGroup.type_bound_procedure_part

------------------------------------------------------------

! splicer begin class.DataGroup.additional_functions

! Generated by genfsidresplicer.py
function datagroup_register_allocatable_int_scalar_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_allocatable_int_scalar_ptr(group, name, lname, array, indx) result(rv)
       use iso_c_binding
       type(C_PTR), value, intent(IN)    :: group
       character(*), intent(IN)          :: name
       integer(C_INT), value, intent(IN) :: lname
       integer(C_INT), allocatable, intent(IN) :: array
       integer(C_INT), value, intent(IN) :: indx
       type(C_PTR) rv
       end function ATK_register_allocatable_int_scalar_ptr
    end interface

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    integer(C_INT), allocatable, intent(IN) :: value
    integer(C_INT) :: lname
    type(dataview) :: rv
    integer(C_INT) :: indx = 0

    lname = len_trim(name)
    rv%voidptr = ATK_register_allocatable_int_scalar_ptr(group%voidptr, name, lname, value, indx)
end function datagroup_register_allocatable_int_scalar_ptr

! Generated by genfsidresplicer.py
function datagroup_register_allocatable_int_1d_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_allocatable_int_1d_ptr(group, name, lname, array, indx) result(rv)
       use iso_c_binding
       type(C_PTR), value, intent(IN)    :: group
       character(*), intent(IN)          :: name
       integer(C_INT), value, intent(IN) :: lname
       integer(C_INT), allocatable, intent(IN) :: array(:)
       integer(C_INT), value, intent(IN) :: indx
       type(C_PTR) rv
       end function ATK_register_allocatable_int_1d_ptr
    end interface

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    integer(C_INT), allocatable, intent(IN) :: value(:)
    integer(C_INT) :: lname
    type(dataview) :: rv
    integer(C_INT) :: indx = 1

    lname = len_trim(name)
    rv%voidptr = ATK_register_allocatable_int_1d_ptr(group%voidptr, name, lname, value, indx)
end function datagroup_register_allocatable_int_1d_ptr

! Generated by genfsidresplicer.py
function datagroup_register_allocatable_long_scalar_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_allocatable_long_scalar_ptr(group, name, lname, array, indx) result(rv)
       use iso_c_binding
       type(C_PTR), value, intent(IN)    :: group
       character(*), intent(IN)          :: name
       integer(C_INT), value, intent(IN) :: lname
       integer(C_LONG), allocatable, intent(IN) :: array
       integer(C_INT), value, intent(IN) :: indx
       type(C_PTR) rv
       end function ATK_register_allocatable_long_scalar_ptr
    end interface

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    integer(C_LONG), allocatable, intent(IN) :: value
    integer(C_INT) :: lname
    type(dataview) :: rv
    integer(C_INT) :: indx = 2

    lname = len_trim(name)
    rv%voidptr = ATK_register_allocatable_long_scalar_ptr(group%voidptr, name, lname, value, indx)
end function datagroup_register_allocatable_long_scalar_ptr

! Generated by genfsidresplicer.py
function datagroup_register_allocatable_long_1d_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_allocatable_long_1d_ptr(group, name, lname, array, indx) result(rv)
       use iso_c_binding
       type(C_PTR), value, intent(IN)    :: group
       character(*), intent(IN)          :: name
       integer(C_INT), value, intent(IN) :: lname
       integer(C_LONG), allocatable, intent(IN) :: array(:)
       integer(C_INT), value, intent(IN) :: indx
       type(C_PTR) rv
       end function ATK_register_allocatable_long_1d_ptr
    end interface

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    integer(C_LONG), allocatable, intent(IN) :: value(:)
    integer(C_INT) :: lname
    type(dataview) :: rv
    integer(C_INT) :: indx = 3

    lname = len_trim(name)
    rv%voidptr = ATK_register_allocatable_long_1d_ptr(group%voidptr, name, lname, value, indx)
end function datagroup_register_allocatable_long_1d_ptr

! Generated by genfsidresplicer.py
function datagroup_register_allocatable_float_scalar_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_allocatable_float_scalar_ptr(group, name, lname, array, indx) result(rv)
       use iso_c_binding
       type(C_PTR), value, intent(IN)    :: group
       character(*), intent(IN)          :: name
       integer(C_INT), value, intent(IN) :: lname
       real(C_FLOAT), allocatable, intent(IN) :: array
       integer(C_INT), value, intent(IN) :: indx
       type(C_PTR) rv
       end function ATK_register_allocatable_float_scalar_ptr
    end interface

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    real(C_FLOAT), allocatable, intent(IN) :: value
    integer(C_INT) :: lname
    type(dataview) :: rv
    integer(C_INT) :: indx = 4

    lname = len_trim(name)
    rv%voidptr = ATK_register_allocatable_float_scalar_ptr(group%voidptr, name, lname, value, indx)
end function datagroup_register_allocatable_float_scalar_ptr

! Generated by genfsidresplicer.py
function datagroup_register_allocatable_float_1d_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_allocatable_float_1d_ptr(group, name, lname, array, indx) result(rv)
       use iso_c_binding
       type(C_PTR), value, intent(IN)    :: group
       character(*), intent(IN)          :: name
       integer(C_INT), value, intent(IN) :: lname
       real(C_FLOAT), allocatable, intent(IN) :: array(:)
       integer(C_INT), value, intent(IN) :: indx
       type(C_PTR) rv
       end function ATK_register_allocatable_float_1d_ptr
    end interface

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    real(C_FLOAT), allocatable, intent(IN) :: value(:)
    integer(C_INT) :: lname
    type(dataview) :: rv
    integer(C_INT) :: indx = 5

    lname = len_trim(name)
    rv%voidptr = ATK_register_allocatable_float_1d_ptr(group%voidptr, name, lname, value, indx)
end function datagroup_register_allocatable_float_1d_ptr

! Generated by genfsidresplicer.py
function datagroup_register_allocatable_double_scalar_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_allocatable_double_scalar_ptr(group, name, lname, array, indx) result(rv)
       use iso_c_binding
       type(C_PTR), value, intent(IN)    :: group
       character(*), intent(IN)          :: name
       integer(C_INT), value, intent(IN) :: lname
       real(C_DOUBLE), allocatable, intent(IN) :: array
       integer(C_INT), value, intent(IN) :: indx
       type(C_PTR) rv
       end function ATK_register_allocatable_double_scalar_ptr
    end interface

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    real(C_DOUBLE), allocatable, intent(IN) :: value
    integer(C_INT) :: lname
    type(dataview) :: rv
    integer(C_INT) :: indx = 6

    lname = len_trim(name)
    rv%voidptr = ATK_register_allocatable_double_scalar_ptr(group%voidptr, name, lname, value, indx)
end function datagroup_register_allocatable_double_scalar_ptr

! Generated by genfsidresplicer.py
function datagroup_register_allocatable_double_1d_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_allocatable_double_1d_ptr(group, name, lname, array, indx) result(rv)
       use iso_c_binding
       type(C_PTR), value, intent(IN)    :: group
       character(*), intent(IN)          :: name
       integer(C_INT), value, intent(IN) :: lname
       real(C_DOUBLE), allocatable, intent(IN) :: array(:)
       integer(C_INT), value, intent(IN) :: indx
       type(C_PTR) rv
       end function ATK_register_allocatable_double_1d_ptr
    end interface

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    real(C_DOUBLE), allocatable, intent(IN) :: value(:)
    integer(C_INT) :: lname
    type(dataview) :: rv
    integer(C_INT) :: indx = 7

    lname = len_trim(name)
    rv%voidptr = ATK_register_allocatable_double_1d_ptr(group%voidptr, name, lname, value, indx)
end function datagroup_register_allocatable_double_1d_ptr

! Generated by genfsidresplicer.py
function datagroup_register_static_int_scalar_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_static(group, name, lname, addr, type, nitems) result(rv) bind(C,name="ATK_register_static")
       use iso_c_binding
       type(C_PTR), value, intent(IN)     :: group
       character(kind=C_CHAR), intent(IN) :: name(*)
       integer(C_INT), value, intent(IN)  :: lname
       type(C_PTR), value,     intent(IN) :: addr
       integer(C_INT), value, intent(IN)  :: type
       integer(C_LONG), value, intent(IN) :: nitems
       type(C_PTR) rv
       end function ATK_register_static
    end interface
    type(C_PTR), external :: ATK_C_LOC

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    integer(C_INT), target, intent(IN) :: value
    integer(C_INT) :: lname
    type(dataview) :: rv
    integer(C_LONG) :: nitems
    integer(C_INT) :: type = ATK_C_INT_T

    lname = len_trim(name)
    nitems = 1_C_LONG
    rv%voidptr = ATK_register_static(group%voidptr, name, lname, ATK_C_LOC(value), type, nitems)
end function datagroup_register_static_int_scalar_ptr

! Generated by genfsidresplicer.py
function datagroup_register_static_int_1d_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_static(group, name, lname, addr, type, nitems) result(rv) bind(C,name="ATK_register_static")
       use iso_c_binding
       type(C_PTR), value, intent(IN)     :: group
       character(kind=C_CHAR), intent(IN) :: name(*)
       integer(C_INT), value, intent(IN)  :: lname
       type(C_PTR), value,     intent(IN) :: addr
       integer(C_INT), value, intent(IN)  :: type
       integer(C_LONG), value, intent(IN) :: nitems
       type(C_PTR) rv
       end function ATK_register_static
    end interface
    type(C_PTR), external :: ATK_C_LOC

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    integer(C_INT), target, intent(IN) :: value(:)
    integer(C_INT) :: lname
    type(dataview) :: rv
    integer(C_LONG) :: nitems
    integer(C_INT) :: type = ATK_C_INT_T

    lname = len_trim(name)
    nitems = size(value, kind=1_C_LONG)
    rv%voidptr = ATK_register_static(group%voidptr, name, lname, ATK_C_LOC(value), type, nitems)
end function datagroup_register_static_int_1d_ptr

! Generated by genfsidresplicer.py
function datagroup_register_static_long_scalar_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_static(group, name, lname, addr, type, nitems) result(rv) bind(C,name="ATK_register_static")
       use iso_c_binding
       type(C_PTR), value, intent(IN)     :: group
       character(kind=C_CHAR), intent(IN) :: name(*)
       integer(C_INT), value, intent(IN)  :: lname
       type(C_PTR), value,     intent(IN) :: addr
       integer(C_INT), value, intent(IN)  :: type
       integer(C_LONG), value, intent(IN) :: nitems
       type(C_PTR) rv
       end function ATK_register_static
    end interface
    type(C_PTR), external :: ATK_C_LOC

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    integer(C_LONG), target, intent(IN) :: value
    integer(C_INT) :: lname
    type(dataview) :: rv
    integer(C_LONG) :: nitems
    integer(C_INT) :: type = ATK_C_LONG_T

    lname = len_trim(name)
    nitems = 1_C_LONG
    rv%voidptr = ATK_register_static(group%voidptr, name, lname, ATK_C_LOC(value), type, nitems)
end function datagroup_register_static_long_scalar_ptr

! Generated by genfsidresplicer.py
function datagroup_register_static_long_1d_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_static(group, name, lname, addr, type, nitems) result(rv) bind(C,name="ATK_register_static")
       use iso_c_binding
       type(C_PTR), value, intent(IN)     :: group
       character(kind=C_CHAR), intent(IN) :: name(*)
       integer(C_INT), value, intent(IN)  :: lname
       type(C_PTR), value,     intent(IN) :: addr
       integer(C_INT), value, intent(IN)  :: type
       integer(C_LONG), value, intent(IN) :: nitems
       type(C_PTR) rv
       end function ATK_register_static
    end interface
    type(C_PTR), external :: ATK_C_LOC

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    integer(C_LONG), target, intent(IN) :: value(:)
    integer(C_INT) :: lname
    type(dataview) :: rv
    integer(C_LONG) :: nitems
    integer(C_INT) :: type = ATK_C_LONG_T

    lname = len_trim(name)
    nitems = size(value, kind=1_C_LONG)
    rv%voidptr = ATK_register_static(group%voidptr, name, lname, ATK_C_LOC(value), type, nitems)
end function datagroup_register_static_long_1d_ptr

! Generated by genfsidresplicer.py
function datagroup_register_static_float_scalar_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_static(group, name, lname, addr, type, nitems) result(rv) bind(C,name="ATK_register_static")
       use iso_c_binding
       type(C_PTR), value, intent(IN)     :: group
       character(kind=C_CHAR), intent(IN) :: name(*)
       integer(C_INT), value, intent(IN)  :: lname
       type(C_PTR), value,     intent(IN) :: addr
       integer(C_INT), value, intent(IN)  :: type
       integer(C_LONG), value, intent(IN) :: nitems
       type(C_PTR) rv
       end function ATK_register_static
    end interface
    type(C_PTR), external :: ATK_C_LOC

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    real(C_FLOAT), target, intent(IN) :: value
    integer(C_INT) :: lname
    type(dataview) :: rv
    integer(C_LONG) :: nitems
    integer(C_INT) :: type = ATK_C_FLOAT_T

    lname = len_trim(name)
    nitems = 1_C_LONG
    rv%voidptr = ATK_register_static(group%voidptr, name, lname, ATK_C_LOC(value), type, nitems)
end function datagroup_register_static_float_scalar_ptr

! Generated by genfsidresplicer.py
function datagroup_register_static_float_1d_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_static(group, name, lname, addr, type, nitems) result(rv) bind(C,name="ATK_register_static")
       use iso_c_binding
       type(C_PTR), value, intent(IN)     :: group
       character(kind=C_CHAR), intent(IN) :: name(*)
       integer(C_INT), value, intent(IN)  :: lname
       type(C_PTR), value,     intent(IN) :: addr
       integer(C_INT), value, intent(IN)  :: type
       integer(C_LONG), value, intent(IN) :: nitems
       type(C_PTR) rv
       end function ATK_register_static
    end interface
    type(C_PTR), external :: ATK_C_LOC

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    real(C_FLOAT), target, intent(IN) :: value(:)
    integer(C_INT) :: lname
    type(dataview) :: rv
    integer(C_LONG) :: nitems
    integer(C_INT) :: type = ATK_C_FLOAT_T

    lname = len_trim(name)
    nitems = size(value, kind=1_C_LONG)
    rv%voidptr = ATK_register_static(group%voidptr, name, lname, ATK_C_LOC(value), type, nitems)
end function datagroup_register_static_float_1d_ptr

! Generated by genfsidresplicer.py
function datagroup_register_static_double_scalar_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_static(group, name, lname, addr, type, nitems) result(rv) bind(C,name="ATK_register_static")
       use iso_c_binding
       type(C_PTR), value, intent(IN)     :: group
       character(kind=C_CHAR), intent(IN) :: name(*)
       integer(C_INT), value, intent(IN)  :: lname
       type(C_PTR), value,     intent(IN) :: addr
       integer(C_INT), value, intent(IN)  :: type
       integer(C_LONG), value, intent(IN) :: nitems
       type(C_PTR) rv
       end function ATK_register_static
    end interface
    type(C_PTR), external :: ATK_C_LOC

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    real(C_DOUBLE), target, intent(IN) :: value
    integer(C_INT) :: lname
    type(dataview) :: rv
    integer(C_LONG) :: nitems
    integer(C_INT) :: type = ATK_C_DOUBLE_T

    lname = len_trim(name)
    nitems = 1_C_LONG
    rv%voidptr = ATK_register_static(group%voidptr, name, lname, ATK_C_LOC(value), type, nitems)
end function datagroup_register_static_double_scalar_ptr

! Generated by genfsidresplicer.py
function datagroup_register_static_double_1d_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_static(group, name, lname, addr, type, nitems) result(rv) bind(C,name="ATK_register_static")
       use iso_c_binding
       type(C_PTR), value, intent(IN)     :: group
       character(kind=C_CHAR), intent(IN) :: name(*)
       integer(C_INT), value, intent(IN)  :: lname
       type(C_PTR), value,     intent(IN) :: addr
       integer(C_INT), value, intent(IN)  :: type
       integer(C_LONG), value, intent(IN) :: nitems
       type(C_PTR) rv
       end function ATK_register_static
    end interface
    type(C_PTR), external :: ATK_C_LOC

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    real(C_DOUBLE), target, intent(IN) :: value(:)
    integer(C_INT) :: lname
    type(dataview) :: rv
    integer(C_LONG) :: nitems
    integer(C_INT) :: type = ATK_C_DOUBLE_T

    lname = len_trim(name)
    nitems = size(value, kind=1_C_LONG)
    rv%voidptr = ATK_register_static(group%voidptr, name, lname, ATK_C_LOC(value), type, nitems)
end function datagroup_register_static_double_1d_ptr
! splicer end class.DataGroup.additional_functions
! splicer begin class.DataView.type_bound_procedure_part
procedure :: get_value_int_scalar_ptr => dataview_get_value_int_scalar_ptr
procedure :: get_value_int_1d_ptr => dataview_get_value_int_1d_ptr
procedure :: get_value_long_scalar_ptr => dataview_get_value_long_scalar_ptr
procedure :: get_value_long_1d_ptr => dataview_get_value_long_1d_ptr
procedure :: get_value_float_scalar_ptr => dataview_get_value_float_scalar_ptr
procedure :: get_value_float_1d_ptr => dataview_get_value_float_1d_ptr
procedure :: get_value_double_scalar_ptr => dataview_get_value_double_scalar_ptr
procedure :: get_value_double_1d_ptr => dataview_get_value_double_1d_ptr
generic :: get_value => &
    get_value_int_scalar_ptr,  &
    get_value_int_1d_ptr,  &
    get_value_long_scalar_ptr,  &
    get_value_long_1d_ptr,  &
    get_value_float_scalar_ptr,  &
    get_value_float_1d_ptr,  &
    get_value_double_scalar_ptr,  &
    get_value_double_1d_ptr
! splicer end class.DataView.type_bound_procedure_part

------------------------------------------------------------

! splicer begin class.DataView.additional_functions

! Generated by genfsidresplicer.py
subroutine dataview_get_value_int_scalar_ptr(view, value)
    use iso_c_binding
    implicit none
    class(dataview), intent(IN) :: view
    integer(C_INT), pointer, intent(OUT) :: value
    type(C_PTR) cptr

    cptr = view%get_data_pointer()
    call c_f_pointer(cptr, value)
end subroutine dataview_get_value_int_scalar_ptr

! Generated by genfsidresplicer.py
subroutine dataview_get_value_int_1d_ptr(view, value)
    use iso_c_binding
    implicit none
    class(dataview), intent(IN) :: view
    integer(C_INT), pointer, intent(OUT) :: value(:)
    type(C_PTR) cptr
    integer(C_SIZE_T) nelems

    cptr = view%get_data_pointer()
    nelems = view%get_number_of_elements()
    call c_f_pointer(cptr, value, [ nelems ])
end subroutine dataview_get_value_int_1d_ptr

! Generated by genfsidresplicer.py
subroutine dataview_get_value_long_scalar_ptr(view, value)
    use iso_c_binding
    implicit none
    class(dataview), intent(IN) :: view
    integer(C_LONG), pointer, intent(OUT) :: value
    type(C_PTR) cptr

    cptr = view%get_data_pointer()
    call c_f_pointer(cptr, value)
end subroutine dataview_get_value_long_scalar_ptr

! Generated by genfsidresplicer.py
subroutine dataview_get_value_long_1d_ptr(view, value)
    use iso_c_binding
    implicit none
    class(dataview), intent(IN) :: view
    integer(C_LONG), pointer, intent(OUT) :: value(:)
    type(C_PTR) cptr
    integer(C_SIZE_T) nelems

    cptr = view%get_data_pointer()
    nelems = view%get_number_of_elements()
    call c_f_pointer(cptr, value, [ nelems ])
end subroutine dataview_get_value_long_1d_ptr

! Generated by genfsidresplicer.py
subroutine dataview_get_value_float_scalar_ptr(view, value)
    use iso_c_binding
    implicit none
    class(dataview), intent(IN) :: view
    real(C_FLOAT), pointer, intent(OUT) :: value
    type(C_PTR) cptr

    cptr = view%get_data_pointer()
    call c_f_pointer(cptr, value)
end subroutine dataview_get_value_float_scalar_ptr

! Generated by genfsidresplicer.py
subroutine dataview_get_value_float_1d_ptr(view, value)
    use iso_c_binding
    implicit none
    class(dataview), intent(IN) :: view
    real(C_FLOAT), pointer, intent(OUT) :: value(:)
    type(C_PTR) cptr
    integer(C_SIZE_T) nelems

    cptr = view%get_data_pointer()
    nelems = view%get_number_of_elements()
    call c_f_pointer(cptr, value, [ nelems ])
end subroutine dataview_get_value_float_1d_ptr

! Generated by genfsidresplicer.py
subroutine dataview_get_value_double_scalar_ptr(view, value)
    use iso_c_binding
    implicit none
    class(dataview), intent(IN) :: view
    real(C_DOUBLE), pointer, intent(OUT) :: value
    type(C_PTR) cptr

    cptr = view%get_data_pointer()
    call c_f_pointer(cptr, value)
end subroutine dataview_get_value_double_scalar_ptr

! Generated by genfsidresplicer.py
subroutine dataview_get_value_double_1d_ptr(view, value)
    use iso_c_binding
    implicit none
    class(dataview), intent(IN) :: view
    real(C_DOUBLE), pointer, intent(OUT) :: value(:)
    type(C_PTR) cptr
    integer(C_SIZE_T) nelems

    cptr = view%get_data_pointer()
    nelems = view%get_number_of_elements()
    call c_f_pointer(cptr, value, [ nelems ])
end subroutine dataview_get_value_double_1d_ptr
! splicer end class.DataView.additional_functions
