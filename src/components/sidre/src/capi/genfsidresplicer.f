! Generated by genfsidresplicer.py
! splicer begin class.DataGroup.type_bound_procedure_part
procedure :: register_allocatable_int_scalar_ptr => datagroup_register_allocatable_int_scalar_ptr
procedure :: register_allocatable_int_1d_ptr => datagroup_register_allocatable_int_1d_ptr
procedure :: register_allocatable_long_scalar_ptr => datagroup_register_allocatable_long_scalar_ptr
procedure :: register_allocatable_long_1d_ptr => datagroup_register_allocatable_long_1d_ptr
procedure :: register_allocatable_float_scalar_ptr => datagroup_register_allocatable_float_scalar_ptr
procedure :: register_allocatable_float_1d_ptr => datagroup_register_allocatable_float_1d_ptr
procedure :: register_allocatable_double_scalar_ptr => datagroup_register_allocatable_double_scalar_ptr
procedure :: register_allocatable_double_1d_ptr => datagroup_register_allocatable_double_1d_ptr
generic :: register_allocatable => &
    register_allocatable_int_scalar_ptr,  &
    register_allocatable_int_1d_ptr,  &
    register_allocatable_long_scalar_ptr,  &
    register_allocatable_long_1d_ptr,  &
    register_allocatable_float_scalar_ptr,  &
    register_allocatable_float_1d_ptr,  &
    register_allocatable_double_scalar_ptr,  &
    register_allocatable_double_1d_ptr
! splicer end class.DataGroup.type_bound_procedure_part

------------------------------------------------------------

! splicer begin class.DataGroup.additional_functions

! Generated by genfsidresplicer.py
function datagroup_register_allocatable_int_scalar_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_allocatable_int_scalar_ptr(name, lname, array, atk_type, rank) result(rv)
       use iso_c_binding
       character(*), intent(IN) :: name
       integer(C_INT), intent(IN) :: lname
       integer(C_INT), allocatable, intent(IN) :: array
       integer(C_INT), intent(IN) :: atk_type
       integer(C_INT), intent(IN) :: rank
       type(C_PTR) rv
       end function ATK_register_allocatable_int_scalar_ptr
    end interface

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    integer(C_INT), allocatable, intent(IN) :: value
    integer(C_INT) :: atk_type = ATK_C_INT_T
    integer(C_INT) :: ndim = 0
    integer(C_INT) :: lname
    type(dataview) :: rv

    lname = len_trim(name)
!    rv%voidptr = ATK_register_allocatable_int_scalar_ptr(name, lname, value, atk_type, ndim)
end function datagroup_register_allocatable_int_scalar_ptr

! Generated by genfsidresplicer.py
function datagroup_register_allocatable_int_1d_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_allocatable_int_1d_ptr(name, lname, array, atk_type, rank) result(rv)
       use iso_c_binding
       character(*), intent(IN) :: name
       integer(C_INT), intent(IN) :: lname
       integer(C_INT), allocatable, intent(IN) :: array(:)
       integer(C_INT), intent(IN) :: atk_type
       integer(C_INT), intent(IN) :: rank
       type(C_PTR) rv
       end function ATK_register_allocatable_int_1d_ptr
    end interface

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    integer(C_INT) :: atk_type = ATK_C_INT_T
    integer(C_INT) :: ndim = 1
    integer(C_INT), allocatable, intent(IN) :: value(:)
    integer(C_INT) :: lname
    type(dataview) :: rv

    lname = len_trim(name)
!    rv%voidptr = ATK_register_allocatable_int_1d_ptr(name, lname, value, atk_type, ndim)
end function datagroup_register_allocatable_int_1d_ptr

! Generated by genfsidresplicer.py
function datagroup_register_allocatable_long_scalar_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_allocatable_long_scalar_ptr(name, lname, array, atk_type, rank) result(rv)
       use iso_c_binding
       character(*), intent(IN) :: name
       integer(C_INT), intent(IN) :: lname
       integer(C_LONG), allocatable, intent(IN) :: array
       integer(C_INT), intent(IN) :: atk_type
       integer(C_INT), intent(IN) :: rank
       type(C_PTR) rv
       end function ATK_register_allocatable_long_scalar_ptr
    end interface

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    integer(C_LONG), allocatable, intent(IN) :: value
    integer(C_INT) :: atk_type = ATK_C_LONG_T
    integer(C_INT) :: ndim = 0
    integer(C_INT) :: lname
    type(dataview) :: rv

    lname = len_trim(name)
!    rv%voidptr = ATK_register_allocatable_long_scalar_ptr(name, lname, value, atk_type, ndim)
end function datagroup_register_allocatable_long_scalar_ptr

! Generated by genfsidresplicer.py
function datagroup_register_allocatable_long_1d_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_allocatable_long_1d_ptr(name, lname, array, atk_type, rank) result(rv)
       use iso_c_binding
       character(*), intent(IN) :: name
       integer(C_INT), intent(IN) :: lname
       integer(C_LONG), allocatable, intent(IN) :: array(:)
       integer(C_INT), intent(IN) :: atk_type
       integer(C_INT), intent(IN) :: rank
       type(C_PTR) rv
       end function ATK_register_allocatable_long_1d_ptr
    end interface

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    integer(C_INT) :: atk_type = ATK_C_LONG_T
    integer(C_INT) :: ndim = 1
    integer(C_LONG), allocatable, intent(IN) :: value(:)
    integer(C_INT) :: lname
    type(dataview) :: rv

    lname = len_trim(name)
!    rv%voidptr = ATK_register_allocatable_long_1d_ptr(name, lname, value, atk_type, ndim)
end function datagroup_register_allocatable_long_1d_ptr

! Generated by genfsidresplicer.py
function datagroup_register_allocatable_float_scalar_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_allocatable_float_scalar_ptr(name, lname, array, atk_type, rank) result(rv)
       use iso_c_binding
       character(*), intent(IN) :: name
       integer(C_INT), intent(IN) :: lname
       real(C_FLOAT), allocatable, intent(IN) :: array
       integer(C_INT), intent(IN) :: atk_type
       integer(C_INT), intent(IN) :: rank
       type(C_PTR) rv
       end function ATK_register_allocatable_float_scalar_ptr
    end interface

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    real(C_FLOAT), allocatable, intent(IN) :: value
    integer(C_INT) :: atk_type = ATK_C_FLOAT_T
    integer(C_INT) :: ndim = 0
    integer(C_INT) :: lname
    type(dataview) :: rv

    lname = len_trim(name)
!    rv%voidptr = ATK_register_allocatable_float_scalar_ptr(name, lname, value, atk_type, ndim)
end function datagroup_register_allocatable_float_scalar_ptr

! Generated by genfsidresplicer.py
function datagroup_register_allocatable_float_1d_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_allocatable_float_1d_ptr(name, lname, array, atk_type, rank) result(rv)
       use iso_c_binding
       character(*), intent(IN) :: name
       integer(C_INT), intent(IN) :: lname
       real(C_FLOAT), allocatable, intent(IN) :: array(:)
       integer(C_INT), intent(IN) :: atk_type
       integer(C_INT), intent(IN) :: rank
       type(C_PTR) rv
       end function ATK_register_allocatable_float_1d_ptr
    end interface

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    integer(C_INT) :: atk_type = ATK_C_FLOAT_T
    integer(C_INT) :: ndim = 1
    real(C_FLOAT), allocatable, intent(IN) :: value(:)
    integer(C_INT) :: lname
    type(dataview) :: rv

    lname = len_trim(name)
!    rv%voidptr = ATK_register_allocatable_float_1d_ptr(name, lname, value, atk_type, ndim)
end function datagroup_register_allocatable_float_1d_ptr

! Generated by genfsidresplicer.py
function datagroup_register_allocatable_double_scalar_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_allocatable_double_scalar_ptr(name, lname, array, atk_type, rank) result(rv)
       use iso_c_binding
       character(*), intent(IN) :: name
       integer(C_INT), intent(IN) :: lname
       real(C_DOUBLE), allocatable, intent(IN) :: array
       integer(C_INT), intent(IN) :: atk_type
       integer(C_INT), intent(IN) :: rank
       type(C_PTR) rv
       end function ATK_register_allocatable_double_scalar_ptr
    end interface

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    real(C_DOUBLE), allocatable, intent(IN) :: value
    integer(C_INT) :: atk_type = ATK_C_DOUBLE_T
    integer(C_INT) :: ndim = 0
    integer(C_INT) :: lname
    type(dataview) :: rv

    lname = len_trim(name)
!    rv%voidptr = ATK_register_allocatable_double_scalar_ptr(name, lname, value, atk_type, ndim)
end function datagroup_register_allocatable_double_scalar_ptr

! Generated by genfsidresplicer.py
function datagroup_register_allocatable_double_1d_ptr(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    interface
       function ATK_register_allocatable_double_1d_ptr(name, lname, array, atk_type, rank) result(rv)
       use iso_c_binding
       character(*), intent(IN) :: name
       integer(C_INT), intent(IN) :: lname
       real(C_DOUBLE), allocatable, intent(IN) :: array(:)
       integer(C_INT), intent(IN) :: atk_type
       integer(C_INT), intent(IN) :: rank
       type(C_PTR) rv
       end function ATK_register_allocatable_double_1d_ptr
    end interface

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    integer(C_INT) :: atk_type = ATK_C_DOUBLE_T
    integer(C_INT) :: ndim = 1
    real(C_DOUBLE), allocatable, intent(IN) :: value(:)
    integer(C_INT) :: lname
    type(dataview) :: rv

    lname = len_trim(name)
!    rv%voidptr = ATK_register_allocatable_double_1d_ptr(name, lname, value, atk_type, ndim)
end function datagroup_register_allocatable_double_1d_ptr
! splicer end class.DataGroup.additional_functions
! splicer begin class.DataView.type_bound_procedure_part
procedure :: get_value_int_scalar_ptr => dataview_get_value_int_scalar_ptr
procedure :: get_value_int_1d_ptr => dataview_get_value_int_1d_ptr
procedure :: get_value_long_scalar_ptr => dataview_get_value_long_scalar_ptr
procedure :: get_value_long_1d_ptr => dataview_get_value_long_1d_ptr
procedure :: get_value_float_scalar_ptr => dataview_get_value_float_scalar_ptr
procedure :: get_value_float_1d_ptr => dataview_get_value_float_1d_ptr
procedure :: get_value_double_scalar_ptr => dataview_get_value_double_scalar_ptr
procedure :: get_value_double_1d_ptr => dataview_get_value_double_1d_ptr
generic :: get_value => &
    get_value_int_scalar_ptr,  &
    get_value_int_1d_ptr,  &
    get_value_long_scalar_ptr,  &
    get_value_long_1d_ptr,  &
    get_value_float_scalar_ptr,  &
    get_value_float_1d_ptr,  &
    get_value_double_scalar_ptr,  &
    get_value_double_1d_ptr
! splicer end class.DataView.type_bound_procedure_part

------------------------------------------------------------

! splicer begin class.DataView.additional_functions

! Generated by genfsidresplicer.py
subroutine dataview_get_value_int_scalar_ptr(view, value)
    use iso_c_binding
    implicit none
    class(dataview), intent(IN) :: view
    integer(C_INT), pointer, intent(OUT) :: value
    type(C_PTR) cptr

    cptr = view%get_data_pointer()
    call c_f_pointer(cptr, value)
end subroutine dataview_get_value_int_scalar_ptr

! Generated by genfsidresplicer.py
subroutine dataview_get_value_int_1d_ptr(view, value)
    use iso_c_binding
    implicit none
    class(dataview), intent(IN) :: view
    integer(C_INT), pointer, intent(OUT) :: value(:)
    type(C_PTR) cptr
    integer(C_SIZE_T) nelems

    cptr = view%get_data_pointer()
    nelems = view%get_number_of_elements()
    call c_f_pointer(cptr, value, [ nelems ])
end subroutine dataview_get_value_int_1d_ptr

! Generated by genfsidresplicer.py
subroutine dataview_get_value_long_scalar_ptr(view, value)
    use iso_c_binding
    implicit none
    class(dataview), intent(IN) :: view
    integer(C_LONG), pointer, intent(OUT) :: value
    type(C_PTR) cptr

    cptr = view%get_data_pointer()
    call c_f_pointer(cptr, value)
end subroutine dataview_get_value_long_scalar_ptr

! Generated by genfsidresplicer.py
subroutine dataview_get_value_long_1d_ptr(view, value)
    use iso_c_binding
    implicit none
    class(dataview), intent(IN) :: view
    integer(C_LONG), pointer, intent(OUT) :: value(:)
    type(C_PTR) cptr
    integer(C_SIZE_T) nelems

    cptr = view%get_data_pointer()
    nelems = view%get_number_of_elements()
    call c_f_pointer(cptr, value, [ nelems ])
end subroutine dataview_get_value_long_1d_ptr

! Generated by genfsidresplicer.py
subroutine dataview_get_value_float_scalar_ptr(view, value)
    use iso_c_binding
    implicit none
    class(dataview), intent(IN) :: view
    real(C_FLOAT), pointer, intent(OUT) :: value
    type(C_PTR) cptr

    cptr = view%get_data_pointer()
    call c_f_pointer(cptr, value)
end subroutine dataview_get_value_float_scalar_ptr

! Generated by genfsidresplicer.py
subroutine dataview_get_value_float_1d_ptr(view, value)
    use iso_c_binding
    implicit none
    class(dataview), intent(IN) :: view
    real(C_FLOAT), pointer, intent(OUT) :: value(:)
    type(C_PTR) cptr
    integer(C_SIZE_T) nelems

    cptr = view%get_data_pointer()
    nelems = view%get_number_of_elements()
    call c_f_pointer(cptr, value, [ nelems ])
end subroutine dataview_get_value_float_1d_ptr

! Generated by genfsidresplicer.py
subroutine dataview_get_value_double_scalar_ptr(view, value)
    use iso_c_binding
    implicit none
    class(dataview), intent(IN) :: view
    real(C_DOUBLE), pointer, intent(OUT) :: value
    type(C_PTR) cptr

    cptr = view%get_data_pointer()
    call c_f_pointer(cptr, value)
end subroutine dataview_get_value_double_scalar_ptr

! Generated by genfsidresplicer.py
subroutine dataview_get_value_double_1d_ptr(view, value)
    use iso_c_binding
    implicit none
    class(dataview), intent(IN) :: view
    real(C_DOUBLE), pointer, intent(OUT) :: value(:)
    type(C_PTR) cptr
    integer(C_SIZE_T) nelems

    cptr = view%get_data_pointer()
    nelems = view%get_number_of_elements()
    call c_f_pointer(cptr, value, [ nelems ])
end subroutine dataview_get_value_double_1d_ptr
! splicer end class.DataView.additional_functions
