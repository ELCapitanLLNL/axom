#
# Routines to generate splicers for wrappers.
# Used to generate several variations of a routine for Fortran.
# Similar to templates in C++.
#
from __future__ import print_function

types = (
    ( 'int',    'integer(C_INT)'),
    ( 'long',   'integer(C_LONG)'),
    ( 'float',  'real(C_FLOAT)'),
    ( 'double', 'real(C_DOUBLE)'),
)

def print_get_value(d):
    # typename - part of function name
    # nd       - number of dimensions
    # f_type   - fortran type
    # rank     - :,:, to match nd
    return """
! Generated by genfsidresplicer.py
subroutine dataview_get_value_{typename}_{nd}d_ptr(view, value)
    use iso_c_binding
    implicit none
    class(dataview), intent(IN) :: view
    {f_type}, pointer, intent(OUT) :: value({rank})

    type(C_PTR) cptr
    integer(C_SIZE_T) nelems

    cptr = view%get_data_pointer()
    nelems = view%get_number_of_elements()
    call c_f_pointer(cptr, value, [ nelems ])

end subroutine dataview_get_value_{typename}_{nd}d_ptr""".format(**d)

def type_bound_procedure_part(d):
    return 'procedure :: get_value_{typename}_{nd}d_ptr => dataview_get_value_{typename}_{nd}d_ptr'.format(**d)

def type_bound_procedure_generic(d):
    return 'get_value_{typename}_{nd}d_ptr'.format(**d)

def type_bound_procedure_generic_post(lines, generics):
    lines.append('generic :: get_value => &')
    for gen in generics[:-1]:
        lines.append('    ' + gen + ',  &')
    lines.append('    ' + generics[-1])


def foreach_value(lines, fcn):
    rank = []
    for nd in range(2):
        rank.append(':')
    d = {}
    for typetuple in types:
        d['typename'], d['f_type'] = typetuple
        for nd in range(1):
            d['nd'] = nd + 1
            d['rank'] = ','.join(rank[:nd+1])
            lines.append(fcn(d))

if __name__ == '__main__':
    print('! Generated by genfsidresplicer.py')

    lines = []
    foreach_value(lines, type_bound_procedure_part)
    generics = []
    foreach_value(generics, type_bound_procedure_generic)
    type_bound_procedure_generic_post(lines, generics)

    print('! splicer begin class.DataView.type_bound_procedure_part')
    for line in lines:
        print(line)
    print('! splicer end class.DataView.type_bound_procedure_part')

    print()
    print('------------------------------------------------------------')
    print()

    lines = []
    foreach_value(lines, print_get_value)

    print('! splicer begin class.DataView.additional_functions')
    for line in lines:
        print(line)
    print('! splicer end class.DataView.additional_functions')

