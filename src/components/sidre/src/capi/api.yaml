#
# API for Datastore
#
copyright:
  -
  - Copyright (c) 2015, Lawrence Livermore National Security, LLC.
  - Produced at the Lawrence Livermore National Laboratory.
  - 
  - All rights reserved.
  -
  - This source code cannot be distributed without permission and 
  - further review from Lawrence Livermore National Laboratory.
  -

options:
  library: SiDRe
  C_prefix: ATK_
  namespace: asctoolkit sidre
  F_module_per_class: False
  F_library_module_includes: sidretypes.inc

typedef:
  IndexType:
# defined in SidreTypes.hpp
    c_header : sidre/SidreTypes.h
    c_type   : ATK_IndexType
    cpp_type : IndexType
    c_fortran: integer(C_INT)
    f_type   : integer(C_INT)
    f_module : 
      iso_c_binding:
      - C_INT

  SidreLength:
# defined in SidreTypes.hpp
    c_header : sidre/SidreTypes.h
    c_type   : ATK_SidreLength
    cpp_type : SidreLength
    c_fortran: integer(C_LONG)
    f_type   : integer(C_LONG)
    f_module : 
      iso_c_binding:
      - C_LONG

  TypeID:
    # enum for types
    c_header : sidre/SidreTypes.h
    c_type   : int
#    cpp_type: DataType::
    c_to_cpp :  getTypeID({var})
    c_fortran: integer(C_INT)
    f_type   : integer(C_INT)
    f_module : 
      iso_c_binding:
      - C_INT

# XXX
# parameters:
#  InvalidID: IDTYPE -1

classes:
  - name: DataStore
    options:
      cpp_header: sidre/DataStore.hpp
    methods:
    -  decl: DataStore * new+constructor
    -  decl: void delete+destructor
    -  decl: DataGroup * getRoot()
#    -  decl: bool hasBuffer( IndexType idx ) const
    - decl:  DataBuffer * getBuffer( IndexType idx )
    -  decl: DataBuffer * createBuffer()
    -  decl: void destroyBuffer( IndexType id )
#    -  decl: void Destroybuffers()
#    -  decl: DataBuffer * detatchBuffer( const IndexType id )
    -  decl: size_t getNumBuffers() const
#    -  decl: IndexType getFirstValidBufferIndex() const
#    -  decl: IndexType getNextValidBufferIndex(IndexType idx) const;

#    -  decl: void info(Node &) const
    -  decl: void print() const
#    -  decl: void print(std::ostream& os) const

  - name: DataGroup
    options:
      cpp_header: sidre/DataGroup.hpp

    methods:
    -  decl: const std::string& getName() const
    -  decl: const DataGroup* getParent() const
    -  decl: const DataStore* getDataStore() const
    -  decl: size_t getNumViews() const
    -  decl: size_t getNumGroups() const
    -  decl: bool hasView( const string& name )
#    -  decl: bool hasView( IndexType idx ) const
    -  decl: DataView *createViewAndBuffer( const string& name )
       method_suffix: _simple
    -  decl: DataView *createViewAndBuffer( const std::string& name, TypeID type, SidreLength len)
       method_suffix: _from_type
    -  decl: DataView * createOpaqueView( const std::string& name, void * opaque_ptr)
    -  decl: DataView *createView( const std::string& name, DataBuffer *buff)
#    -  decl: DataView * createView( const std::string& name, DataBuffer * buff, const TypeID type, const SidreLength len )
#    -  decl: DataView * createOpaqueView( const std::string& name, void * opaque_ptr)
    -  decl:  DataView * createExternalView( const std::string& name, void * external_data,  const TypeID type, const SidreLength len )
    -  decl: DataView *moveView(DataView *view)
    -  decl: DataView *copyView(DataView *view)
    -  decl: void destroyViewAndBuffer(const std::string &name)
#    -  decl: void destroyViewAndBuffer(IndexType idx)
#    -  decl: void destroyView(const std::string &name)
#    -  decl: void destroyView(IndexType idx)
    -  decl: DataView *getView( const std::string& name )
#    -  decl: DataView const * getView( const std::string& name ) const
#    -  decl: DataView *getView( const IndexType idx )
#    -  decl: DataView const *getView( const IndexType idx ) const
    -  decl: IndexType getViewIndex(const std::string &name) const
    -  decl: const std::string& getViewName(IndexType idx) const
#    -  decl: IndexType getFirstValidViewIndex() const
#    -  decl: IndexType getNextValidViewIndex(IndexType idx) const
#    -  decl: void destroyViews()
#    -  decl: void destroyViewsAndBuffers()
    -  decl: bool hasGroup( const string& name )
#    -  decl: DataGroup* createGroup( const std::string& name )
    -  decl: DataGroup *createGroup( const string& name )
    -  decl: DataGroup *moveGroup(DataGroup *grp)
#    -  decl: DataGroup *copyGroup(DataGroup *grp)
    -  decl: void destroyGroup(const std::string &name)
#    -  decl: void destroyGroup(IndexType idx)
#    -  decl: DataGroup const * getGroup( const std::string& name ) const
    -  decl: DataGroup * getGroup( const std::string& name )
#    -  decl: DataGroup const * getGroup(IndexType idx) const
#    -  decl: DataGroup * getGroup( IndexType idx)
    -  decl: IndexType getGroupIndex(const std::string &name) const
    -  decl: const std::string& getGroupName(IndexType idx) const
#    -  decl: void destroyGroups()
#    -  decl: void info(Node &n) const
    -  decl: void print() const
#    -  decl: void printTree( const int level ) const
    -  decl: void save(const std::string& obase, const std::string& protocol) const
    -  decl: void load(const std::string& obase,  const std::string& protocol)

  - name: DataBuffer
    options:
      cpp_header: sidre/DataBuffer.hpp
    methods:
      - decl: IndexType getIndex() const
#      - decl: size_t getNumViews() const
      - decl: DataBuffer* declare(TypeID type, SidreLength len)
        return_this: True
      - decl: DataBuffer * declareExternal(void * external_data, TypeID type, SidreLength len)
        return_this: True
#      - decl: DataBuffer* declare(const Schema& schema)
#      - decl: DataBuffer* declare(const DataType& dtype)
      - decl: DataBuffer* allocate()
        method_suffix: _existing
        return_this: True
      - decl: DataBuffer* allocate(TypeID type, SidreLength len)
        method_suffix: _from_type
        return_this: True
#      - decl: DataBuffer* allocate(const Schema &schema)
#      - decl: DataBuffer* allocate(const DataType& dtype)
      - decl: DataBuffer * reallocate(TypeID type, SidreLength len)
        return_this: True
#      - decl: DataBuffer* reallocate(const Schema& schema)
#      - decl: DataBuffer* reallocate(const DataType& dtype)
      - decl: bool isExternal() const
      - decl: void* getData()
      - decl: size_t getTotalBytes() const
#      - decl: Node& getNode()
#      - decl: const Node& getNode() const
#      - decl: const Schema& getSchema() const
#      - decl: DataView* getView(IndexType idx)
#      - decl: void info(Node& n) const
#      - decl: void print() const


  - name: DataView
    options:
      cpp_header: sidre/DataView.hpp

    methods:
    - decl: DataView* declare(TypeID type, SidreLength len)
      return_this: True
#    - decl: DataView* declare(const Schema& schema)  
#    - decl: DataView* declare(const DataType& dtype)
    - decl: DataView* allocate(TypeID type, SidreLength len)
      return_this: True
#    - decl: DataView* allocate()
#    - decl: DataView* allocate(const Schema& schema)
#    - decl: DataView* allocate(const DataType& dtype)
    - decl: DataView * reallocate(TypeID type, SidreLength len)
      return_this: True
#    - decl: DataView* reallocate(const Schema& schema)
#    - decl: DataView* reallocate(const DataType& dtype)
#    - decl: DataView* apply()
#    - decl: DataView* apply(const Schema& schema)
#    - decl: DataView* apply(const DataType& dtype)
    - decl: bool  hasBuffer() const
    - decl: bool  isOpaque() const
#    - decl: bool isApplied() const
    - decl: const std::string& getName() const
    - decl: void * getDataInBuffer()
    - decl: void* getOpaque() const
    - decl: DataBuffer* getBuffer()
#    - decl: DataBuffer const* getBuffer() const
    - decl: void* getData()
#    - decl: Node& getNode()
#    - decl: const Node& getNode() const
#    - decl: const Schema& getSchema() const
    - decl: DataGroup* getOwningGroup()
#    - decl: DataGroup const* getOwningGroup() const
#    - decl: TypeID getTypeID() const
    - decl: int getTypeID() const
    - decl: size_t getTotalBytes() const
    - decl: size_t getNumberOfElements() const
#    - decl: void info(Node& n) const
#    - decl: void print() const


