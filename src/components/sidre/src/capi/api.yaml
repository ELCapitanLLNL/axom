#
# API for Datastore
#
copyright:
  -
  - Copyright (c) 2015, Lawrence Livermore National Security, LLC.
  - Produced at the Lawrence Livermore National Laboratory.
  - 
  - All rights reserved.
  -
  - This source code cannot be distributed without permission and 
  - further review from Lawrence Livermore National Laboratory.
  -

options:
  library: Sidre
  C_prefix: ATK_
  namespace: asctoolkit sidre
  F_module_per_class: False

  # header file for function, each class has its own header file
  cpp_header: sidre/SidreTypes.hpp

  # Any C++ function which returns a string will be wrapped in
  # Fortran as a subroutine with an additional character argument
  # for the result.
  F_string_result_as_arg: name


types:
  IndexType:
# defined in SidreTypes.hpp
    typedef  : int
    c_header : sidre/SidreTypes.h
    c_type   : ATK_IndexType
    cpp_type : IndexType

  SidreLength:
# defined in SidreTypes.hpp
    typedef  : long
    c_header : sidre/SidreTypes.h
    c_type   : ATK_SidreLength
    cpp_type : SidreLength

  TypeID:
    typedef  : int
    # enum for types
    c_header : sidre/SidreTypes.h
    cpp_header : sidre/SidreWrapperHelpers.hpp
    cpp_type : TypeID
    c_to_cpp : getTypeID({var})
#    c_to_cpp : static_cast<TypeID>({var})


# XXX
# parameters:
#  InvalidID: IDTYPE -1

classes:
  ####################################################################
  - name: DataStore
    options:
      cpp_header: sidre/DataStore.hpp
    methods:
    -  decl: DataStore * new() +constructor
    -  decl: void delete() +destructor
    -  decl: DataGroup * getRoot()
#    -  decl: bool hasBuffer( IndexType idx ) const
    - decl:  DataBuffer * getBuffer( IndexType idx )
    -  decl: DataBuffer * createBuffer()
    -  decl: void destroyBuffer( IndexType id )
#    -  decl: void Destroybuffers()
#    -  decl: DataBuffer * detatchBuffer( const IndexType id )
    -  decl: size_t getNumBuffers() const
#    -  decl: IndexType getFirstValidBufferIndex() const
#    -  decl: IndexType getNextValidBufferIndex(IndexType idx) const;

#    -  decl: void info(Node &) const
    -  decl: void print() const
#    -  decl: void print(std::ostream& os) const

    python:
      type: [ init, richcompare ]

  ####################################################################
  - name: DataGroup
    options:
      cpp_header: sidre/DataGroup.hpp

    methods:
    -  decl: const std::string& getName() const
    -  decl: const DataGroup* getParent() const
    -  decl: const DataStore* getDataStore() const
    -  decl: size_t getNumViews() const
    -  decl: size_t getNumGroups() const
    -  decl: bool hasView( const string& name )
#    -  decl: bool hasView( IndexType idx ) const
    -  decl: DataView *createViewAndBuffer( const string& name )
       function_suffix: _simple
    -  decl: DataView *createViewAndBuffer( const std::string& name, TypeID type, SidreLength len)
       function_suffix: _from_type
       fortran_generic:
         len:
         -  int
         -  long
    -  decl: DataView * createOpaqueView( const std::string& name, void * opaque_ptr)
    -  decl: DataView *createView( const std::string& name, DataBuffer *buff)
#    -  decl: DataView * createView( const std::string& name, DataBuffer * buff, TypeID type, SidreLength len )
#    -  decl: DataView * createOpaqueView( const std::string& name, void * opaque_ptr)
    -  decl:  DataView * createExternalView( const std::string& name, void * external_data, TypeID type, SidreLength len )
       fortran_generic:
         len:
         -  int
         -  long
    -  decl: DataView *moveView(DataView *view)
    -  decl: DataView *copyView(DataView *view)
    -  decl: void destroyViewAndBuffer(const std::string &name)
#    -  decl: void destroyViewAndBuffer(IndexType idx)
#    -  decl: void destroyView(const std::string &name)
#    -  decl: void destroyView(IndexType idx)
    -  decl: DataView *getView( const std::string& name )
       function_suffix: _from_name
#    -  decl: DataView const * getView( const std::string& name ) const
    -  decl: DataView *getView( const IndexType idx )
       function_suffix: _from_index
#    -  decl: DataView const *getView( const IndexType idx ) const
    -  decl: IndexType getViewIndex(const std::string &name) const
    -  decl: const std::string& getViewName(IndexType idx) const
       C_error_pattern: C_invalid_name
       PY_error_pattern: PY_invalid_name_idx

#    -  decl: IndexType getFirstValidViewIndex() const
#    -  decl: IndexType getNextValidViewIndex(IndexType idx) const
#    -  decl: void destroyViews()
#    -  decl: void destroyViewsAndBuffers()
    -  decl: bool hasGroup( const string& name )
#    -  decl: DataGroup* createGroup( const std::string& name )
    -  decl: DataGroup *createGroup( const string& name )
    -  decl: DataGroup *moveGroup(DataGroup *grp)
#    -  decl: DataGroup *copyGroup(DataGroup *grp)
    -  decl: void destroyGroup(const std::string &name)
#    -  decl: void destroyGroup(IndexType idx)
#    -  decl: DataGroup const * getGroup( const std::string& name ) const
    -  decl: DataGroup * getGroup( const std::string& name )
       PY_error_pattern: PY_null_to_none
#    -  decl: DataGroup const * getGroup(IndexType idx) const
#    -  decl: DataGroup * getGroup( IndexType idx)
    -  decl: IndexType getGroupIndex(const std::string &name) const

    -  decl: const std::string& getGroupName(IndexType idx) const
       C_error_pattern: C_invalid_name
       PY_error_pattern: PY_invalid_name_idx

#    -  decl: void destroyGroups()
#    -  decl: void info(Node &n) const
    -  decl: void print() const
#    -  decl: void printTree( const int level ) const
    -  decl: void save(const std::string& obase, const std::string& protocol) const
    -  decl: void load(const std::string& obase,  const std::string& protocol)

    python:
      type: [ init, richcompare ]

  ####################################################################
  - name: DataBuffer
    options:
      cpp_header: sidre/DataBuffer.hpp
    methods:
      - decl: IndexType getIndex() const
      - decl: size_t getNumViews() const
      - decl: DataBuffer* declare(TypeID type, SidreLength len)
        return_this: True
        fortran_generic:
          len:
          -  int
          -  long
#      - decl: DataBuffer* declare(const Schema& schema)
#      - decl: DataBuffer* declare(const DataType& dtype)
      - decl: DataBuffer* allocate()
        function_suffix: _existing
        return_this: True
      - decl: DataBuffer* allocate(TypeID type, SidreLength len)
        function_suffix: _from_type
        return_this: True
        fortran_generic:
          len:
          -  int
          -  long
      - decl: DataBuffer * reallocate(SidreLength len)
        return_this: True
        fortran_generic:
          len:
          -  int
          -  long
      - decl: DataBuffer * setExternalData( void* external_data)
        return_this: True
      - decl: bool isExternal() const
      - decl: void* getData()
      - decl: TypeID getTypeID() const
      - decl: size_t getNumberOfElements() const
      - decl: size_t getTotalBytes() const
#      - decl: Node& getNode()
#      - decl: const Node& getNode() const
#      - decl: const Schema& getSchema() const
#      - decl: DataView* getView(IndexType idx)
#      - decl: void info(Node& n) const
      - decl: void print() const

    python:
      type: [ init, richcompare ]

  ####################################################################
  - name: DataView
    options:
      cpp_header: sidre/DataView.hpp

    methods:
    - decl: DataView* declare(TypeID type, SidreLength len)
      return_this: True
      fortran_generic:
        len:
        -  int
        -  long
#    - decl: DataView* declare(const Schema& schema)  
#    - decl: DataView* declare(const DataType& dtype)
    - decl: DataView* allocate()
      function_suffix: _simple
      return_this: True
    - decl: DataView* allocate(TypeID type, SidreLength len)
      function_suffix: _from_type
      return_this: True
      fortran_generic:
        len:
        -  int
        -  long
#    - decl: DataView* allocate(const Schema& schema)
#    - decl: DataView* allocate(const DataType& dtype)
    - decl: DataView * reallocate(SidreLength len)
      return_this: True
      fortran_generic:
        len:
        -  int
        -  long
#    - decl: DataView* reallocate(const Schema& schema)
#    - decl: DataView* reallocate(const DataType& dtype)
#    - decl: DataView* apply()
#    - decl: DataView* apply(const Schema& schema)
#    - decl: DataView* apply(const DataType& dtype)
    - decl: bool  hasBuffer() const
    - decl: bool  isOpaque() const
#    - decl: bool isApplied() const
    - decl: const std::string& getName() const
    - decl: void* getOpaque() const
    - decl: DataBuffer* getBuffer()
#    - decl: DataBuffer const* getBuffer() const
    - decl: void * getDataPointer() const
#    - decl: Node& getNode()
#    - decl: const Node& getNode() const
#    - decl: Node::Value getValue()

#           template<typename ValueType>
    - decl: void setValue(ValueType value)
      cpp_template:
        ValueType:
        - int
        - long
        - float
        - double

#           template<typename ValueType>
    - decl: ValueType getValue()
      cpp_template:
        ValueType:
        - int
        - long
        - float
        - double

#    - decl: const Schema& getSchema() const
    - decl: DataGroup* getOwningGroup()
#    - decl: DataGroup const* getOwningGroup() const
    - decl: TypeID getTypeID() const
    - decl: size_t getTotalBytes() const
    - decl: size_t getNumberOfElements() const
#    - decl: void info(Node& n) const
    - decl: void print() const

    python:
      type: [ init, richcompare ]

######################################################################

functions:
  -  decl: bool isNameValid(const std::string& name)
     # The concept of a valid name is different for C++, C and Fortran
     options:
       C_code:  return name != NULL;
       F_code:  rv = name .ne. " "
       F_string_len_trim: false


######################################################################
patterns:
    C_invalid_name: >
        if (! isNameValid({var})) {{
            return ATK_InvalidName;
        }}
    PY_invalid_name: >
        if (! isNameValid({var})) {{
            PyErr_SetString(PyExc_KeyError, "{var}");
            return NULL;
        }}
    # report the invalid index, assume local variable idx
    PY_invalid_name_idx: >
        if (! isNameValid({var})) {{
            Py_RETURN_NONE;
        }}
#            PyErr_SetObject(PyExc_KeyError, PyInt_FromLong(idx));
#            return NULL;
    # Convert NULL to None
    PY_null_to_none: >
        if ({var} == ATK_NULLPTR) {{
            Py_RETURN_NONE;
        }}



# Files which contain code to be inserted into generated code
splicer:
  c:
  -  csidresplicer.c
  f:
  -  fsidresplicer.f
  -  genfsidresplicer.f
  py:
  -  pysidresplicer.c
