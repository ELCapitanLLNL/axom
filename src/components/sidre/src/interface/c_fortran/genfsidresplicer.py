#
# Routines to generate splicers for wrappers.
# Used to generate several variations of a routine for Fortran.
# Similar to templates in C++.
#
from __future__ import print_function
import sys

# types to use for generic routines
types = (
    ( 'int',    'integer(C_INT)',  'SIDRE_INT_ID'),
    ( 'long',   'integer(C_LONG)', 'SIDRE_LONG_ID'),
    ( 'float',  'real(C_FLOAT)',   'SIDRE_FLOAT_ID'),
    ( 'double', 'real(C_DOUBLE)',  'SIDRE_DOUBLE_ID'),
)

# maximum number of dimensions of generic routines
maxdims = 4

def XXnum_metabuffers():
    return len(types) * (maxdims + 1) # include scalars
######################################################################

def group_get_scalar(d):
    """Create methods on DataGroup to get a scalar.
    """
    return """
! Generated by genfsidresplicer.py
subroutine datagroup_get_scalar_{typename}(group, name, value)
    use iso_c_binding
    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    {f_type}, intent(OUT) :: value
    integer(C_INT) :: lname
    type(C_PTR) view

    lname = len_trim(name)
    view = c_datagroup_get_view_from_name_bufferify(group%voidptr, name, lname)
    value = c_dataview_get_data_{typename}(view)
end subroutine datagroup_get_scalar_{typename}""".format(**d)

def group_set_scalar(d):
    """Create methods on DataGroup to set a scalar.
    """
    return """
! Generated by genfsidresplicer.py
subroutine datagroup_set_scalar_{typename}(group, name, value)
    use iso_c_binding
    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    {f_type}, intent(OUT) :: value
    integer(C_INT) :: lname
    type(C_PTR) view

    lname = len_trim(name)
    view = c_datagroup_get_view_from_name_bufferify(group%voidptr, name, lname)
    call c_dataview_set_scalar_{typename}(view, value)
end subroutine datagroup_set_scalar_{typename}""".format(**d)

def create_array_view(d):
    # typename - part of function name
    # nd       - number of dimensions
    # f_type   - fortran type
    # shape     - :,:, to match nd
    if d['rank'] == 0:
        extents_decl = 'extents(1)'
        extents_asgn = 'extents(1) = 1_SIDRE_LENGTH'
    else:
        extents_decl = 'extents(%d)' % d['rank']
        extents_asgn = 'extents = shape(value, kind=SIDRE_LENGTH)'

    return """
! Generated by genfsidresplicer.py
function datagroup_create_array_view_{typename}{nd}(group, name, value) result(rv)
    use iso_c_binding
    implicit none

    class(datagroup), intent(IN) :: group
    character(*), intent(IN) :: name
    {f_type}, target, intent(IN) :: value{shape}
    integer(C_INT) :: lname
    type(dataview) :: rv
    integer(SIDRE_LENGTH) :: {extents_decl}
    integer(C_INT), parameter :: type = {sidre_type}
    type(C_PTR) addr

    lname = len_trim(name)
    call SHROUD_C_LOC(value, addr)
    if (c_associated(addr)) then
      {extents_asgn}
      rv%voidptr = c_datagroup_create_view_external_bufferify( &
          group%voidptr, name, lname, addr)
      call c_dataview_apply_type_shape(rv%voidptr, type, {rank}, extents)
    else
      rv%voidptr = c_datagroup_create_view_from_type_bufferify( &
          group%voidptr, name, lname, type, 0_C_LONG)
    endif
end function datagroup_create_array_view_{typename}{nd}""".format(
        extents_decl=extents_decl,
        extents_asgn=extents_asgn, **d)

def group_set_array_data_ptr(d):
    """
    call view%set_external_data_ptr
    hide c_loc call and add target attribute
    """
    # XXX - should this check the type/shape of value against the view?
    # typename - part of function name
    # nd       - number of dimensions
    # f_type   - fortran type
    # shape     - :,:, to match nd
    if d['rank'] == 0:
        extents_decl = 'extents(1)'
        extents_asgn = 'extents(1) = 1_SIDRE_LENGTH'
    else:
        extents_decl = 'extents(%d)' % d['rank']
        extents_asgn = 'extents = shape(value, kind=SIDRE_LENGTH)'

    return """
! Generated by genfsidresplicer.py
! This function does nothing if view name does not exist in group.
subroutine datagroup_set_array_data_ptr_{typename}{nd}(group, name, value)
    use iso_c_binding
    implicit none

    class(datagroup), intent(IN) :: group
    character(len=*), intent(IN) :: name
    {f_type}, target, intent(IN) :: value{shape}
    integer(C_INT) :: lname
    type(C_ptr) view
!    integer(SIDRE_LENGTH) :: {extents_decl}
!    integer(C_INT), parameter :: type = {sidre_type}
    type(C_PTR) addr

    lname = len_trim(name)
!    {extents_asgn}
    view = c_datagroup_get_view_from_name_bufferify(group%voidptr, name, lname)
    if (c_associated(view)) then
        call SHROUD_C_LOC(value, addr)
        call c_dataview_set_external_data_ptr_only(view, addr)
!        call c_dataview_apply_type_shape(rv%voidptr, type, {rank}, extents)
    endif
end subroutine datagroup_set_array_data_ptr_{typename}{nd}""".format(
        extents_decl=extents_decl,
        extents_asgn=extents_asgn, **d)

def view_set_array_data_ptr(d):
    """
    call view%set_external_data_ptr
    hide c_loc call and add target attribute
    """
    # XXX - should this check the type/shape of value against the view?
    # typename - part of function name
    # nd       - number of dimensions
    # f_type   - fortran type
    # shape     - :,:, to match nd
    if d['rank'] == 0:
        extents_decl = 'extents(1)'
        extents_asgn = 'extents(1) = 1_SIDRE_LENGTH'
    else:
        extents_decl = 'extents(%d)' % d['rank']
        extents_asgn = 'extents = shape(value, kind=SIDRE_LENGTH)'

    return """
! Generated by genfsidresplicer.py
subroutine dataview_set_array_data_ptr_{typename}{nd}(view, value)
    use iso_c_binding
    implicit none

    class(dataview), intent(IN) :: view
    {f_type}, target, intent(IN) :: value{shape}
!    integer(SIDRE_LENGTH) :: {extents_decl}
!    integer(C_INT), parameter :: type = {sidre_type}
    type(C_PTR) addr

!    lname = len_trim(name)
!    {extents_asgn}
    call SHROUD_C_LOC(value, addr)
    call c_dataview_set_external_data_ptr_only(view%voidptr, addr)
!    call c_dataview_apply_type_shape(rv%voidptr, type, {rank}, extents)
end subroutine dataview_set_array_data_ptr_{typename}{nd}""".format(
        extents_decl=extents_decl,
        extents_asgn=extents_asgn, **d)

def print_get_data(d):
    # typename - part of function name
    # nd       - number of dimensions
    # f_type   - fortran type
    # shape     - :,:, to match nd
    if d['rank'] == 0:
        return """
! Generated by genfsidresplicer.py
subroutine dataview_get_data_{typename}{nd}{suffix}(view, value)
    use iso_c_binding
    implicit none
    class(dataview), intent(IN) :: view
    {f_type}, pointer, intent(OUT) :: value{shape}
    type(C_PTR) cptr

    cptr = view%get_void_ptr()
    if (c_associated(cptr)) then
      call c_f_pointer(cptr, value)
    else
      nullify(value)
    endif
end subroutine dataview_get_data_{typename}{nd}{suffix}""".format(**d)

    else:
        return """
! Generated by genfsidresplicer.py
subroutine dataview_get_data_{typename}{nd}{suffix}(view, value)
    use iso_c_binding
    implicit none
    class(dataview), intent(IN) :: view
    {f_type}, pointer, intent(OUT) :: value{shape}
    type(C_PTR) cptr
    integer rank
    integer(SIDRE_LENGTH) extents({rank})

    cptr = view%get_void_ptr()
    if (c_associated(cptr)) then
      rank = view%get_shape({rank}, extents)
      call c_f_pointer(cptr, value, extents)
    else
      nullify(value)
    endif
end subroutine dataview_get_data_{typename}{nd}{suffix}""".format(**d)


def type_bound_procedure_part(d):
    return 'procedure :: {stem}_{typename}{nd}{suffix} => {wrap_class}_{stem}_{typename}{nd}{suffix}'.format(**d)

def type_bound_procedure_generic(d):
    return '{stem}_{typename}{nd}{suffix}'.format(**d)

def type_bound_procedure_generic_post(lines, generics, stem):
    lines.append('generic :: %s => &' % stem)
    for gen in generics[:-1]:
        lines.append('    ' + gen + ',  &')
    lines.append('    ' + generics[-1])


def foreach_type(lines, fcn, **kwargs):
    """ Call fcn once for each type, appending to lines.
    kwargs - additional values for format dictionary.
    """
    d = dict(
        nd = '',      # no dimension suffix
        suffix=''     # suffix of function name
    )
    d.update(kwargs)
    indx = 0
    for typetuple in types:
        d['typename'], d['f_type'], d['sidre_type'] = typetuple
        d['index'] = indx
        indx += 1
        lines.append(fcn(d))


def foreach_type_and_rank(lines, fcn, **kwargs):
    """ Call fcn once for each type and rank, appending to lines.
    kwargs - additional values for format dictionary.
    """
    shape = []
    lbound = []
    for nd in range(maxdims + 1):
        shape.append(':')
        lbound.append('lbound(value,%d)' % (nd+1))
    d = dict(
        suffix=''     # suffix of function name
    )
    d.update(kwargs)
    indx = 0
    for typetuple in types:
        d['typename'], d['f_type'], d['sidre_type'] = typetuple

        # scalar values
        # XXX - generic does not distinguish between pointer and non-pointer
#        d['rank'] = -1
#        d['nd'] = 'scalar'
#        d['shape'] = ''
#        lines.append(fcn(d))

        # scalar pointers
        d['index'] = indx
        indx += 1
        d['rank'] = 0
        d['nd'] = '_scalar'
        d['shape'] = ''
        d['lower_bound'] = ''
        lines.append(fcn(d))

        for nd in range(1,maxdims+1):
            d['index'] = indx
            indx += 1
            d['rank'] = nd
            d['nd'] = '_%dd' % nd
            d['shape'] = '(' + ','.join(shape[:nd]) + ')'
            d['lower_bound'] = '(' + ','.join(lbound[:nd]) + ')'
            lines.append(fcn(d))

def XXXprint_lines(printer, fcn, **kwargs):
    """Print output using printer function.
    [Used with cog]
    """
    lines = []
    foreach_type_and_rank(lines, fcn, **kwargs)
    for line in lines:
        printer(line)

#----------------------------------------------------------------------

def XXXprint_switch(printer, calls):
    """Print a switch statement on type and rank.
    Caller must set fileds in d:
      prefix = call or assignment
                  'call foo'
                  'nitems = foo'
      args   = arguments to function, must include parens.
                  '(args)'
                  ''           -- subroutine with no arguments
    """
    d = {}
    printer('  switch(type)')
    printer('  {')
    for typetuple in types:
        d['typename'], f_type, sidre_type = typetuple
        printer('  case %s:' % sidre_type)
        printer('    switch(rank)')
        printer('    {')
        for nd in range(0,maxdims+1):
            if nd == 0:
                d['nd'] = 'scalar'
            else:
                d['nd'] = '%dd' % nd
            printer('    case %d:' % nd)
            for ca in calls:
                d['prefix'] = ca[0]
                d['macro'] = '{prefix}_{typename}{nd}'.format(**d).upper()
                printer('      ' + ca[1].format(**d) + ';')
            printer('      break;')
        printer('    default:')
        printer('      break;')
        printer('    }')
        printer('    break;')
    printer('  default:')
    printer('    break;')
    printer('  }')

#----------------------------------------------------------------------

def gen_fortran():
    """Generate splicers used by Shroud.
    """
    print('! Generated by genfsidresplicer.py')


    # DataGroup
    lines = []

    generics = []
    extra = dict(
        wrap_class='datagroup',
        stem='get_scalar',
        )
    foreach_type(lines, type_bound_procedure_part, **extra)
    foreach_type(generics, type_bound_procedure_generic, **extra)
    type_bound_procedure_generic_post(lines, generics, extra['stem'])

    generics = []
    extra = dict(
        wrap_class='datagroup',
        stem='set_scalar',
        )
    foreach_type(lines, type_bound_procedure_part, **extra)
    foreach_type(generics, type_bound_procedure_generic, **extra)
    type_bound_procedure_generic_post(lines, generics, extra['stem'])

    generics = []
    extra = dict(
        wrap_class='datagroup',
        stem='create_array_view',
        )
    foreach_type_and_rank(lines, type_bound_procedure_part, **extra)
    foreach_type_and_rank(generics, type_bound_procedure_generic, **extra)
    type_bound_procedure_generic_post(lines, generics, extra['stem'])

    extra = dict(
        wrap_class='datagroup',
        stem='set_array_data_ptr',
        suffix='',
        )
    foreach_type_and_rank(lines, type_bound_procedure_part, **extra)
    generics = []
    foreach_type_and_rank(generics, type_bound_procedure_generic, **extra)
    type_bound_procedure_generic_post(lines, generics, extra['stem'])

    print('! splicer begin class.DataGroup.type_bound_procedure_part')
    for line in lines:
        print(line)
    print('! splicer end class.DataGroup.type_bound_procedure_part')

    print()
    print('------------------------------------------------------------')
    print()

    print('! splicer begin class.DataGroup.additional_functions')
    lines = []
#    foreach_type_and_rank(lines, create_allocatable_view)
    foreach_type(lines, group_get_scalar)
    foreach_type(lines, group_set_scalar)
    foreach_type_and_rank(lines, create_array_view)
    foreach_type_and_rank(lines, group_set_array_data_ptr)
    for line in lines:
        print(line)
    print('! splicer end class.DataGroup.additional_functions')


    # DataView
    lines = []
    extra = dict(
        wrap_class='dataview',
        stem='get_data',
        suffix='_ptr',
        )
    foreach_type_and_rank(lines, type_bound_procedure_part, **extra)
    generics = []
    foreach_type_and_rank(generics, type_bound_procedure_generic, **extra)
    type_bound_procedure_generic_post(lines, generics, extra['stem'])

    extra = dict(
        wrap_class='dataview',
        stem='set_array_data_ptr',
        suffix='',
        )
    foreach_type_and_rank(lines, type_bound_procedure_part, **extra)
    generics = []
    foreach_type_and_rank(generics, type_bound_procedure_generic, **extra)
    type_bound_procedure_generic_post(lines, generics, extra['stem'])

    print('! splicer begin class.DataView.type_bound_procedure_part')
    for line in lines:
        print(line)
    print('! splicer end class.DataView.type_bound_procedure_part')

    print()
    print('------------------------------------------------------------')
    print()

    print('! splicer begin class.DataView.additional_functions')
    lines = []
    foreach_type_and_rank(lines, print_get_data, suffix='_ptr')
    foreach_type_and_rank(lines, view_set_array_data_ptr)
    for line in lines:
        print(line)
    print('! splicer end class.DataView.additional_functions')

######################################################################

if __name__ == '__main__':
    try:
        cmd = sys.argv[1]
    except IndexError:
        raise RuntimeError("Missing command line argument")

    if cmd == 'fortran':
        # fortran splicers
        gen_fortran()
    elif cmd == 'test':
        AllocateAllocatable(print)
    else:
        raise RuntimeError("Unknown command")
