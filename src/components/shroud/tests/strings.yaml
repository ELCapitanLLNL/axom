#
# Test the many variations of strings
#

library: strings
cpp_header: strings.hpp

options:
  debug: True
  wrap_python: True

functions:

- decl: void passChar(char status)
  doxygen:
    brief: pass a single char argument as a scalar.

- decl: char returnChar()
  doxygen:
    brief: return a char argument (non-pointer)

########################################
# char * argument

- decl: void passCharPtr(char * dest+intent(out), const char *src)
  doxygen:
    brief: strcpy like behavior
    description: |
      dest is marked intent(OUT) to override the intent(INOUT) default
      This avoid a copy-in on dest.

########################################

- decl: const char * getChar1()  +pure
#  C_error_pattern: C_invalid_name
  doxygen:
    brief: return a 'const char *' as character(*)

- decl: const char * getChar2+len=30()
#  C_error_pattern: C_char_invalid_name
  doxygen:
    brief: return 'const char *' with fixed size (len=30)

- decl: const char * getChar3() # +pure
#  C_error_pattern: C_char_invalid_name
  doxygen:
    brief: return a 'const char *' as argument
  options:
    F_string_result_as_arg: output

########################################

- decl: const string& getString1()  +pure
#  C_error_pattern: C_invalid_name
  doxygen:
    brief: return a 'const string&' as character(*)

- decl: const string& getString2+len=30()
  C_error_pattern: C_invalid_name
  doxygen:
    brief: return 'const string&' with fixed size (len=30)

- decl: const string& getString3() # +pure
  C_error_pattern: C_invalid_name
  doxygen:
    brief: return a 'const string&' as argument
  options:
    F_string_result_as_arg: output

########################################

- decl: void acceptStringConstReference(const std::string & arg1)
  doxygen:
    brief: Accept a const string reference
    description: |
       Save contents of arg1.
       arg1 is assumed to be intent(IN) since it is const
       Will copy in.

- decl: void acceptStringReference(std::string & arg1)
  doxygen:
    brief: Accept a string reference
    description: |
       Append "dog" to the end of arg1.
       arg1 is assumed to be intent(INOUT)
       Must copy in and copy out.

#- decl: void acceptStringPointer(std::string * arg1)
#  doxygen:
#    brief: Accept a string pointer

#- decl: void acceptStringInstance(std::string arg1)
#  doxygen:
#    brief: Accept a string instance

########################################
# explicit annotations
# Currently explicit len/len_trim conflict with auto generated one and do not compile
# local declarations shadow parameter

- decl: void explicit1(char * name+len_trim(AAlen)+intent(in))
  options:
    C_bufferify_suffix: _BUFFER
# len_trim is added for free because intent(in)

- decl: void explicit2(char * name+len(AAtrim)+intent(out))
# len is added for free because intent(out)

#- decl: void explicit3(char * name+len(AAlen)+len_trim(AAtrim))
# set names for len/len_trim annotations

########################################
patterns:
    C_invalid_name: >
        if ({cpp_var}.empty()) {{
            return NULL;
        }}
    # return a blank field string if an error occurs
    C_invalid_name_as_buffer: >
        if ({cpp_var}.empty()) {{
            std::memset({f_string}, ' ', {f_string_len});
            return;
        }}

