# test template options

library: testnames

options:
  debug: True

  # always create wrappers to demonstrate name generation
  F_force_wrapper: True
  wrap_python: True

C_header_filename: top.h
C_impl_filename: top.cpp
F_module_name: top_module
F_impl_filename: top.f

LUA_module_name: lua_module_name

classes:
  - name: Names
    C_header_filename: foo.h
    C_impl_filename: foo.cpp
    F_module_name: name_module
    F_impl_filename: foo.f
    options:
      none: foo
      C_name_template: XXX_{C_prefix}{class_name}{underscore_name}{function_suffix}
      F_C_name_template: XXX_{C_prefix}{class_name}{underscore_name}{function_suffix}

    methods:
    -  decl: void method1
       F_name_method: type_method1
    -  decl: void method2


functions:
  - options:
       C_name_template: YYY_{C_prefix}{underscore_name}{function_suffix}
       F_C_name_template: YYY_{C_prefix}{underscore_name}{function_suffix}
       F_name_impl_template: "{library}_{class_name}{underscore_name}{function_suffix}"
  - decl: void function1
  - decl: void function2
    C_name: c_name_special
    F_C_name: f_c_name_special
    F_name_impl: f_name_special

  # test generic/overloaded functions
  - decl: void function3a(int i)
    F_name_generic: generic3
    F_name_impl: F_name_function3a_int
  - decl: void function3a(long i)
    F_name_generic: generic3
    F_name_impl: F_name_function3a_long
