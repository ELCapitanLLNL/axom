{
    "C_header_filename": "top.h", 
    "C_impl_filename": "top.cpp", 
    "F_impl_filename": "top.f", 
    "F_module_dependencies": [], 
    "F_module_name": "top_module", 
    "LUA_module_name": "lua_module_name", 
    "classes": [
        {
            "C_header_filename": "foo.h", 
            "C_impl_filename": "foo.cpp", 
            "F_derived_name": "FNames", 
            "F_impl_filename": "foo.f", 
            "F_module_dependencies": [
                [
                    "iso_c_binding", 
                    [
                        "C_PTR"
                    ]
                ]
            ], 
            "F_module_name": "name_module", 
            "cpp_header": "", 
            "fmt": {
                "CPP_this_call": "SH_this->", 
                "C_header_filename": "foo.h", 
                "C_impl_filename": "foo.cpp", 
                "C_type_name": "TES_names", 
                "F_derived_name": "FNames", 
                "F_impl_filename": "foo.f", 
                "F_module_name": "name_module", 
                "PY_PyObject": "PY_Names", 
                "PY_PyTypeObject": "PY_Names_Type", 
                "PY_capsule_name": "PY_Names_capsule_name", 
                "PY_from_object_func": "PP_Names_from_Object", 
                "PY_to_object_func": "PP_Names_to_Object", 
                "PY_type_filename": "pyNamestype.cpp", 
                "class_lower": "names", 
                "class_prefix": "names_", 
                "class_upper": "NAMES", 
                "cpp_class": "Names"
            }, 
            "methods": [
                {
                    "F_name_method": "type_method1", 
                    "_decl": "void method1()", 
                    "_function_index": 0, 
                    "_subprogram": "subroutine", 
                    "args": [], 
                    "attrs": {}, 
                    "decl": "void method1", 
                    "fmt": {
                        "C_call_list": "", 
                        "C_name": "XXX_TES_names_method1", 
                        "C_pre_call": "Names *SH_this = static_cast<Names *>(static_cast<void *>(self));", 
                        "C_prototype": "TES_names * self", 
                        "C_return_type": "void", 
                        "C_rv_decl": "void SH_rv", 
                        "F_C_call": "xxx_tes_names_method1", 
                        "F_C_name": "xxx_tes_names_method1", 
                        "F_arg_c_call": "obj%voidptr", 
                        "F_arg_c_call_tab": "\tobj%voidptr", 
                        "F_arguments": "obj", 
                        "F_name_generic": "method1", 
                        "F_name_impl": "names_method1", 
                        "F_name_method": "type_method1", 
                        "F_result": "RV", 
                        "F_subprogram": "subroutine", 
                        "PY_name_impl": "PY_names_method1", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "cpp_var": "SH_rv", 
                        "function_name": "method1", 
                        "underscore_name": "method1"
                    }, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "name": "method1", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "void method2()", 
                    "_function_index": 1, 
                    "_subprogram": "subroutine", 
                    "args": [], 
                    "attrs": {}, 
                    "decl": "void method2", 
                    "fmt": {
                        "C_call_list": "", 
                        "C_name": "XXX_TES_names_method2", 
                        "C_pre_call": "Names *SH_this = static_cast<Names *>(static_cast<void *>(self));", 
                        "C_prototype": "TES_names * self", 
                        "C_return_type": "void", 
                        "C_rv_decl": "void SH_rv", 
                        "F_C_call": "xxx_tes_names_method2", 
                        "F_C_name": "xxx_tes_names_method2", 
                        "F_arg_c_call": "obj%voidptr", 
                        "F_arg_c_call_tab": "\tobj%voidptr", 
                        "F_arguments": "obj", 
                        "F_name_generic": "method2", 
                        "F_name_impl": "names_method2", 
                        "F_name_method": "method2", 
                        "F_result": "RV", 
                        "F_subprogram": "subroutine", 
                        "PY_name_impl": "PY_names_method2", 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "self", 
                        "cpp_var": "SH_rv", 
                        "function_name": "method2", 
                        "underscore_name": "method2"
                    }, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "name": "method2", 
                        "type": "void"
                    }
                }
            ], 
            "name": "Names", 
            "options": {
                "C_name_template": "XXX_{C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
                "F_C_name_template": "XXX_{C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
                "none": "foo"
            }
        }
    ], 
    "cpp_header": "", 
    "fmt": {
        "BBB": "BBB", 
        "CPP_template": "", 
        "CPP_this": "SH_this", 
        "CPP_this_call": "", 
        "C_header_filename": "top.h", 
        "C_impl_filename": "top.cpp", 
        "C_post_call": "", 
        "C_pre_call": "", 
        "C_prefix": "TES_", 
        "C_result": "SH_rv", 
        "C_this": "self", 
        "F_C_prefix": "c_", 
        "F_C_pure_clause": "", 
        "F_C_result_clause": "", 
        "F_derived_member": "voidptr", 
        "F_impl_filename": "top.f", 
        "F_module_name": "top_module", 
        "F_pure_clause": "", 
        "F_result": "RV", 
        "F_result_clause": "", 
        "F_this": "obj", 
        "LUA_result": "rv", 
        "PY_PyObject": "PyObject", 
        "PY_header_filename": "pytestnamesmodule.hpp", 
        "PY_helper_filename": "pytestnameshelper.cpp", 
        "PY_library_doc": "library documentation", 
        "PY_module_filename": "pytestnamesmodule.cpp", 
        "PY_module_name": "testnames", 
        "PY_param_args": "args", 
        "PY_param_kwds": "kwds", 
        "PY_param_self": "self", 
        "PY_prefix": "PY_", 
        "PY_result": "rv", 
        "PY_used_param_args": false, 
        "PY_used_param_kwds": false, 
        "PY_used_param_self": false, 
        "class_prefix": "", 
        "function_suffix": "", 
        "library": "testnames", 
        "library_lower": "testnames", 
        "library_upper": "TESTNAMES", 
        "namespace_scope": ""
    }, 
    "functions": [
        {
            "_decl": "void function1()", 
            "_function_index": 2, 
            "_subprogram": "subroutine", 
            "args": [], 
            "attrs": {}, 
            "decl": "void function1", 
            "fmt": {
                "C_call_list": "", 
                "C_name": "YYY_TES_function1", 
                "C_prototype": "", 
                "C_return_type": "void", 
                "C_rv_decl": "void SH_rv", 
                "F_C_call": "yyy_tes_function1", 
                "F_C_name": "yyy_tes_function1", 
                "F_arg_c_call": "", 
                "F_arg_c_call_tab": "\t", 
                "F_arguments": "", 
                "F_name_generic": "function1", 
                "F_name_impl": "testnames_function1", 
                "F_name_method": "function1", 
                "F_result": "RV", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PY_function1", 
                "c_const": "", 
                "cpp_var": "SH_rv", 
                "function_name": "function1", 
                "underscore_name": "function1"
            }, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "name": "function1", 
                "type": "void"
            }
        }, 
        {
            "C_name": "c_name_special", 
            "F_C_name": "f_c_name_special", 
            "F_name_impl": "f_name_special", 
            "_decl": "void function2()", 
            "_function_index": 3, 
            "_subprogram": "subroutine", 
            "args": [], 
            "attrs": {}, 
            "decl": "void function2", 
            "fmt": {
                "C_call_list": "", 
                "C_name": "c_name_special", 
                "C_prototype": "", 
                "C_return_type": "void", 
                "C_rv_decl": "void SH_rv", 
                "F_C_call": "f_c_name_special", 
                "F_C_name": "f_c_name_special", 
                "F_arg_c_call": "", 
                "F_arg_c_call_tab": "\t", 
                "F_arguments": "", 
                "F_name_generic": "function2", 
                "F_name_impl": "f_name_special", 
                "F_name_method": "function2", 
                "F_result": "RV", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PY_function2", 
                "c_const": "", 
                "cpp_var": "SH_rv", 
                "function_name": "function2", 
                "underscore_name": "function2"
            }, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "name": "function2", 
                "type": "void"
            }
        }, 
        {
            "F_name_generic": "generic3", 
            "F_name_impl": "F_name_function3a_int", 
            "_cpp_overload": [
                4, 
                5
            ], 
            "_decl": "void function3a(int i+intent(in)+value)", 
            "_function_index": 4, 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "in", 
                        "value": true
                    }, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "i", 
                        "cpp_type": "int", 
                        "cpp_var": "i"
                    }, 
                    "fmtf": {
                        "c_var": "i", 
                        "f_var": "i"
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "i", 
                        "cpp_type": "int", 
                        "cpp_var": "i", 
                        "py_var": "SH_Py_i"
                    }, 
                    "name": "i", 
                    "type": "int"
                }
            ], 
            "attrs": {}, 
            "decl": "void function3a(int i)", 
            "fmt": {
                "C_call_list": "i", 
                "C_name": "YYY_TES_function3a_0", 
                "C_prototype": "int i", 
                "C_return_type": "void", 
                "C_rv_decl": "void SH_rv", 
                "F_C_call": "yyy_tes_function3a_0", 
                "F_C_name": "yyy_tes_function3a_0", 
                "F_arg_c_call": "i", 
                "F_arg_c_call_tab": "\ti", 
                "F_arguments": "i", 
                "F_name_generic": "generic3", 
                "F_name_impl": "F_name_function3a_int", 
                "F_name_method": "function3a_0", 
                "F_result": "RV", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PY_function3a_0", 
                "c_const": "", 
                "cpp_var": "SH_rv", 
                "function_name": "function3a", 
                "function_suffix": "_0", 
                "underscore_name": "function3a"
            }, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "name": "function3a", 
                "type": "void"
            }
        }, 
        {
            "F_name_generic": "generic3", 
            "F_name_impl": "F_name_function3a_long", 
            "_cpp_overload": [
                4, 
                5
            ], 
            "_decl": "void function3a(long i+intent(in)+value)", 
            "_function_index": 5, 
            "_overloaded": true, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "in", 
                        "value": true
                    }, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "i", 
                        "cpp_type": "long", 
                        "cpp_var": "i"
                    }, 
                    "fmtf": {
                        "c_var": "i", 
                        "f_var": "i"
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "i", 
                        "cpp_type": "long", 
                        "cpp_var": "i", 
                        "py_var": "SH_Py_i"
                    }, 
                    "name": "i", 
                    "type": "long"
                }
            ], 
            "attrs": {}, 
            "decl": "void function3a(long i)", 
            "fmt": {
                "C_call_list": "i", 
                "C_name": "YYY_TES_function3a_1", 
                "C_prototype": "long i", 
                "C_return_type": "void", 
                "C_rv_decl": "void SH_rv", 
                "F_C_call": "yyy_tes_function3a_1", 
                "F_C_name": "yyy_tes_function3a_1", 
                "F_arg_c_call": "i", 
                "F_arg_c_call_tab": "\ti", 
                "F_arguments": "i", 
                "F_name_generic": "generic3", 
                "F_name_impl": "F_name_function3a_long", 
                "F_name_method": "function3a_1", 
                "F_result": "RV", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PY_function3a_1", 
                "c_const": "", 
                "cpp_var": "SH_rv", 
                "function_name": "function3a", 
                "function_suffix": "_1", 
                "underscore_name": "function3a"
            }, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "name": "function3a", 
                "type": "void"
            }
        }, 
        {
            "_decl": "int function4()", 
            "_function_index": 6, 
            "_subprogram": "function", 
            "args": [], 
            "attrs": {}, 
            "decl": "int function4()", 
            "fmt": {
                "C_call_list": "", 
                "C_name": "YYY_TES_function4", 
                "C_prototype": "", 
                "C_return_type": "int", 
                "C_rv_decl": "int SH_rv", 
                "F_C_call": "yyy_tes_function4", 
                "F_C_name": "yyy_tes_function4", 
                "F_arg_c_call": "", 
                "F_arg_c_call_tab": "\t", 
                "F_arguments": "", 
                "F_name_generic": "function4", 
                "F_name_impl": "testnames_function4", 
                "F_name_method": "function4", 
                "F_result": "RV", 
                "F_result_clause": " result(RV)", 
                "F_subprogram": "function", 
                "PY_name_impl": "PY_function4", 
                "c_const": "", 
                "cpp_var": "SH_rv", 
                "function_name": "function4", 
                "underscore_name": "function4"
            }, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "name": "function4", 
                "type": "int"
            }
        }
    ], 
    "library": "testnames", 
    "namespace": "", 
    "options": {
        "C_bufferify_suffix": "_bufferify", 
        "C_header_filename_class_template": "wrap{cpp_class}.h", 
        "C_header_filename_library_template": "wrap{library}.h", 
        "C_impl_filename_class_template": "wrap{cpp_class}.cpp", 
        "C_impl_filename_library_template": "wrap{library}.cpp", 
        "C_name_template": "{C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
        "C_var_len_template": "N{c_var}", 
        "C_var_trim_template": "L{c_var}", 
        "F_C_name_template": "{F_C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
        "F_C_prefix": "c_", 
        "F_force_wrapper": true, 
        "F_impl_filename_class_template": "wrapf{cpp_class}.f", 
        "F_impl_filename_library_template": "wrapf{library_lower}.f", 
        "F_module_name_class_template": "{class_lower}_mod", 
        "F_module_name_library_template": "{library_lower}_mod", 
        "F_module_per_class": true, 
        "F_name_associated": "associated", 
        "F_name_generic_template": "{underscore_name}", 
        "F_name_impl_template": "{class_prefix}{underscore_name}{function_suffix}", 
        "F_name_instance_get": "get_instance", 
        "F_name_instance_set": "set_instance", 
        "F_name_method_template": "{underscore_name}{function_suffix}", 
        "F_result": "RV", 
        "F_string_len_trim": true, 
        "LUA_class_reg_template": "{LUA_prefix}{cpp_class}_Reg", 
        "LUA_ctor_name_template": "{cpp_class}", 
        "LUA_header_filename_template": "lua{library}module.hpp", 
        "LUA_metadata_template": "{cpp_class}.metatable", 
        "LUA_module_filename_template": "lua{library}module.cpp", 
        "LUA_module_name_template": "{library_lower}", 
        "LUA_module_reg_template": "{LUA_prefix}{library}_Reg", 
        "LUA_name_impl_template": "{LUA_prefix}{class_prefix}{underscore_name}", 
        "LUA_name_template": "{function_name}", 
        "LUA_userdata_member_template": "self", 
        "LUA_userdata_type_template": "{LUA_prefix}{cpp_class}_Type", 
        "PY_PyObject_template": "{PY_prefix}{cpp_class}", 
        "PY_PyTypeObject_template": "{PY_prefix}{cpp_class}_Type", 
        "PY_header_filename_template": "py{library}module.hpp", 
        "PY_helper_filename_template": "py{library}helper.cpp", 
        "PY_module_filename_template": "py{library}module.cpp", 
        "PY_name_impl_template": "{PY_prefix}{class_prefix}{underscore_name}{function_suffix}", 
        "PY_type_filename_template": "py{cpp_class}type.cpp", 
        "class_prefix_template": "{class_lower}_", 
        "debug": true, 
        "doxygen": true, 
        "wrap_c": true, 
        "wrap_fortran": true, 
        "wrap_lua": false, 
        "wrap_python": true
    }, 
    "patterns": [], 
    "types": {
        "MPI_Comm": {
            "c_header": "mpi.h", 
            "c_to_cpp": "MPI_Comm_f2c({c_var})", 
            "c_type": "MPI_Fint", 
            "cpp_to_c": "MPI_Comm_c2f({cpp_var})", 
            "cpp_type": "MPI_Comm", 
            "f_c_type": "integer(C_INT)", 
            "f_type": "integer"
        }, 
        "Names": {
            "LUA_pop": "({LUA_userdata_type} *)luaL_checkudata({LUA_state_var}, 1, \"{LUA_metadata}\")", 
            "LUA_type": "LUA_TUSERDATA", 
            "PY_PyObject": "PY_Names", 
            "PY_PyTypeObject": "PY_Names_Type", 
            "PY_from_object": "PP_Names_from_Object", 
            "PY_to_object": "PP_Names_to_Object", 
            "base": "wrapped", 
            "c_to_cpp": "static_cast<{c_const}Names{c_ptr}>(static_cast<{c_const}void *>({c_var}))", 
            "c_type": "TES_names", 
            "cpp_to_c": "static_cast<{c_const}TES_names *>(static_cast<{c_const}void *>({cpp_var}))", 
            "cpp_type": "Names", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_c_type": "type(C_PTR)", 
            "f_derived_type": "FNames", 
            "f_module": {
                "name_module": [
                    "names"
                ]
            }, 
            "f_return_code": "{F_result}%{F_derived_member} = {F_C_call}({F_arg_c_call_tab})", 
            "f_to_c": "{f_var}%get_instance()", 
            "f_type": "type(FNames)", 
            "forward": "Names", 
            "py_statements": {
                "intent_in": {
                    "post_parse": [
                        "{cpp_var} = {py_var} ? {py_var}->{BBB} : NULL;"
                    ]
                }, 
                "intent_out": {
                    "ctor": [
                        "{PyObject} * {py_var} = PyObject_New({PyObject}, &{PyTypeObject});", 
                        "{py_var}->{BBB} = {cpp_var};"
                    ]
                }
            }
        }, 
        "bool": {
            "LUA_pop": "lua_toboolean({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushboolean({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TBOOLEAN", 
            "PY_PyTypeObject": "PyBool_Type", 
            "PY_ctor": "PyBool_FromLong({c_var})", 
            "c_type": "bool", 
            "cpp_type": "bool", 
            "f_c_type": "logical(C_BOOL)", 
            "f_module": {
                "iso_c_binding": [
                    "C_BOOL"
                ]
            }, 
            "f_statements": {
                "intent_in": {
                    "c_local_var": true, 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_out": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ]
                }, 
                "result": {
                    "need_wrapper": true
                }
            }, 
            "f_type": "logical", 
            "py_statements": {
                "intent_in": {
                    "post_parse": [
                        "{cpp_var} = PyObject_IsTrue({py_var});"
                    ]
                }
            }
        }, 
        "char": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in_buf": {
                    "cpp_header": "<cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "delete [] {cpp_var};"
                    ], 
                    "pre_call": [
                        "char * {cpp_var} = new char [{c_var_trim} + 1];", 
                        "std::strncpy({cpp_var}, {c_var}, {c_var_trim});", 
                        "{cpp_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_out_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "delete [] {cpp_var};"
                    ], 
                    "pre_call": [
                        "char * {cpp_var} = new char [{c_var_len} + 1];"
                    ]
                }, 
                "result_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_type": "character(*)"
        }, 
        "char_scalar": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "c_statements": {
                "result": {
                    "post_call": [
                        "*{c_var} = {cpp_val};"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_type": "character"
        }, 
        "double": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "d", 
            "c_type": "double", 
            "cpp_type": "double", 
            "f_cast": "real({f_var}, C_DOUBLE)", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "float": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "f", 
            "c_type": "float", 
            "cpp_type": "float", 
            "f_cast": "real({f_var}, C_FLOAT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "i", 
            "c_type": "int", 
            "cpp_type": "int", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "integer(C_INT)": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "i", 
            "c_type": "int", 
            "cpp_type": "int", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "integer(C_LONG)": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "l", 
            "c_type": "long", 
            "cpp_type": "long", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "l", 
            "c_type": "long", 
            "cpp_type": "long", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "real(C_DOUBLE)": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "d", 
            "c_type": "double", 
            "cpp_type": "double", 
            "f_cast": "real({f_var}, C_DOUBLE)", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "real(C_FLOAT)": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "f", 
            "c_type": "float", 
            "cpp_type": "float", 
            "f_cast": "real({f_var}, C_FLOAT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "size_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromLong({c_var})", 
            "c_header": "stdlib.h", 
            "c_type": "size_t", 
            "cpp_type": "size_t", 
            "f_cast": "int({f_var}, C_SIZE_T)", 
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            }, 
            "f_type": "integer(C_SIZE_T)"
        }, 
        "std::string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cpp_header": "<cstring>", 
                    "post_call": [
                        "strcpy({c_var}, {cpp_val});"
                    ]
                }, 
                "intent_out_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ]
                }, 
                "result_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_header": "<string>", 
            "cpp_to_c": "{cpp_var}.c_str()", 
            "cpp_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "post_parse": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }
            }
        }, 
        "string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cpp_header": "<cstring>", 
                    "post_call": [
                        "strcpy({c_var}, {cpp_val});"
                    ]
                }, 
                "intent_out_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ]
                }, 
                "result_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_header": "<string>", 
            "cpp_to_c": "{cpp_var}.c_str()", 
            "cpp_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "post_parse": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }
            }
        }, 
        "string_result_fstr": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cpp_header": "<cstring>", 
                    "post_call": [
                        "strcpy({c_var}, {cpp_val});"
                    ]
                }, 
                "intent_out_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ]
                }, 
                "result_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_header": "<string>", 
            "cpp_to_c": "{cpp_var}.c_str()", 
            "cpp_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_helper": {
                "f_return_code": {
                    "fstr": true
                }
            }, 
            "f_return_code": "{F_result} = fstr({F_C_call}({F_arg_c_call_tab}))", 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "post_parse": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }
            }
        }, 
        "void": {
            "PY_ctor": "PyCapsule_New({cpp_var}, NULL, NULL)", 
            "c_type": "void", 
            "cpp_type": "void", 
            "f_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_type": "type(C_PTR)"
        }
    }
}