{
    "F_module_dependencies": [], 
    "classes": [], 
    "cpp_header": "strings.hpp", 
    "fmt": {
        "BBB": "BBB", 
        "CPP_template": "", 
        "CPP_this": "SH_this", 
        "CPP_this_call": "", 
        "C_header_filename": "wrapstrings.h", 
        "C_impl_filename": "wrapstrings.cpp", 
        "C_post_call": "", 
        "C_pre_call": "", 
        "C_prefix": "STR_", 
        "C_result": "SH_rv", 
        "C_string_result_as_arg": "SH_F_rv", 
        "C_this": "self", 
        "F_C_prefix": "c_", 
        "F_C_pure_clause": "", 
        "F_C_result_clause": "", 
        "F_derived_member": "voidptr", 
        "F_impl_filename": "wrapfstrings.f", 
        "F_module_name": "strings_mod", 
        "F_pure_clause": "", 
        "F_result": "SH_rv", 
        "F_result_clause": "", 
        "F_string_result_as_arg": "", 
        "F_this": "obj", 
        "LUA_result": "rv", 
        "PY_PyObject": "PyObject", 
        "PY_header_filename": "pystringsmodule.hpp", 
        "PY_helper_filename": "pystringshelper.cpp", 
        "PY_library_doc": "library documentation", 
        "PY_module_filename": "pystringsmodule.cpp", 
        "PY_module_name": "strings", 
        "PY_param_args": "args", 
        "PY_param_kwds": "kwds", 
        "PY_param_self": "self", 
        "PY_prefix": "PY_", 
        "PY_result": "rv", 
        "PY_used_param_args": false, 
        "PY_used_param_kwds": false, 
        "PY_used_param_self": false, 
        "YAML_type_filename": "strings_types.yaml", 
        "class_prefix": "", 
        "function_suffix": "", 
        "library": "strings", 
        "library_lower": "strings", 
        "library_upper": "STRINGS", 
        "namespace_scope": ""
    }, 
    "functions": [
        {
            "_decl": "void passChar(char_scalar status+intent(in)+value)", 
            "_function_index": 0, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "in", 
                        "value": true
                    }, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "status", 
                        "c_var_len": "SH_Nstatus", 
                        "c_var_trim": "SH_Lstatus", 
                        "cpp_type": "char", 
                        "cpp_var": "status"
                    }, 
                    "fmtf": {
                        "c_var": "status", 
                        "f_var": "status"
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "status", 
                        "cpp_type": "char", 
                        "cpp_var": "status", 
                        "py_var": "SH_Py_status"
                    }, 
                    "name": "status", 
                    "type": "char_scalar"
                }
            ], 
            "attrs": {}, 
            "decl": "void passChar(char status)", 
            "doxygen": {
                "brief": "pass a single char argument as a scalar."
            }, 
            "fmt": {
                "C_call_code": "passChar(status);", 
                "C_call_list": "status", 
                "C_name": "STR_pass_char", 
                "C_prototype": "char status", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_pass_char", 
                "F_C_name": "pass_char", 
                "F_arg_c_call": "status", 
                "F_arg_c_call_tab": "\tstatus", 
                "F_arguments": "status", 
                "F_call_code": "call c_pass_char(\tstatus)", 
                "F_name_function": "pass_char", 
                "F_name_generic": "pass_char", 
                "F_name_impl": "pass_char", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PY_pass_char", 
                "c_const": "", 
                "function_name": "passChar", 
                "underscore_name": "pass_char"
            }, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "name": "passChar", 
                "type": "void"
            }
        }, 
        {
            "_PTR_F_C_index": 14, 
            "_decl": "char_scalar returnChar()", 
            "_function_index": 1, 
            "_subprogram": "function", 
            "args": [], 
            "attrs": {}, 
            "decl": "char returnChar()", 
            "doxygen": {
                "brief": "return a char argument (non-pointer)"
            }, 
            "fmt": {
                "C_call_code": "char SH_rv = returnChar();", 
                "C_call_list": "", 
                "C_name": "STR_return_char", 
                "C_prototype": "", 
                "C_return_code": "return SH_rv;", 
                "C_return_type": "char", 
                "F_C_call": "c_return_char_bufferify", 
                "F_C_name": "c_return_char", 
                "F_arg_c_call": "SH_rv, len(SH_rv, kind=C_INT)", 
                "F_arg_c_call_tab": "\tSH_rv\tlen(SH_rv, kind=C_INT)", 
                "F_arguments": "", 
                "F_call_code": "call c_return_char_bufferify(\tSH_rv\tlen(SH_rv, kind=C_INT))", 
                "F_name_function": "return_char", 
                "F_name_generic": "return_char", 
                "F_name_impl": "return_char", 
                "F_result_clause": " result(SH_rv)", 
                "F_subprogram": "function", 
                "PY_name_impl": "PY_return_char", 
                "c_const": "", 
                "function_name": "returnChar", 
                "underscore_name": "return_char"
            }, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "fmtc": {
                    "cpp_rv_decl": "char SH_rv", 
                    "cpp_var": "SH_rv"
                }, 
                "name": "returnChar", 
                "type": "char_scalar"
            }
        }, 
        {
            "_PTR_C_CPP_index": 1, 
            "_decl": "void returnChar(char_scalar * SH_F_rv+intent(out)+len(NSH_F_rv))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 14, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "_is_result": true, 
                        "const": false, 
                        "intent": "out", 
                        "len": "NSH_F_rv", 
                        "ptr": true, 
                        "reference": false
                    }, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "SH_F_rv", 
                        "c_var_len": "NSH_F_rv", 
                        "c_var_trim": "SH_LSH_F_rv", 
                        "cpp_type": "char", 
                        "cpp_val": "SH_rv", 
                        "cpp_var": "SH_rv"
                    }, 
                    "fmtf": {
                        "c_var": "SH_rv", 
                        "f_var": "SH_rv"
                    }, 
                    "name": "SH_F_rv", 
                    "type": "char_scalar"
                }
            ], 
            "attrs": {}, 
            "decl": "char returnChar()", 
            "doxygen": {
                "brief": "return a char argument (non-pointer)"
            }, 
            "fmt": {
                "C_call_code": "char SH_rv = returnChar();", 
                "C_call_list": "", 
                "C_name": "STR_return_char_bufferify", 
                "C_post_call": "std::memset(SH_F_rv, ' ', NSH_F_rv);\nSH_F_rv[0] = SH_rv;", 
                "C_prototype": "char * SH_F_rv, int NSH_F_rv", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_return_char_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": false, 
                    "ptr": false, 
                    "reference": false
                }, 
                "fmtc": {
                    "cpp_rv_decl": "char SH_rv", 
                    "cpp_var": "SH_rv"
                }, 
                "name": "returnChar", 
                "type": "void"
            }
        }, 
        {
            "_PTR_F_C_index": 15, 
            "_decl": "void passCharPtr(char * dest+intent(out), const char * src+intent(in))", 
            "_function_index": 2, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "out", 
                        "ptr": true, 
                        "value": false
                    }, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "dest", 
                        "c_var_len": "SH_Ndest", 
                        "c_var_trim": "SH_Ldest", 
                        "cpp_type": "char", 
                        "cpp_var": "dest"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "dest", 
                        "cpp_type": "char", 
                        "cpp_var": "dest", 
                        "py_var": "SH_Py_dest"
                    }, 
                    "name": "dest", 
                    "type": "char"
                }, 
                {
                    "attrs": {
                        "const": true, 
                        "intent": "in", 
                        "ptr": true, 
                        "value": false
                    }, 
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": " *", 
                        "c_var": "src", 
                        "c_var_len": "SH_Nsrc", 
                        "c_var_trim": "SH_Lsrc", 
                        "cpp_type": "char", 
                        "cpp_var": "src"
                    }, 
                    "fmtpy": {
                        "c_const": "const ", 
                        "c_ptr": " *", 
                        "c_var": "src", 
                        "cpp_type": "char", 
                        "cpp_var": "src", 
                        "py_var": "SH_Py_src"
                    }, 
                    "name": "src", 
                    "type": "char"
                }
            ], 
            "attrs": {}, 
            "decl": "void passCharPtr(char * dest+intent(out), const char *src)", 
            "doxygen": {
                "brief": "strcpy like behavior", 
                "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\n"
            }, 
            "fmt": {
                "C_call_code": "passCharPtr(dest, src);", 
                "C_call_list": "dest, src", 
                "C_name": "STR_pass_char_ptr", 
                "C_prototype": "char * dest, const char * src", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_pass_char_ptr_bufferify", 
                "F_C_name": "c_pass_char_ptr", 
                "F_arg_c_call": "dest, len(dest, kind=C_INT), src, len_trim(src, kind=C_INT)", 
                "F_arg_c_call_tab": "\tdest\tlen(dest, kind=C_INT)\tsrc\tlen_trim(src, kind=C_INT)", 
                "F_arguments": "dest, src", 
                "F_call_code": "call c_pass_char_ptr_bufferify(\tdest\tlen(dest, kind=C_INT)\tsrc\tlen_trim(src, kind=C_INT))", 
                "F_name_function": "pass_char_ptr", 
                "F_name_generic": "pass_char_ptr", 
                "F_name_impl": "pass_char_ptr", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PY_pass_char_ptr", 
                "c_const": "", 
                "function_name": "passCharPtr", 
                "underscore_name": "pass_char_ptr"
            }, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "name": "passCharPtr", 
                "type": "void"
            }
        }, 
        {
            "_PTR_C_CPP_index": 2, 
            "_decl": "void passCharPtr(char * dest+intent(out)+len(Ndest), const char * src+intent(in)+len_trim(Lsrc))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 15, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "out", 
                        "len": "Ndest", 
                        "ptr": true, 
                        "value": false
                    }, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "dest", 
                        "c_var_len": "Ndest", 
                        "c_var_trim": "SH_Ldest", 
                        "cpp_type": "char", 
                        "cpp_val": "SH_dest", 
                        "cpp_var": "SH_dest"
                    }, 
                    "fmtf": {
                        "c_var": "dest", 
                        "f_var": "dest"
                    }, 
                    "name": "dest", 
                    "type": "char"
                }, 
                {
                    "attrs": {
                        "const": true, 
                        "intent": "in", 
                        "len_trim": "Lsrc", 
                        "ptr": true, 
                        "value": false
                    }, 
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": " *", 
                        "c_var": "src", 
                        "c_var_len": "SH_Nsrc", 
                        "c_var_trim": "Lsrc", 
                        "cpp_type": "char", 
                        "cpp_val": "SH_src", 
                        "cpp_var": "SH_src"
                    }, 
                    "fmtf": {
                        "c_var": "src", 
                        "f_var": "src"
                    }, 
                    "name": "src", 
                    "type": "char"
                }
            ], 
            "attrs": {}, 
            "decl": "void passCharPtr(char * dest+intent(out), const char *src)", 
            "doxygen": {
                "brief": "strcpy like behavior", 
                "description": "dest is marked intent(OUT) to override the intent(INOUT) default\nThis avoid a copy-in on dest.\n"
            }, 
            "fmt": {
                "C_call_code": "passCharPtr(SH_dest, SH_src);", 
                "C_call_list": "SH_dest, SH_src", 
                "C_name": "STR_pass_char_ptr_bufferify", 
                "C_post_call": "shroud_FccCopy(dest, Ndest, SH_dest);\ndelete [] SH_dest;\ndelete [] SH_src;", 
                "C_pre_call": "char * SH_dest = new char [Ndest + 1];\nchar * SH_src = new char [Lsrc + 1];\nstd::strncpy(SH_src, src, Lsrc);\nSH_src[Lsrc] = '\\0';", 
                "C_prototype": "char * dest, int Ndest, const char * src, int Lsrc", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_pass_char_ptr_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {}, 
                "name": "passCharPtr", 
                "type": "void"
            }
        }, 
        {
            "_decl": "const char * getChar1()+pure", 
            "_function_index": 3, 
            "_subprogram": "function", 
            "args": [], 
            "attrs": {
                "pure": true
            }, 
            "decl": "const char * getChar1()  +pure", 
            "doxygen": {
                "brief": "return a 'const char *' as character(*)"
            }, 
            "fmt": {
                "C_call_code": "const char * SH_rv = getChar1();", 
                "C_call_list": "", 
                "C_name": "STR_get_char1", 
                "C_prototype": "", 
                "C_return_code": "return SH_rv;", 
                "C_return_type": "const char *", 
                "F_C_name": "c_get_char1", 
                "PY_name_impl": "PY_get_char1", 
                "c_const": "const ", 
                "function_name": "getChar1", 
                "underscore_name": "get_char1"
            }, 
            "options": {
                "wrap_fortran": false
            }, 
            "result": {
                "attrs": {
                    "const": true, 
                    "ptr": true
                }, 
                "fmtc": {
                    "cpp_rv_decl": "const char * SH_rv", 
                    "cpp_var": "SH_rv"
                }, 
                "name": "getChar1", 
                "type": "char"
            }
        }, 
        {
            "_PTR_C_CPP_index": 3, 
            "_decl": "void getChar1(char * SH_F_rv+intent(out)+len(NSH_F_rv))+pure", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 16, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "_is_result": true, 
                        "const": false, 
                        "intent": "out", 
                        "len": "NSH_F_rv", 
                        "ptr": true
                    }, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "SH_F_rv", 
                        "c_var_len": "NSH_F_rv", 
                        "c_var_trim": "SH_LSH_F_rv", 
                        "cpp_type": "char", 
                        "cpp_val": "SH_rv", 
                        "cpp_var": "SH_rv"
                    }, 
                    "name": "SH_F_rv", 
                    "type": "char"
                }
            ], 
            "attrs": {
                "pure": true
            }, 
            "decl": "const char * getChar1()  +pure", 
            "doxygen": {
                "brief": "return a 'const char *' as character(*)"
            }, 
            "fmt": {
                "C_call_code": "const char * SH_rv = getChar1();", 
                "C_call_list": "", 
                "C_name": "STR_get_char1_bufferify", 
                "C_post_call": "if (SH_rv == NULL) {\n  std::memset(SH_F_rv, ' ', NSH_F_rv);\n} else {\n  shroud_FccCopy(SH_F_rv, NSH_F_rv, SH_rv);\n}", 
                "C_prototype": "char * SH_F_rv, int NSH_F_rv", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_get_char1_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": false, 
                    "ptr": false, 
                    "reference": false
                }, 
                "fmtc": {
                    "cpp_rv_decl": "const char * SH_rv", 
                    "cpp_var": "SH_rv"
                }, 
                "name": "getChar1", 
                "type": "void"
            }
        }, 
        {
            "_PTR_F_C_index": 3, 
            "_decl": "const string_result_fstr * getChar1()+pure", 
            "_function_index": 17, 
            "_subprogram": "function", 
            "args": [], 
            "attrs": {
                "pure": true
            }, 
            "decl": "const char * getChar1()  +pure", 
            "doxygen": {
                "brief": "return a 'const char *' as character(*)"
            }, 
            "fmt": {
                "F_C_call": "c_get_char1", 
                "F_arg_c_call": "", 
                "F_arg_c_call_tab": "\t", 
                "F_arguments": "", 
                "F_call_code": "SH_rv = fstr(c_get_char1(\t))", 
                "F_name_function": "get_char1", 
                "F_name_generic": "get_char1", 
                "F_name_impl": "get_char1", 
                "F_result_clause": " result(SH_rv)", 
                "F_subprogram": "function", 
                "c_var_len": "strlen_ptr(c_get_char1(\t))"
            }, 
            "options": {
                "wrap_c": false, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": true, 
                    "ptr": true
                }, 
                "name": "getChar1", 
                "type": "string_result_fstr"
            }
        }, 
        {
            "_PTR_F_C_index": 18, 
            "_decl": "const char * getChar2()", 
            "_function_index": 4, 
            "_subprogram": "function", 
            "args": [], 
            "attrs": {}, 
            "decl": "const char * getChar2+len(30)()", 
            "doxygen": {
                "brief": "return 'const char *' with fixed size (len=30)"
            }, 
            "fmt": {
                "C_call_code": "const char * SH_rv = getChar2();", 
                "C_call_list": "", 
                "C_name": "STR_get_char2", 
                "C_prototype": "", 
                "C_return_code": "return SH_rv;", 
                "C_return_type": "const char *", 
                "F_C_call": "c_get_char2_bufferify", 
                "F_C_name": "c_get_char2", 
                "F_arg_c_call": "SH_rv, len(SH_rv, kind=C_INT)", 
                "F_arg_c_call_tab": "\tSH_rv\tlen(SH_rv, kind=C_INT)", 
                "F_arguments": "", 
                "F_call_code": "call c_get_char2_bufferify(\tSH_rv\tlen(SH_rv, kind=C_INT))", 
                "F_name_function": "get_char2", 
                "F_name_generic": "get_char2", 
                "F_name_impl": "get_char2", 
                "F_result_clause": " result(SH_rv)", 
                "F_subprogram": "function", 
                "PY_name_impl": "PY_get_char2", 
                "c_const": "const ", 
                "c_var_len": "30", 
                "function_name": "getChar2", 
                "underscore_name": "get_char2"
            }, 
            "options": {}, 
            "result": {
                "attrs": {
                    "const": true, 
                    "len": "30", 
                    "ptr": true
                }, 
                "fmtc": {
                    "cpp_rv_decl": "const char * SH_rv", 
                    "cpp_var": "SH_rv"
                }, 
                "name": "getChar2", 
                "type": "char"
            }
        }, 
        {
            "_PTR_C_CPP_index": 4, 
            "_decl": "void getChar2(char * SH_F_rv+intent(out)+len(NSH_F_rv))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 18, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "_is_result": true, 
                        "const": false, 
                        "intent": "out", 
                        "len": "NSH_F_rv", 
                        "ptr": true
                    }, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "SH_F_rv", 
                        "c_var_len": "NSH_F_rv", 
                        "c_var_trim": "SH_LSH_F_rv", 
                        "cpp_type": "char", 
                        "cpp_val": "SH_rv", 
                        "cpp_var": "SH_rv"
                    }, 
                    "fmtf": {
                        "c_var": "SH_rv", 
                        "f_var": "SH_rv"
                    }, 
                    "name": "SH_F_rv", 
                    "type": "char"
                }
            ], 
            "attrs": {}, 
            "decl": "const char * getChar2+len(30)()", 
            "doxygen": {
                "brief": "return 'const char *' with fixed size (len=30)"
            }, 
            "fmt": {
                "C_call_code": "const char * SH_rv = getChar2();", 
                "C_call_list": "", 
                "C_name": "STR_get_char2_bufferify", 
                "C_post_call": "if (SH_rv == NULL) {\n  std::memset(SH_F_rv, ' ', NSH_F_rv);\n} else {\n  shroud_FccCopy(SH_F_rv, NSH_F_rv, SH_rv);\n}", 
                "C_prototype": "char * SH_F_rv, int NSH_F_rv", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_get_char2_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": false, 
                    "len": "30", 
                    "ptr": false, 
                    "reference": false
                }, 
                "fmtc": {
                    "cpp_rv_decl": "const char * SH_rv", 
                    "cpp_var": "SH_rv"
                }, 
                "name": "getChar2", 
                "type": "void"
            }
        }, 
        {
            "_decl": "const char * getChar3()", 
            "_function_index": 5, 
            "_subprogram": "function", 
            "args": [], 
            "attrs": {}, 
            "decl": "const char * getChar3()", 
            "doxygen": {
                "brief": "return a 'const char *' as argument"
            }, 
            "fmt": {
                "C_call_code": "const char * SH_rv = getChar3();", 
                "C_call_list": "", 
                "C_name": "STR_get_char3", 
                "C_prototype": "", 
                "C_return_code": "return SH_rv;", 
                "C_return_type": "const char *", 
                "F_C_name": "c_get_char3", 
                "F_string_result_as_arg": "output", 
                "PY_name_impl": "PY_get_char3", 
                "c_const": "const ", 
                "function_name": "getChar3", 
                "underscore_name": "get_char3"
            }, 
            "options": {
                "F_string_result_as_arg": "output", 
                "wrap_fortran": false
            }, 
            "result": {
                "attrs": {
                    "const": true, 
                    "ptr": true
                }, 
                "fmtc": {
                    "cpp_rv_decl": "const char * SH_rv", 
                    "cpp_var": "SH_rv"
                }, 
                "name": "getChar3", 
                "type": "char"
            }
        }, 
        {
            "_PTR_C_CPP_index": 5, 
            "_decl": "void getChar3(char * output+intent(out)+len(Noutput))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 19, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "_is_result": true, 
                        "const": false, 
                        "intent": "out", 
                        "len": "Noutput", 
                        "ptr": true
                    }, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "output", 
                        "c_var_len": "Noutput", 
                        "c_var_trim": "SH_Loutput", 
                        "cpp_type": "char", 
                        "cpp_val": "SH_rv", 
                        "cpp_var": "SH_rv"
                    }, 
                    "fmtf": {
                        "c_var": "output", 
                        "f_var": "output"
                    }, 
                    "name": "output", 
                    "type": "char"
                }
            ], 
            "attrs": {}, 
            "decl": "const char * getChar3()", 
            "doxygen": {
                "brief": "return a 'const char *' as argument"
            }, 
            "fmt": {
                "C_call_code": "const char * SH_rv = getChar3();", 
                "C_call_list": "", 
                "C_name": "STR_get_char3_bufferify", 
                "C_post_call": "if (SH_rv == NULL) {\n  std::memset(output, ' ', Noutput);\n} else {\n  shroud_FccCopy(output, Noutput, SH_rv);\n}", 
                "C_prototype": "char * output, int Noutput", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_get_char3_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": false, 
                    "ptr": false, 
                    "reference": false
                }, 
                "fmtc": {
                    "cpp_rv_decl": "const char * SH_rv", 
                    "cpp_var": "SH_rv"
                }, 
                "name": "getChar3", 
                "type": "void"
            }
        }, 
        {
            "_PTR_C_CPP_index": 5, 
            "_PTR_F_C_index": 19, 
            "_decl": "void getChar3(char * output+intent(out)+len(Noutput))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 20, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "_is_result": true, 
                        "const": false, 
                        "intent": "out", 
                        "len": "Noutput", 
                        "ptr": true
                    }, 
                    "name": "output", 
                    "type": "char"
                }
            ], 
            "attrs": {}, 
            "decl": "const char * getChar3()", 
            "doxygen": {
                "brief": "return a 'const char *' as argument"
            }, 
            "fmt": {
                "F_C_call": "c_get_char3_bufferify", 
                "F_arg_c_call": "output, len(output, kind=C_INT)", 
                "F_arg_c_call_tab": "\toutput\tlen(output, kind=C_INT)", 
                "F_arguments": "output", 
                "F_call_code": "call c_get_char3_bufferify(\toutput\tlen(output, kind=C_INT))", 
                "F_name_function": "get_char3", 
                "F_name_generic": "get_char3", 
                "F_name_impl": "get_char3", 
                "F_subprogram": "subroutine", 
                "function_suffix": ""
            }, 
            "options": {
                "wrap_c": false, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": false, 
                    "ptr": false, 
                    "reference": false
                }, 
                "name": "getChar3", 
                "type": "void"
            }
        }, 
        {
            "_decl": "const string & getString1()+pure", 
            "_function_index": 6, 
            "_subprogram": "function", 
            "args": [], 
            "attrs": {
                "pure": true
            }, 
            "decl": "const string& getString1()  +pure", 
            "doxygen": {
                "brief": "return a 'const string&' as character(*)"
            }, 
            "fmt": {
                "C_call_code": "const std::string & SH_rv = getString1();", 
                "C_call_list": "", 
                "C_name": "STR_get_string1", 
                "C_prototype": "", 
                "C_return_code": "return XSH_rv;", 
                "C_return_type": "const char *", 
                "F_C_name": "c_get_string1", 
                "PY_name_impl": "PY_get_string1", 
                "c_const": "const ", 
                "function_name": "getString1", 
                "underscore_name": "get_string1"
            }, 
            "options": {
                "wrap_fortran": false
            }, 
            "result": {
                "attrs": {
                    "const": true, 
                    "reference": true
                }, 
                "fmtc": {
                    "c_rv_decl": "const char * XSH_rv", 
                    "c_val": "SH_rv.c_str()", 
                    "c_var": "XSH_rv", 
                    "cpp_rv_decl": "const std::string & SH_rv", 
                    "cpp_var": "SH_rv"
                }, 
                "name": "getString1", 
                "type": "string"
            }
        }, 
        {
            "_PTR_C_CPP_index": 6, 
            "_decl": "void getString1(string & SH_F_rv+intent(out)+len(NSH_F_rv))+pure", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 21, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "_is_result": true, 
                        "const": false, 
                        "intent": "out", 
                        "len": "NSH_F_rv", 
                        "reference": true
                    }, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "SH_F_rv", 
                        "c_var_len": "NSH_F_rv", 
                        "c_var_trim": "SH_LSH_F_rv", 
                        "cpp_type": "std::string", 
                        "cpp_val": "SH_rv.c_str()", 
                        "cpp_var": "SH_rv"
                    }, 
                    "name": "SH_F_rv", 
                    "type": "string"
                }
            ], 
            "attrs": {
                "pure": true
            }, 
            "decl": "const string& getString1()  +pure", 
            "doxygen": {
                "brief": "return a 'const string&' as character(*)"
            }, 
            "fmt": {
                "C_call_code": "const std::string & SH_rv = getString1();", 
                "C_call_list": "", 
                "C_name": "STR_get_string1_bufferify", 
                "C_post_call": "if (SH_rv.empty()) {\n  std::memset(SH_F_rv, ' ', NSH_F_rv);\n} else {\n  shroud_FccCopy(SH_F_rv, NSH_F_rv, SH_rv.c_str());\n}", 
                "C_prototype": "char * SH_F_rv, int NSH_F_rv", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_get_string1_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": false, 
                    "ptr": false, 
                    "reference": false
                }, 
                "fmtc": {
                    "cpp_rv_decl": "const std::string & SH_rv", 
                    "cpp_var": "SH_rv"
                }, 
                "name": "getString1", 
                "type": "void"
            }
        }, 
        {
            "_PTR_F_C_index": 6, 
            "_decl": "const string_result_fstr & getString1()+pure", 
            "_function_index": 22, 
            "_subprogram": "function", 
            "args": [], 
            "attrs": {
                "pure": true
            }, 
            "decl": "const string& getString1()  +pure", 
            "doxygen": {
                "brief": "return a 'const string&' as character(*)"
            }, 
            "fmt": {
                "F_C_call": "c_get_string1", 
                "F_arg_c_call": "", 
                "F_arg_c_call_tab": "\t", 
                "F_arguments": "", 
                "F_call_code": "SH_rv = fstr(c_get_string1(\t))", 
                "F_name_function": "get_string1", 
                "F_name_generic": "get_string1", 
                "F_name_impl": "get_string1", 
                "F_result_clause": " result(SH_rv)", 
                "F_subprogram": "function", 
                "c_var_len": "strlen_ptr(c_get_string1(\t))"
            }, 
            "options": {
                "wrap_c": false, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": true, 
                    "reference": true
                }, 
                "name": "getString1", 
                "type": "string_result_fstr"
            }
        }, 
        {
            "C_error_pattern": "C_invalid_name", 
            "_PTR_F_C_index": 23, 
            "_decl": "const string & getString2()", 
            "_function_index": 7, 
            "_subprogram": "function", 
            "args": [], 
            "attrs": {}, 
            "decl": "const string& getString2+len=30()", 
            "doxygen": {
                "brief": "return 'const string&' with fixed size (len=30)"
            }, 
            "fmt": {
                "C_call_code": "const std::string & SH_rv = getString2();", 
                "C_call_list": "", 
                "C_name": "STR_get_string2", 
                "C_post_call_pattern": "// C_error_pattern\nif (SH_rv.empty()) {\n    return NULL;\n}\n", 
                "C_prototype": "", 
                "C_return_code": "return XSH_rv;", 
                "C_return_type": "const char *", 
                "F_C_call": "c_get_string2_bufferify", 
                "F_C_name": "c_get_string2", 
                "F_arg_c_call": "SH_rv, len(SH_rv, kind=C_INT)", 
                "F_arg_c_call_tab": "\tSH_rv\tlen(SH_rv, kind=C_INT)", 
                "F_arguments": "", 
                "F_call_code": "call c_get_string2_bufferify(\tSH_rv\tlen(SH_rv, kind=C_INT))", 
                "F_name_function": "get_string2", 
                "F_name_generic": "get_string2", 
                "F_name_impl": "get_string2", 
                "F_result_clause": " result(SH_rv)", 
                "F_subprogram": "function", 
                "PY_name_impl": "PY_get_string2", 
                "c_const": "const ", 
                "c_var_len": "30", 
                "function_name": "getString2", 
                "underscore_name": "get_string2"
            }, 
            "options": {}, 
            "result": {
                "attrs": {
                    "const": true, 
                    "len": 30, 
                    "reference": true
                }, 
                "fmtc": {
                    "c_rv_decl": "const char * XSH_rv", 
                    "c_val": "SH_rv.c_str()", 
                    "c_var": "XSH_rv", 
                    "cpp_rv_decl": "const std::string & SH_rv", 
                    "cpp_var": "SH_rv"
                }, 
                "name": "getString2", 
                "type": "string"
            }
        }, 
        {
            "C_error_pattern": "C_invalid_name", 
            "_PTR_C_CPP_index": 7, 
            "_decl": "void getString2(string & SH_F_rv+intent(out)+len(NSH_F_rv))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 23, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "_is_result": true, 
                        "const": false, 
                        "intent": "out", 
                        "len": "NSH_F_rv", 
                        "reference": true
                    }, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "SH_F_rv", 
                        "c_var_len": "NSH_F_rv", 
                        "c_var_trim": "SH_LSH_F_rv", 
                        "cpp_type": "std::string", 
                        "cpp_val": "SH_rv.c_str()", 
                        "cpp_var": "SH_rv"
                    }, 
                    "fmtf": {
                        "c_var": "SH_rv", 
                        "f_var": "SH_rv"
                    }, 
                    "name": "SH_F_rv", 
                    "type": "string"
                }
            ], 
            "attrs": {}, 
            "decl": "const string& getString2+len=30()", 
            "doxygen": {
                "brief": "return 'const string&' with fixed size (len=30)"
            }, 
            "fmt": {
                "C_call_code": "const std::string & SH_rv = getString2();", 
                "C_call_list": "", 
                "C_name": "STR_get_string2_bufferify", 
                "C_post_call": "if (SH_rv.empty()) {\n  std::memset(SH_F_rv, ' ', NSH_F_rv);\n} else {\n  shroud_FccCopy(SH_F_rv, NSH_F_rv, SH_rv.c_str());\n}", 
                "C_prototype": "char * SH_F_rv, int NSH_F_rv", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_get_string2_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": false, 
                    "len": 30, 
                    "ptr": false, 
                    "reference": false
                }, 
                "fmtc": {
                    "cpp_rv_decl": "const std::string & SH_rv", 
                    "cpp_var": "SH_rv"
                }, 
                "name": "getString2", 
                "type": "void"
            }
        }, 
        {
            "C_error_pattern": "C_invalid_name", 
            "_decl": "const string & getString3()", 
            "_function_index": 8, 
            "_subprogram": "function", 
            "args": [], 
            "attrs": {}, 
            "decl": "const string& getString3()", 
            "doxygen": {
                "brief": "return a 'const string&' as argument"
            }, 
            "fmt": {
                "C_call_code": "const std::string & SH_rv = getString3();", 
                "C_call_list": "", 
                "C_name": "STR_get_string3", 
                "C_post_call_pattern": "// C_error_pattern\nif (SH_rv.empty()) {\n    return NULL;\n}\n", 
                "C_prototype": "", 
                "C_return_code": "return XSH_rv;", 
                "C_return_type": "const char *", 
                "F_C_name": "c_get_string3", 
                "F_string_result_as_arg": "output", 
                "PY_name_impl": "PY_get_string3", 
                "c_const": "const ", 
                "function_name": "getString3", 
                "underscore_name": "get_string3"
            }, 
            "options": {
                "F_string_result_as_arg": "output", 
                "wrap_fortran": false
            }, 
            "result": {
                "attrs": {
                    "const": true, 
                    "reference": true
                }, 
                "fmtc": {
                    "c_rv_decl": "const char * XSH_rv", 
                    "c_val": "SH_rv.c_str()", 
                    "c_var": "XSH_rv", 
                    "cpp_rv_decl": "const std::string & SH_rv", 
                    "cpp_var": "SH_rv"
                }, 
                "name": "getString3", 
                "type": "string"
            }
        }, 
        {
            "C_error_pattern": "C_invalid_name", 
            "_PTR_C_CPP_index": 8, 
            "_decl": "void getString3(string & output+intent(out)+len(Noutput))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 24, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "_is_result": true, 
                        "const": false, 
                        "intent": "out", 
                        "len": "Noutput", 
                        "reference": true
                    }, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "output", 
                        "c_var_len": "Noutput", 
                        "c_var_trim": "SH_Loutput", 
                        "cpp_type": "std::string", 
                        "cpp_val": "SH_rv.c_str()", 
                        "cpp_var": "SH_rv"
                    }, 
                    "fmtf": {
                        "c_var": "output", 
                        "f_var": "output"
                    }, 
                    "name": "output", 
                    "type": "string"
                }
            ], 
            "attrs": {}, 
            "decl": "const string& getString3()", 
            "doxygen": {
                "brief": "return a 'const string&' as argument"
            }, 
            "fmt": {
                "C_call_code": "const std::string & SH_rv = getString3();", 
                "C_call_list": "", 
                "C_name": "STR_get_string3_bufferify", 
                "C_post_call": "if (SH_rv.empty()) {\n  std::memset(output, ' ', Noutput);\n} else {\n  shroud_FccCopy(output, Noutput, SH_rv.c_str());\n}", 
                "C_prototype": "char * output, int Noutput", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_get_string3_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": false, 
                    "ptr": false, 
                    "reference": false
                }, 
                "fmtc": {
                    "cpp_rv_decl": "const std::string & SH_rv", 
                    "cpp_var": "SH_rv"
                }, 
                "name": "getString3", 
                "type": "void"
            }
        }, 
        {
            "C_error_pattern": "C_invalid_name", 
            "_PTR_C_CPP_index": 8, 
            "_PTR_F_C_index": 24, 
            "_decl": "void getString3(string & output+intent(out)+len(Noutput))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 25, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "_is_result": true, 
                        "const": false, 
                        "intent": "out", 
                        "len": "Noutput", 
                        "reference": true
                    }, 
                    "name": "output", 
                    "type": "string"
                }
            ], 
            "attrs": {}, 
            "decl": "const string& getString3()", 
            "doxygen": {
                "brief": "return a 'const string&' as argument"
            }, 
            "fmt": {
                "F_C_call": "c_get_string3_bufferify", 
                "F_arg_c_call": "output, len(output, kind=C_INT)", 
                "F_arg_c_call_tab": "\toutput\tlen(output, kind=C_INT)", 
                "F_arguments": "output", 
                "F_call_code": "call c_get_string3_bufferify(\toutput\tlen(output, kind=C_INT))", 
                "F_name_function": "get_string3", 
                "F_name_generic": "get_string3", 
                "F_name_impl": "get_string3", 
                "F_subprogram": "subroutine", 
                "function_suffix": ""
            }, 
            "options": {
                "wrap_c": false, 
                "wrap_fortran": true, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": false, 
                    "ptr": false, 
                    "reference": false
                }, 
                "name": "getString3", 
                "type": "void"
            }
        }, 
        {
            "C_error_pattern": "C_invalid_name", 
            "_PTR_F_C_index": 26, 
            "_decl": "const string & getString2_empty()", 
            "_function_index": 9, 
            "_subprogram": "function", 
            "args": [], 
            "attrs": {}, 
            "decl": "const string& getString2_empty+len=30()", 
            "doxygen": {
                "brief": "Test returning empty string reference"
            }, 
            "fmt": {
                "C_call_code": "const std::string & SH_rv = getString2_empty();", 
                "C_call_list": "", 
                "C_name": "STR_get_string2_empty", 
                "C_post_call_pattern": "// C_error_pattern\nif (SH_rv.empty()) {\n    return NULL;\n}\n", 
                "C_prototype": "", 
                "C_return_code": "return XSH_rv;", 
                "C_return_type": "const char *", 
                "F_C_call": "c_get_string2_empty_bufferify", 
                "F_C_name": "c_get_string2_empty", 
                "F_arg_c_call": "SH_rv, len(SH_rv, kind=C_INT)", 
                "F_arg_c_call_tab": "\tSH_rv\tlen(SH_rv, kind=C_INT)", 
                "F_arguments": "", 
                "F_call_code": "call c_get_string2_empty_bufferify(\tSH_rv\tlen(SH_rv, kind=C_INT))", 
                "F_name_function": "get_string2_empty", 
                "F_name_generic": "get_string2_empty", 
                "F_name_impl": "get_string2_empty", 
                "F_result_clause": " result(SH_rv)", 
                "F_subprogram": "function", 
                "PY_name_impl": "PY_get_string2_empty", 
                "c_const": "const ", 
                "c_var_len": "30", 
                "function_name": "getString2_empty", 
                "underscore_name": "get_string2_empty"
            }, 
            "options": {}, 
            "result": {
                "attrs": {
                    "const": true, 
                    "len": 30, 
                    "reference": true
                }, 
                "fmtc": {
                    "c_rv_decl": "const char * XSH_rv", 
                    "c_val": "SH_rv.c_str()", 
                    "c_var": "XSH_rv", 
                    "cpp_rv_decl": "const std::string & SH_rv", 
                    "cpp_var": "SH_rv"
                }, 
                "name": "getString2_empty", 
                "type": "string"
            }
        }, 
        {
            "C_error_pattern": "C_invalid_name", 
            "_PTR_C_CPP_index": 9, 
            "_decl": "void getString2_empty(string & SH_F_rv+intent(out)+len(NSH_F_rv))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 26, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "_is_result": true, 
                        "const": false, 
                        "intent": "out", 
                        "len": "NSH_F_rv", 
                        "reference": true
                    }, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "SH_F_rv", 
                        "c_var_len": "NSH_F_rv", 
                        "c_var_trim": "SH_LSH_F_rv", 
                        "cpp_type": "std::string", 
                        "cpp_val": "SH_rv.c_str()", 
                        "cpp_var": "SH_rv"
                    }, 
                    "fmtf": {
                        "c_var": "SH_rv", 
                        "f_var": "SH_rv"
                    }, 
                    "name": "SH_F_rv", 
                    "type": "string"
                }
            ], 
            "attrs": {}, 
            "decl": "const string& getString2_empty+len=30()", 
            "doxygen": {
                "brief": "Test returning empty string reference"
            }, 
            "fmt": {
                "C_call_code": "const std::string & SH_rv = getString2_empty();", 
                "C_call_list": "", 
                "C_name": "STR_get_string2_empty_bufferify", 
                "C_post_call": "if (SH_rv.empty()) {\n  std::memset(SH_F_rv, ' ', NSH_F_rv);\n} else {\n  shroud_FccCopy(SH_F_rv, NSH_F_rv, SH_rv.c_str());\n}", 
                "C_prototype": "char * SH_F_rv, int NSH_F_rv", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_get_string2_empty_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": false, 
                    "len": 30, 
                    "ptr": false, 
                    "reference": false
                }, 
                "fmtc": {
                    "cpp_rv_decl": "const std::string & SH_rv", 
                    "cpp_var": "SH_rv"
                }, 
                "name": "getString2_empty", 
                "type": "void"
            }
        }, 
        {
            "_PTR_F_C_index": 27, 
            "_decl": "void acceptStringConstReference(const std::string & arg1+intent(in))", 
            "_function_index": 10, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "const": true, 
                        "intent": "in", 
                        "reference": true, 
                        "value": false
                    }, 
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "arg1", 
                        "c_var_len": "SH_Narg1", 
                        "c_var_trim": "SH_Larg1", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_arg1"
                    }, 
                    "fmtpy": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "arg1", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_arg1", 
                        "py_var": "SH_Py_arg1"
                    }, 
                    "name": "arg1", 
                    "type": "std::string"
                }
            ], 
            "attrs": {}, 
            "decl": "void acceptStringConstReference(const std::string & arg1)", 
            "doxygen": {
                "brief": "Accept a const string reference", 
                "description": "Save contents of arg1.\narg1 is assumed to be intent(IN) since it is const\nWill copy in.\n"
            }, 
            "fmt": {
                "C_call_code": "acceptStringConstReference(SH_arg1);", 
                "C_call_list": "SH_arg1", 
                "C_name": "STR_accept_string_const_reference", 
                "C_pre_call": "const std::string SH_arg1(arg1);", 
                "C_prototype": "const char * arg1", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_accept_string_const_reference_bufferify", 
                "F_C_name": "c_accept_string_const_reference", 
                "F_arg_c_call": "arg1, len_trim(arg1, kind=C_INT)", 
                "F_arg_c_call_tab": "\targ1\tlen_trim(arg1, kind=C_INT)", 
                "F_arguments": "arg1", 
                "F_call_code": "call c_accept_string_const_reference_bufferify(\targ1\tlen_trim(arg1, kind=C_INT))", 
                "F_name_function": "accept_string_const_reference", 
                "F_name_generic": "accept_string_const_reference", 
                "F_name_impl": "accept_string_const_reference", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PY_accept_string_const_reference", 
                "c_const": "", 
                "function_name": "acceptStringConstReference", 
                "underscore_name": "accept_string_const_reference"
            }, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "name": "acceptStringConstReference", 
                "type": "void"
            }
        }, 
        {
            "_PTR_C_CPP_index": 10, 
            "_decl": "void acceptStringConstReference(const std::string & arg1+intent(in)+len_trim(Larg1))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 27, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "const": true, 
                        "intent": "in", 
                        "len_trim": "Larg1", 
                        "reference": true, 
                        "value": false
                    }, 
                    "fmtc": {
                        "c_const": "const ", 
                        "c_ptr": "", 
                        "c_var": "arg1", 
                        "c_var_len": "SH_Narg1", 
                        "c_var_trim": "Larg1", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_arg1"
                    }, 
                    "fmtf": {
                        "c_var": "arg1", 
                        "f_var": "arg1"
                    }, 
                    "name": "arg1", 
                    "type": "std::string"
                }
            ], 
            "attrs": {}, 
            "decl": "void acceptStringConstReference(const std::string & arg1)", 
            "doxygen": {
                "brief": "Accept a const string reference", 
                "description": "Save contents of arg1.\narg1 is assumed to be intent(IN) since it is const\nWill copy in.\n"
            }, 
            "fmt": {
                "C_call_code": "acceptStringConstReference(SH_arg1);", 
                "C_call_list": "SH_arg1", 
                "C_name": "STR_accept_string_const_reference_bufferify", 
                "C_pre_call": "const std::string SH_arg1(arg1, Larg1);", 
                "C_prototype": "const char * arg1, int Larg1", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_accept_string_const_reference_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {}, 
                "name": "acceptStringConstReference", 
                "type": "void"
            }
        }, 
        {
            "_PTR_F_C_index": 28, 
            "_decl": "void acceptStringReference(std::string & arg1+intent(inout))", 
            "_function_index": 11, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "inout", 
                        "reference": true, 
                        "value": false
                    }, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg1", 
                        "c_var_len": "SH_Narg1", 
                        "c_var_trim": "SH_Larg1", 
                        "cpp_type": "std::string", 
                        "cpp_val": "SH_arg1.c_str()", 
                        "cpp_var": "SH_arg1"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "SH_arg1.c_str()", 
                        "cpp_type": "std::string", 
                        "cpp_var": "SH_arg1", 
                        "py_var": "SH_Py_arg1"
                    }, 
                    "name": "arg1", 
                    "type": "std::string"
                }
            ], 
            "attrs": {}, 
            "decl": "void acceptStringReference(std::string & arg1)", 
            "doxygen": {
                "brief": "Accept a string reference", 
                "description": "Append \"dog\" to the end of arg1.\narg1 is assumed to be intent(INOUT)\nMust copy in and copy out.\n"
            }, 
            "fmt": {
                "C_call_code": "acceptStringReference(SH_arg1);", 
                "C_call_list": "SH_arg1", 
                "C_name": "STR_accept_string_reference", 
                "C_post_call": "strcpy(arg1, SH_arg1.c_str());", 
                "C_pre_call": "std::string SH_arg1(arg1);", 
                "C_prototype": "char * arg1", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_accept_string_reference_bufferify", 
                "F_C_name": "c_accept_string_reference", 
                "F_arg_c_call": "arg1, len_trim(arg1, kind=C_INT), len(arg1, kind=C_INT)", 
                "F_arg_c_call_tab": "\targ1\tlen_trim(arg1, kind=C_INT)\tlen(arg1, kind=C_INT)", 
                "F_arguments": "arg1", 
                "F_call_code": "call c_accept_string_reference_bufferify(\targ1\tlen_trim(arg1, kind=C_INT)\tlen(arg1, kind=C_INT))", 
                "F_name_function": "accept_string_reference", 
                "F_name_generic": "accept_string_reference", 
                "F_name_impl": "accept_string_reference", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PY_accept_string_reference", 
                "c_const": "", 
                "function_name": "acceptStringReference", 
                "underscore_name": "accept_string_reference"
            }, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "name": "acceptStringReference", 
                "type": "void"
            }
        }, 
        {
            "_PTR_C_CPP_index": 11, 
            "_decl": "void acceptStringReference(std::string & arg1+intent(inout)+len(Narg1)+len_trim(Larg1))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 28, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "inout", 
                        "len": "Narg1", 
                        "len_trim": "Larg1", 
                        "reference": true, 
                        "value": false
                    }, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": "", 
                        "c_var": "arg1", 
                        "c_var_len": "Narg1", 
                        "c_var_trim": "Larg1", 
                        "cpp_type": "std::string", 
                        "cpp_val": "SH_arg1.c_str()", 
                        "cpp_var": "SH_arg1"
                    }, 
                    "fmtf": {
                        "c_var": "arg1", 
                        "f_var": "arg1"
                    }, 
                    "name": "arg1", 
                    "type": "std::string"
                }
            ], 
            "attrs": {}, 
            "decl": "void acceptStringReference(std::string & arg1)", 
            "doxygen": {
                "brief": "Accept a string reference", 
                "description": "Append \"dog\" to the end of arg1.\narg1 is assumed to be intent(INOUT)\nMust copy in and copy out.\n"
            }, 
            "fmt": {
                "C_call_code": "acceptStringReference(SH_arg1);", 
                "C_call_list": "SH_arg1", 
                "C_name": "STR_accept_string_reference_bufferify", 
                "C_post_call": "shroud_FccCopy(arg1, Narg1, SH_arg1.c_str());", 
                "C_pre_call": "std::string SH_arg1(arg1, Larg1);", 
                "C_prototype": "char * arg1, int Larg1, int Narg1", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_accept_string_reference_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {}, 
                "name": "acceptStringReference", 
                "type": "void"
            }
        }, 
        {
            "_PTR_F_C_index": 29, 
            "_decl": "void explicit1(char * name+intent(in)+len_trim(AAlen))", 
            "_function_index": 12, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "in", 
                        "len_trim": "AAlen", 
                        "ptr": true, 
                        "value": false
                    }, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "name", 
                        "c_var_len": "SH_Nname", 
                        "c_var_trim": "AAlen", 
                        "cpp_type": "char", 
                        "cpp_var": "name"
                    }, 
                    "fmtpy": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "name", 
                        "cpp_type": "char", 
                        "cpp_var": "name", 
                        "py_var": "SH_Py_name"
                    }, 
                    "name": "name", 
                    "type": "char"
                }
            ], 
            "attrs": {}, 
            "decl": "void explicit1(char * name+len_trim(AAlen)+intent(in))", 
            "fmt": {
                "C_call_code": "explicit1(name);", 
                "C_call_list": "name", 
                "C_name": "STR_explicit1", 
                "C_prototype": "char * name", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_explicit1_buffer", 
                "F_C_name": "c_explicit1", 
                "F_arg_c_call": "name, len_trim(name, kind=C_INT)", 
                "F_arg_c_call_tab": "\tname\tlen_trim(name, kind=C_INT)", 
                "F_arguments": "name", 
                "F_call_code": "call c_explicit1_buffer(\tname\tlen_trim(name, kind=C_INT))", 
                "F_name_function": "explicit1", 
                "F_name_generic": "explicit1", 
                "F_name_impl": "explicit1", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PY_explicit1", 
                "c_const": "", 
                "function_name": "explicit1", 
                "underscore_name": "explicit1"
            }, 
            "options": {
                "C_bufferify_suffix": "_BUFFER"
            }, 
            "result": {
                "attrs": {}, 
                "name": "explicit1", 
                "type": "void"
            }
        }, 
        {
            "_PTR_C_CPP_index": 12, 
            "_decl": "void explicit1(char * name+intent(in)+len_trim(AAlen))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 29, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "in", 
                        "len_trim": "AAlen", 
                        "ptr": true, 
                        "value": false
                    }, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "name", 
                        "c_var_len": "SH_Nname", 
                        "c_var_trim": "AAlen", 
                        "cpp_type": "char", 
                        "cpp_val": "SH_name", 
                        "cpp_var": "SH_name"
                    }, 
                    "fmtf": {
                        "c_var": "name", 
                        "f_var": "name"
                    }, 
                    "name": "name", 
                    "type": "char"
                }
            ], 
            "attrs": {}, 
            "decl": "void explicit1(char * name+len_trim(AAlen)+intent(in))", 
            "fmt": {
                "C_call_code": "explicit1(SH_name);", 
                "C_call_list": "SH_name", 
                "C_name": "STR_explicit1_BUFFER", 
                "C_post_call": "delete [] SH_name;", 
                "C_pre_call": "char * SH_name = new char [AAlen + 1];\nstd::strncpy(SH_name, name, AAlen);\nSH_name[AAlen] = '\\0';", 
                "C_prototype": "char * name, int AAlen", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_explicit1_buffer", 
                "c_const": "", 
                "function_suffix": "_BUFFER"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {}, 
                "name": "explicit1", 
                "type": "void"
            }
        }, 
        {
            "_PTR_F_C_index": 30, 
            "_decl": "void explicit2(char * name+intent(out)+len(AAtrim))", 
            "_function_index": 13, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "out", 
                        "len": "AAtrim", 
                        "ptr": true, 
                        "value": false
                    }, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "name", 
                        "c_var_len": "AAtrim", 
                        "c_var_trim": "SH_Lname", 
                        "cpp_type": "char", 
                        "cpp_var": "name"
                    }, 
                    "fmtpy": {
                        "PyObject": "PyObject", 
                        "PyTypeObject": null, 
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "name", 
                        "cpp_type": "char", 
                        "cpp_var": "name", 
                        "py_var": "SH_Py_name"
                    }, 
                    "name": "name", 
                    "type": "char"
                }
            ], 
            "attrs": {}, 
            "decl": "void explicit2(char * name+len(AAtrim)+intent(out))", 
            "fmt": {
                "C_call_code": "explicit2(name);", 
                "C_call_list": "name", 
                "C_name": "STR_explicit2", 
                "C_prototype": "char * name", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_call": "c_explicit2_bufferify", 
                "F_C_name": "c_explicit2", 
                "F_arg_c_call": "name, len(name, kind=C_INT)", 
                "F_arg_c_call_tab": "\tname\tlen(name, kind=C_INT)", 
                "F_arguments": "name", 
                "F_call_code": "call c_explicit2_bufferify(\tname\tlen(name, kind=C_INT))", 
                "F_name_function": "explicit2", 
                "F_name_generic": "explicit2", 
                "F_name_impl": "explicit2", 
                "F_subprogram": "subroutine", 
                "PY_name_impl": "PY_explicit2", 
                "c_const": "", 
                "function_name": "explicit2", 
                "underscore_name": "explicit2"
            }, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "name": "explicit2", 
                "type": "void"
            }
        }, 
        {
            "_PTR_C_CPP_index": 13, 
            "_decl": "void explicit2(char * name+intent(out)+len(AAtrim))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 30, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "out", 
                        "len": "AAtrim", 
                        "ptr": true, 
                        "value": false
                    }, 
                    "fmtc": {
                        "c_const": "", 
                        "c_ptr": " *", 
                        "c_var": "name", 
                        "c_var_len": "AAtrim", 
                        "c_var_trim": "SH_Lname", 
                        "cpp_type": "char", 
                        "cpp_val": "SH_name", 
                        "cpp_var": "SH_name"
                    }, 
                    "fmtf": {
                        "c_var": "name", 
                        "f_var": "name"
                    }, 
                    "name": "name", 
                    "type": "char"
                }
            ], 
            "attrs": {}, 
            "decl": "void explicit2(char * name+len(AAtrim)+intent(out))", 
            "fmt": {
                "C_call_code": "explicit2(SH_name);", 
                "C_call_list": "SH_name", 
                "C_name": "STR_explicit2_bufferify", 
                "C_post_call": "shroud_FccCopy(name, AAtrim, SH_name);\ndelete [] SH_name;", 
                "C_pre_call": "char * SH_name = new char [AAtrim + 1];", 
                "C_prototype": "char * name, int AAtrim", 
                "C_return_code": "return;", 
                "C_return_type": "void", 
                "F_C_name": "c_explicit2_bufferify", 
                "c_const": "", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_lua": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {}, 
                "name": "explicit2", 
                "type": "void"
            }
        }
    ], 
    "library": "strings", 
    "namespace": "", 
    "options": {
        "C_bufferify_suffix": "_bufferify", 
        "C_header_filename_class_template": "wrap{cpp_class}.h", 
        "C_header_filename_library_template": "wrap{library}.h", 
        "C_impl_filename_class_template": "wrap{cpp_class}.cpp", 
        "C_impl_filename_library_template": "wrap{library}.cpp", 
        "C_name_template": "{C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
        "C_var_len_template": "N{c_var}", 
        "C_var_trim_template": "L{c_var}", 
        "F_C_name_template": "{F_C_prefix}{class_prefix}{underscore_name}{function_suffix}", 
        "F_C_prefix": "c_", 
        "F_force_wrapper": false, 
        "F_impl_filename_class_template": "wrapf{cpp_class}.f", 
        "F_impl_filename_library_template": "wrapf{library_lower}.f", 
        "F_module_name_class_template": "{class_lower}_mod", 
        "F_module_name_library_template": "{library_lower}_mod", 
        "F_module_per_class": true, 
        "F_name_associated": "associated", 
        "F_name_function_template": "{underscore_name}{function_suffix}", 
        "F_name_generic_template": "{underscore_name}", 
        "F_name_impl_template": "{class_prefix}{underscore_name}{function_suffix}", 
        "F_name_instance_get": "get_instance", 
        "F_name_instance_set": "set_instance", 
        "F_string_len_trim": true, 
        "LUA_class_reg_template": "{LUA_prefix}{cpp_class}_Reg", 
        "LUA_ctor_name_template": "{cpp_class}", 
        "LUA_header_filename_template": "lua{library}module.hpp", 
        "LUA_metadata_template": "{cpp_class}.metatable", 
        "LUA_module_filename_template": "lua{library}module.cpp", 
        "LUA_module_name_template": "{library_lower}", 
        "LUA_module_reg_template": "{LUA_prefix}{library}_Reg", 
        "LUA_name_impl_template": "{LUA_prefix}{class_prefix}{underscore_name}", 
        "LUA_name_template": "{function_name}", 
        "LUA_userdata_member_template": "self", 
        "LUA_userdata_type_template": "{LUA_prefix}{cpp_class}_Type", 
        "PY_PyObject_template": "{PY_prefix}{cpp_class}", 
        "PY_PyTypeObject_template": "{PY_prefix}{cpp_class}_Type", 
        "PY_header_filename_template": "py{library}module.hpp", 
        "PY_helper_filename_template": "py{library}helper.cpp", 
        "PY_module_filename_template": "py{library}module.cpp", 
        "PY_name_impl_template": "{PY_prefix}{class_prefix}{underscore_name}{function_suffix}", 
        "PY_type_filename_template": "py{cpp_class}type.cpp", 
        "YAML_type_filename_template": "{library_lower}_types.yaml", 
        "class_prefix_template": "{class_lower}_", 
        "debug": true, 
        "doxygen": true, 
        "show_splicer_comments": true, 
        "wrap_c": true, 
        "wrap_fortran": true, 
        "wrap_lua": false, 
        "wrap_python": true
    }, 
    "patterns": {
        "C_invalid_name": "if ({cpp_var}.empty()) {{\n    return NULL;\n}}\n"
    }, 
    "types": {
        "MPI_Comm": {
            "c_header": "mpi.h", 
            "c_to_cpp": "MPI_Comm_f2c({c_var})", 
            "c_type": "MPI_Fint", 
            "cpp_to_c": "MPI_Comm_c2f({cpp_var})", 
            "cpp_type": "MPI_Comm", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_c_type": "integer(C_INT)", 
            "f_type": "integer"
        }, 
        "bool": {
            "LUA_pop": "lua_toboolean({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushboolean({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TBOOLEAN", 
            "PY_PyTypeObject": "PyBool_Type", 
            "PY_ctor": "PyBool_FromLong({c_var})", 
            "c_type": "bool", 
            "cpp_type": "bool", 
            "f_c_type": "logical(C_BOOL)", 
            "f_module": {
                "iso_c_binding": [
                    "C_BOOL"
                ]
            }, 
            "f_statements": {
                "intent_in": {
                    "c_local_var": true, 
                    "pre_call": [
                        "{c_var} = {f_var}  ! coerce to C_BOOL"
                    ]
                }, 
                "intent_out": {
                    "c_local_var": true, 
                    "post_call": [
                        "{f_var} = {c_var}  ! coerce to logical"
                    ]
                }, 
                "result": {
                    "need_wrapper": true
                }
            }, 
            "f_type": "logical", 
            "py_statements": {
                "intent_in": {
                    "post_parse": [
                        "{cpp_var} = PyObject_IsTrue({py_var});"
                    ]
                }
            }
        }, 
        "char": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in_buf": {
                    "cpp_header": "<cstring>", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "delete [] {cpp_var};"
                    ], 
                    "pre_call": [
                        "char * {cpp_var} = new char [{c_var_trim} + 1];", 
                        "std::strncpy({cpp_var}, {c_var}, {c_var_trim});", 
                        "{cpp_var}[{c_var_trim}] = '\\0';"
                    ]
                }, 
                "intent_out_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "cpp_local_var": true, 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "delete [] {cpp_var};"
                    ], 
                    "pre_call": [
                        "char * {cpp_var} = new char [{c_var_len} + 1];"
                    ]
                }, 
                "result_buf": {
                    "cpp_header": "<cstring> shroudrt.hpp", 
                    "post_call": [
                        "if ({cpp_var} == NULL) {{", 
                        "  std::memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "  shroud_FccCopy({c_var}, {c_var_len}, {cpp_var});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_type": "character(*)"
        }, 
        "char_scalar": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "c_statements": {
                "result_buf": {
                    "cpp_header": "<cstring>", 
                    "post_call": [
                        "std::memset({c_var}, ' ', {c_var_len});", 
                        "{c_var}[0] = {cpp_var};"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_type": "char", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_type": "character"
        }, 
        "double": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "d", 
            "c_type": "double", 
            "cpp_type": "double", 
            "f_cast": "real({f_var}, C_DOUBLE)", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "float": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "f", 
            "c_type": "float", 
            "cpp_type": "float", 
            "f_cast": "real({f_var}, C_FLOAT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "int": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "i", 
            "c_type": "int", 
            "cpp_type": "int", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "integer(C_INT)": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "i", 
            "c_type": "int", 
            "cpp_type": "int", 
            "f_cast": "int({f_var}, C_INT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "integer(C_LONG)": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "l", 
            "c_type": "long", 
            "cpp_type": "long", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "long": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "l", 
            "c_type": "long", 
            "cpp_type": "long", 
            "f_cast": "int({f_var}, C_LONG)", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "real(C_DOUBLE)": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "d", 
            "c_type": "double", 
            "cpp_type": "double", 
            "f_cast": "real({f_var}, C_DOUBLE)", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "real(C_FLOAT)": {
            "LUA_pop": "lua_tonumber({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushnumber({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_format": "f", 
            "c_type": "float", 
            "cpp_type": "float", 
            "f_cast": "real({f_var}, C_FLOAT)", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "size_t": {
            "LUA_pop": "lua_tointeger({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushinteger({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TNUMBER", 
            "PY_ctor": "PyInt_FromLong({c_var})", 
            "c_header": "stdlib.h", 
            "c_type": "size_t", 
            "cpp_type": "size_t", 
            "f_cast": "int({f_var}, C_SIZE_T)", 
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            }, 
            "f_type": "integer(C_SIZE_T)"
        }, 
        "std::string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cpp_header": "<cstring>", 
                    "post_call": [
                        "strcpy({c_var}, {cpp_val});"
                    ]
                }, 
                "intent_out_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ]
                }, 
                "result_buf": {
                    "cpp_header": "<cstring> shroudrt.hpp", 
                    "post_call": [
                        "if ({cpp_var}.empty()) {{", 
                        "  std::memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "  shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_header": "<string>", 
            "cpp_to_c": "{cpp_var}.c_str()", 
            "cpp_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "post_parse": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }
            }
        }, 
        "string": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cpp_header": "<cstring>", 
                    "post_call": [
                        "strcpy({c_var}, {cpp_val});"
                    ]
                }, 
                "intent_out_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ]
                }, 
                "result_buf": {
                    "cpp_header": "<cstring> shroudrt.hpp", 
                    "post_call": [
                        "if ({cpp_var}.empty()) {{", 
                        "  std::memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "  shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_header": "<string>", 
            "cpp_to_c": "{cpp_var}.c_str()", 
            "cpp_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "post_parse": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }
            }
        }, 
        "string_result_fstr": {
            "LUA_pop": "lua_tostring({LUA_state_var}, {LUA_index})", 
            "LUA_push": "lua_pushstring({LUA_state_var}, {c_var})", 
            "LUA_type": "LUA_TSTRING", 
            "PY_ctor": "PyString_FromString({c_var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }, 
                "intent_in_buf": {
                    "cpp_local_var": true, 
                    "pre_call": [
                        "{c_const}std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "cpp_header": "<cstring>", 
                    "post_call": [
                        "strcpy({c_var}, {cpp_val});"
                    ]
                }, 
                "intent_out_buf": {
                    "cpp_header": "shroudrt.hpp", 
                    "post_call": [
                        "shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ]
                }, 
                "result_buf": {
                    "cpp_header": "<cstring> shroudrt.hpp", 
                    "post_call": [
                        "if ({cpp_var}.empty()) {{", 
                        "  std::memset({c_var}, ' ', {c_var_len});", 
                        "}} else {{", 
                        "  shroud_FccCopy({c_var}, {c_var_len}, {cpp_val});", 
                        "}}"
                    ]
                }
            }, 
            "c_type": "char", 
            "cpp_header": "<string>", 
            "cpp_to_c": "{cpp_var}.c_str()", 
            "cpp_type": "std::string", 
            "f_c_module": {
                "iso_c_binding": [
                    "C_CHAR"
                ]
            }, 
            "f_c_type": "character(kind=C_CHAR)", 
            "f_helper": {
                "f_return_code": {
                    "fstr": true
                }
            }, 
            "f_return_code": "{F_result} = fstr({F_C_call}({F_arg_c_call_tab}))", 
            "f_type": "character(*)", 
            "py_statements": {
                "intent_in": {
                    "cpp_local_var": true, 
                    "post_parse": [
                        "{c_const}std::string {cpp_var}({c_var});"
                    ]
                }
            }
        }, 
        "void": {
            "PY_ctor": "PyCapsule_New({cpp_var}, NULL, NULL)", 
            "c_type": "void", 
            "cpp_type": "void", 
            "f_module": {
                "iso_c_binding": [
                    "C_PTR"
                ]
            }, 
            "f_type": "type(C_PTR)"
        }
    }
}