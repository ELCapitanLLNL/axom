{
    "F_module_dependencies": [], 
    "classes": [], 
    "fmt": {
        "C_const": "", 
        "C_header_filename": "wrapstrings.h", 
        "C_impl_filename": "wrapstrings.cpp", 
        "C_prefix": "STR_", 
        "C_this": "self", 
        "F_C_pure_clause": "", 
        "F_C_result_clause": "", 
        "F_derived_member": "voidptr", 
        "F_impl_filename": "wrapfstrings.f", 
        "F_module_name": "strings_mod", 
        "F_pure_clause": "", 
        "F_result": "rv", 
        "F_result_clause": "", 
        "F_this": "obj", 
        "function_suffix": "", 
        "library": "strings", 
        "lower_library": "strings", 
        "overloaded": false, 
        "rv": "rv", 
        "upper_library": "STRINGS"
    }, 
    "functions": [
        {
            "_decl": "const char * getChar1()+pure", 
            "_function_index": 0, 
            "_subprogram": "function", 
            "args": [], 
            "attrs": {
                "pure": true
            }, 
            "decl": "const char * getChar1()  +pure", 
            "doxygen": {
                "brief": "return a 'const char *' as character(*)"
            }, 
            "fmt": {
                "C_name": "STR_get_char1", 
                "F_C_name": "str_get_char1", 
                "method_name": "getChar1", 
                "underscore_name": "get_char1"
            }, 
            "options": {
                "wrap_fortran": false
            }, 
            "result": {
                "attrs": {
                    "const": true, 
                    "ptr": true
                }, 
                "name": "getChar1", 
                "type": "char"
            }
        }, 
        {
            "_PTR_C_CPP_index": 0, 
            "_decl": "void getChar1(char_result_as_arg * SH_F_rv+intent(out)+len(LSH_F_rv))+pure", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 8, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "_is_result": true, 
                        "const": false, 
                        "intent": "out", 
                        "len": "LSH_F_rv", 
                        "ptr": true
                    }, 
                    "name": "SH_F_rv", 
                    "type": "char_result_as_arg"
                }
            ], 
            "attrs": {
                "pure": true
            }, 
            "decl": "const char * getChar1()  +pure", 
            "doxygen": {
                "brief": "return a 'const char *' as character(*)"
            }, 
            "fmt": {
                "C_name": "STR_get_char1_bufferify", 
                "F_C_name": "str_get_char1_bufferify", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": false, 
                    "ptr": false, 
                    "reference": false
                }, 
                "name": "getChar1", 
                "type": "void"
            }
        }, 
        {
            "_PTR_F_C_index": 0, 
            "_decl": "const string_result_fstr * getChar1()+pure", 
            "_function_index": 9, 
            "_subprogram": "function", 
            "args": [], 
            "attrs": {
                "pure": true
            }, 
            "decl": "const char * getChar1()  +pure", 
            "doxygen": {
                "brief": "return a 'const char *' as character(*)"
            }, 
            "fmt": {
                "F_name_generic": "get_char1", 
                "F_name_impl": "get_char1", 
                "F_name_method": "get_char1"
            }, 
            "options": {
                "wrap_c": false, 
                "wrap_fortran": true, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": true, 
                    "ptr": true
                }, 
                "name": "getChar1", 
                "type": "string_result_fstr"
            }
        }, 
        {
            "_PTR_F_C_index": 10, 
            "_decl": "const char * getChar2()", 
            "_function_index": 1, 
            "_subprogram": "function", 
            "args": [], 
            "attrs": {}, 
            "decl": "const char * getChar2+len=30()", 
            "doxygen": {
                "brief": "return 'const char *' with fixed size (len=30)"
            }, 
            "fmt": {
                "C_name": "STR_get_char2", 
                "F_C_name": "str_get_char2", 
                "F_name_generic": "get_char2", 
                "F_name_impl": "get_char2", 
                "F_name_method": "get_char2", 
                "method_name": "getChar2", 
                "underscore_name": "get_char2"
            }, 
            "options": {}, 
            "result": {
                "attrs": {
                    "const": true, 
                    "len": 30, 
                    "ptr": true
                }, 
                "name": "getChar2", 
                "type": "char"
            }
        }, 
        {
            "_PTR_C_CPP_index": 1, 
            "_decl": "void getChar2(char_result_as_arg * SH_F_rv+intent(out)+len(LSH_F_rv))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 10, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "_is_result": true, 
                        "const": false, 
                        "intent": "out", 
                        "len": "LSH_F_rv", 
                        "ptr": true
                    }, 
                    "name": "SH_F_rv", 
                    "type": "char_result_as_arg"
                }
            ], 
            "attrs": {}, 
            "decl": "const char * getChar2+len=30()", 
            "doxygen": {
                "brief": "return 'const char *' with fixed size (len=30)"
            }, 
            "fmt": {
                "C_name": "STR_get_char2_bufferify", 
                "F_C_name": "str_get_char2_bufferify", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": false, 
                    "len": 30, 
                    "ptr": false, 
                    "reference": false
                }, 
                "name": "getChar2", 
                "type": "void"
            }
        }, 
        {
            "_decl": "const char * getChar3()", 
            "_function_index": 2, 
            "_subprogram": "function", 
            "args": [], 
            "attrs": {}, 
            "decl": "const char * getChar3()", 
            "doxygen": {
                "brief": "return a 'const char *' as argument"
            }, 
            "fmt": {
                "C_name": "STR_get_char3", 
                "F_C_name": "str_get_char3", 
                "method_name": "getChar3", 
                "underscore_name": "get_char3"
            }, 
            "options": {
                "F_string_result_as_arg": "output", 
                "wrap_fortran": false
            }, 
            "result": {
                "attrs": {
                    "const": true, 
                    "ptr": true
                }, 
                "name": "getChar3", 
                "type": "char"
            }
        }, 
        {
            "_PTR_C_CPP_index": 2, 
            "_decl": "void getChar3(char_result_as_arg * output+intent(out)+len(Loutput))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 11, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "_is_result": true, 
                        "const": false, 
                        "intent": "out", 
                        "len": "Loutput", 
                        "ptr": true
                    }, 
                    "name": "output", 
                    "type": "char_result_as_arg"
                }
            ], 
            "attrs": {}, 
            "decl": "const char * getChar3()", 
            "doxygen": {
                "brief": "return a 'const char *' as argument"
            }, 
            "fmt": {
                "C_name": "STR_get_char3_bufferify", 
                "F_C_name": "str_get_char3_bufferify", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": false, 
                    "ptr": false, 
                    "reference": false
                }, 
                "name": "getChar3", 
                "type": "void"
            }
        }, 
        {
            "_PTR_C_CPP_index": 2, 
            "_PTR_F_C_index": 11, 
            "_decl": "void getChar3(char_result_as_arg * output+intent(out)+len(Loutput))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 12, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "_is_result": true, 
                        "const": false, 
                        "intent": "out", 
                        "len": "Loutput", 
                        "ptr": true
                    }, 
                    "name": "output", 
                    "type": "char_result_as_arg"
                }
            ], 
            "attrs": {}, 
            "decl": "const char * getChar3()", 
            "doxygen": {
                "brief": "return a 'const char *' as argument"
            }, 
            "fmt": {
                "F_name_generic": "get_char3", 
                "F_name_impl": "get_char3", 
                "F_name_method": "get_char3", 
                "function_suffix": ""
            }, 
            "options": {
                "wrap_c": false, 
                "wrap_fortran": true, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": false, 
                    "ptr": false, 
                    "reference": false
                }, 
                "name": "getChar3", 
                "type": "void"
            }
        }, 
        {
            "_decl": "const string & getString1()+pure", 
            "_function_index": 3, 
            "_subprogram": "function", 
            "args": [], 
            "attrs": {
                "pure": true
            }, 
            "decl": "const string& getString1()  +pure", 
            "doxygen": {
                "brief": "return a 'const string&' as character(*)"
            }, 
            "fmt": {
                "C_name": "STR_get_string1", 
                "F_C_name": "str_get_string1", 
                "method_name": "getString1", 
                "underscore_name": "get_string1"
            }, 
            "options": {
                "wrap_fortran": false
            }, 
            "result": {
                "attrs": {
                    "const": true, 
                    "reference": true
                }, 
                "name": "getString1", 
                "type": "string"
            }
        }, 
        {
            "_PTR_C_CPP_index": 3, 
            "_decl": "void getString1(string_result_as_arg & SH_F_rv+intent(out)+len(LSH_F_rv))+pure", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 13, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "_is_result": true, 
                        "const": false, 
                        "intent": "out", 
                        "len": "LSH_F_rv", 
                        "reference": true
                    }, 
                    "name": "SH_F_rv", 
                    "type": "string_result_as_arg"
                }
            ], 
            "attrs": {
                "pure": true
            }, 
            "decl": "const string& getString1()  +pure", 
            "doxygen": {
                "brief": "return a 'const string&' as character(*)"
            }, 
            "fmt": {
                "C_name": "STR_get_string1_bufferify", 
                "F_C_name": "str_get_string1_bufferify", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": false, 
                    "ptr": false, 
                    "reference": false
                }, 
                "name": "getString1", 
                "type": "void"
            }
        }, 
        {
            "_PTR_F_C_index": 3, 
            "_decl": "const string_result_fstr & getString1()+pure", 
            "_function_index": 14, 
            "_subprogram": "function", 
            "args": [], 
            "attrs": {
                "pure": true
            }, 
            "decl": "const string& getString1()  +pure", 
            "doxygen": {
                "brief": "return a 'const string&' as character(*)"
            }, 
            "fmt": {
                "F_name_generic": "get_string1", 
                "F_name_impl": "get_string1", 
                "F_name_method": "get_string1"
            }, 
            "options": {
                "wrap_c": false, 
                "wrap_fortran": true, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": true, 
                    "reference": true
                }, 
                "name": "getString1", 
                "type": "string_result_fstr"
            }
        }, 
        {
            "C_error_pattern": "C_invalid_name", 
            "_PTR_F_C_index": 15, 
            "_decl": "const string & getString2()", 
            "_function_index": 4, 
            "_subprogram": "function", 
            "args": [], 
            "attrs": {}, 
            "decl": "const string& getString2+len=30()", 
            "doxygen": {
                "brief": "return 'const string&' with fixed size (len=30)"
            }, 
            "fmt": {
                "C_name": "STR_get_string2", 
                "F_C_name": "str_get_string2", 
                "F_name_generic": "get_string2", 
                "F_name_impl": "get_string2", 
                "F_name_method": "get_string2", 
                "method_name": "getString2", 
                "underscore_name": "get_string2"
            }, 
            "options": {}, 
            "result": {
                "attrs": {
                    "const": true, 
                    "len": 30, 
                    "reference": true
                }, 
                "name": "getString2", 
                "type": "string"
            }
        }, 
        {
            "C_error_pattern": "C_invalid_name", 
            "_PTR_C_CPP_index": 4, 
            "_decl": "void getString2(string_result_as_arg & SH_F_rv+intent(out)+len(LSH_F_rv))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 15, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "_is_result": true, 
                        "const": false, 
                        "intent": "out", 
                        "len": "LSH_F_rv", 
                        "reference": true
                    }, 
                    "name": "SH_F_rv", 
                    "type": "string_result_as_arg"
                }
            ], 
            "attrs": {}, 
            "decl": "const string& getString2+len=30()", 
            "doxygen": {
                "brief": "return 'const string&' with fixed size (len=30)"
            }, 
            "fmt": {
                "C_name": "STR_get_string2_bufferify", 
                "F_C_name": "str_get_string2_bufferify", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": false, 
                    "len": 30, 
                    "ptr": false, 
                    "reference": false
                }, 
                "name": "getString2", 
                "type": "void"
            }
        }, 
        {
            "C_error_pattern": "C_invalid_name", 
            "_decl": "const string & getString3()", 
            "_function_index": 5, 
            "_subprogram": "function", 
            "args": [], 
            "attrs": {}, 
            "decl": "const string& getString3()", 
            "doxygen": {
                "brief": "return a 'const string&' as argument"
            }, 
            "fmt": {
                "C_name": "STR_get_string3", 
                "F_C_name": "str_get_string3", 
                "method_name": "getString3", 
                "underscore_name": "get_string3"
            }, 
            "options": {
                "F_string_result_as_arg": "output", 
                "wrap_fortran": false
            }, 
            "result": {
                "attrs": {
                    "const": true, 
                    "reference": true
                }, 
                "name": "getString3", 
                "type": "string"
            }
        }, 
        {
            "C_error_pattern": "C_invalid_name", 
            "_PTR_C_CPP_index": 5, 
            "_decl": "void getString3(string_result_as_arg & output+intent(out)+len(Loutput))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 16, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "_is_result": true, 
                        "const": false, 
                        "intent": "out", 
                        "len": "Loutput", 
                        "reference": true
                    }, 
                    "name": "output", 
                    "type": "string_result_as_arg"
                }
            ], 
            "attrs": {}, 
            "decl": "const string& getString3()", 
            "doxygen": {
                "brief": "return a 'const string&' as argument"
            }, 
            "fmt": {
                "C_name": "STR_get_string3_bufferify", 
                "F_C_name": "str_get_string3_bufferify", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": false, 
                    "ptr": false, 
                    "reference": false
                }, 
                "name": "getString3", 
                "type": "void"
            }
        }, 
        {
            "C_error_pattern": "C_invalid_name", 
            "_PTR_C_CPP_index": 5, 
            "_PTR_F_C_index": 16, 
            "_decl": "void getString3(string_result_as_arg & output+intent(out)+len(Loutput))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 17, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "_is_result": true, 
                        "const": false, 
                        "intent": "out", 
                        "len": "Loutput", 
                        "reference": true
                    }, 
                    "name": "output", 
                    "type": "string_result_as_arg"
                }
            ], 
            "attrs": {}, 
            "decl": "const string& getString3()", 
            "doxygen": {
                "brief": "return a 'const string&' as argument"
            }, 
            "fmt": {
                "F_name_generic": "get_string3", 
                "F_name_impl": "get_string3", 
                "F_name_method": "get_string3", 
                "function_suffix": ""
            }, 
            "options": {
                "wrap_c": false, 
                "wrap_fortran": true, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {
                    "const": false, 
                    "ptr": false, 
                    "reference": false
                }, 
                "name": "getString3", 
                "type": "void"
            }
        }, 
        {
            "_PTR_F_C_index": 18, 
            "_decl": "void acceptStringConstReference(const std::string & arg1+intent(in))", 
            "_function_index": 6, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "const": true, 
                        "intent": "in", 
                        "reference": true, 
                        "value": false
                    }, 
                    "name": "arg1", 
                    "type": "std::string"
                }
            ], 
            "attrs": {}, 
            "decl": "void acceptStringConstReference(const std::string & arg1)", 
            "doxygen": {
                "brief": "Accept a const string reference", 
                "description": "Save contents of arg1.\narg1 is assumed to be intent(IN) since it is const\nWill copy in.\n"
            }, 
            "fmt": {
                "C_name": "STR_accept_string_const_reference", 
                "F_C_name": "str_accept_string_const_reference", 
                "F_name_generic": "accept_string_const_reference", 
                "F_name_impl": "accept_string_const_reference", 
                "F_name_method": "accept_string_const_reference", 
                "method_name": "acceptStringConstReference", 
                "underscore_name": "accept_string_const_reference"
            }, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "name": "acceptStringConstReference", 
                "type": "void"
            }
        }, 
        {
            "_PTR_C_CPP_index": 6, 
            "_decl": "void acceptStringConstReference(const std::string & arg1+intent(in)+len_trim(Larg1))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 18, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "const": true, 
                        "intent": "in", 
                        "len_trim": "Larg1", 
                        "reference": true, 
                        "value": false
                    }, 
                    "name": "arg1", 
                    "type": "std::string"
                }
            ], 
            "attrs": {}, 
            "decl": "void acceptStringConstReference(const std::string & arg1)", 
            "doxygen": {
                "brief": "Accept a const string reference", 
                "description": "Save contents of arg1.\narg1 is assumed to be intent(IN) since it is const\nWill copy in.\n"
            }, 
            "fmt": {
                "C_name": "STR_accept_string_const_reference_bufferify", 
                "F_C_name": "str_accept_string_const_reference_bufferify", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {}, 
                "name": "acceptStringConstReference", 
                "type": "void"
            }
        }, 
        {
            "_PTR_F_C_index": 19, 
            "_decl": "void acceptStringReference(std::string & arg1+intent(inout))", 
            "_function_index": 7, 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "inout", 
                        "reference": true, 
                        "value": false
                    }, 
                    "name": "arg1", 
                    "type": "std::string"
                }
            ], 
            "attrs": {}, 
            "decl": "void acceptStringReference(std::string & arg1)", 
            "doxygen": {
                "brief": "Accept a string reference", 
                "description": "Append \"dog\" to the end of arg1.\narg1 is assumed to be intent(INOUT)\nMust copy in and copy out.\n"
            }, 
            "fmt": {
                "C_name": "STR_accept_string_reference", 
                "F_C_name": "str_accept_string_reference", 
                "F_name_generic": "accept_string_reference", 
                "F_name_impl": "accept_string_reference", 
                "F_name_method": "accept_string_reference", 
                "method_name": "acceptStringReference", 
                "underscore_name": "accept_string_reference"
            }, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "name": "acceptStringReference", 
                "type": "void"
            }
        }, 
        {
            "_PTR_C_CPP_index": 7, 
            "_decl": "void acceptStringReference(std::string & arg1+intent(inout)+len(Narg1)+len_trim(Larg1))", 
            "_error_pattern_suffix": "_as_buffer", 
            "_function_index": 19, 
            "_generated": "string_to_buffer_and_len", 
            "_subprogram": "subroutine", 
            "args": [
                {
                    "attrs": {
                        "intent": "inout", 
                        "len": "Narg1", 
                        "len_trim": "Larg1", 
                        "reference": true, 
                        "value": false
                    }, 
                    "name": "arg1", 
                    "type": "std::string"
                }
            ], 
            "attrs": {}, 
            "decl": "void acceptStringReference(std::string & arg1)", 
            "doxygen": {
                "brief": "Accept a string reference", 
                "description": "Append \"dog\" to the end of arg1.\narg1 is assumed to be intent(INOUT)\nMust copy in and copy out.\n"
            }, 
            "fmt": {
                "C_name": "STR_accept_string_reference_bufferify", 
                "F_C_name": "str_accept_string_reference_bufferify", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {}, 
                "name": "acceptStringReference", 
                "type": "void"
            }
        }
    ], 
    "options": {
        "C_header_filename_class_template": "wrap{cpp_class}.h", 
        "C_header_filename_library_template": "wrap{library}.h", 
        "C_impl_filename_class_template": "wrap{cpp_class}.cpp", 
        "C_impl_filename_library_template": "wrap{library}.cpp", 
        "C_name_function_template": "{C_prefix}{underscore_name}{function_suffix}", 
        "C_name_method_template": "{C_prefix}{lower_class}_{underscore_name}{function_suffix}", 
        "F_force_wrapper": false, 
        "F_impl_filename_class_template": "wrapf{cpp_class}.f", 
        "F_impl_filename_library_template": "wrapf{lower_library}.f", 
        "F_module_name_class_template": "{lower_class}_mod", 
        "F_module_name_library_template": "{lower_library}_mod", 
        "F_module_per_class": true, 
        "F_name_generic_template": "{underscore_name}", 
        "F_name_impl_function_template": "{underscore_name}{function_suffix}", 
        "F_name_impl_method_template": "{lower_class}_{underscore_name}{function_suffix}", 
        "F_name_method_template": "{underscore_name}{function_suffix}", 
        "F_string_len_trim": true, 
        "PY_PyObject_template": "{PY_prefix}{cpp_class}", 
        "PY_PyTypeObject_template": "{PY_prefix}{cpp_class}_Type", 
        "PY_header_filename_template": "py{library}module.hpp", 
        "PY_helper_filename_template": "py{library}helper.cpp", 
        "PY_module_filename_template": "py{library}module.cpp", 
        "PY_name_impl_function_template": "{PY_prefix}{underscore_name}{function_suffix}", 
        "PY_name_impl_method_template": "{PY_prefix}{lower_class}_{underscore_name}{function_suffix}", 
        "PY_type_filename_template": "py{cpp_class}type.cpp", 
        "cpp_header": "strings.hpp", 
        "debug": true, 
        "doxygen": true, 
        "library": "strings", 
        "namespace": "", 
        "wrap_c": true, 
        "wrap_fortran": true, 
        "wrap_python": false
    }, 
    "patterns": {
        "C_invalid_name": "if ({var}.empty()) {{\n    return NULL;\n}}\n", 
        "C_invalid_name_as_buffer": "if ({var}.empty()) {{\n    std::memset({f_string}, ' ', {f_string_len});\n    return;\n}}\n"
    }, 
    "types": {
        "bool": {
            "PY_PyTypeObject": "PyBool_Type", 
            "PY_ctor": "PyBool_FromLong({rv})", 
            "PY_post_parse": "{var} = PyObject_IsTrue({var_obj});", 
            "c_fortran": "logical(C_BOOL)", 
            "c_type": "bool", 
            "cpp_type": "bool", 
            "f_argsdecl": [
                "logical(C_BOOL) {tmp_var}"
            ], 
            "f_kind": "C_BOOL", 
            "f_pre_call": "{tmp_var} = {var}  ! coerce to C_BOOL", 
            "f_type": "logical", 
            "f_use_tmp": true
        }, 
        "char": {
            "PY_ctor": "PyString_FromString({var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_fortran": "character(kind=C_CHAR)", 
            "c_statements": {
                "intent_in": {
                    "post_call": [
                        "delete [] {cpp_var};"
                    ], 
                    "pre_call": [
                        "int {c_var_len} = strlen({c_var});", 
                        "char * {cpp_var} = new char [{c_var_len} + 1];", 
                        "std::strncpy({cpp_var}, {var}, {c_var_len});", 
                        "{cpp_var}[{c_var_len}] = '\\0';"
                    ], 
                    "pre_call_trim": [
                        "char * {cpp_var} = new char [{c_var_len} + 1];", 
                        "std::strncpy({cpp_var}, {var}, {c_var_len});", 
                        "{cpp_var}[{c_var_len}] = '\\0';"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "asctoolkit::shroud::FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ]
                }
            }, 
            "c_to_cpp": "{cpp_var}", 
            "c_type": "char", 
            "cpp_type": "char", 
            "f_module": {
                "iso_c_binding": null
            }, 
            "f_type": "character(*)"
        }, 
        "char_result_as_arg": {
            "PY_ctor": "PyString_FromString({var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_fortran": "character(kind=C_CHAR)", 
            "c_statements": {
                "intent_in": {
                    "post_call": [
                        "delete [] {cpp_var};"
                    ], 
                    "pre_call": [
                        "int {c_var_len} = strlen({c_var});", 
                        "char * {cpp_var} = new char [{c_var_len} + 1];", 
                        "std::strncpy({cpp_var}, {var}, {c_var_len});", 
                        "{cpp_var}[{c_var_len}] = '\\0';"
                    ], 
                    "pre_call_trim": [
                        "char * {cpp_var} = new char [{c_var_len} + 1];", 
                        "std::strncpy({cpp_var}, {var}, {c_var_len});", 
                        "{cpp_var}[{c_var_len}] = '\\0';"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "asctoolkit::shroud::FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ]
                }
            }, 
            "c_to_cpp": "{cpp_var}", 
            "c_type": "char", 
            "cpp_type": "char", 
            "f_module": {
                "iso_c_binding": null
            }, 
            "f_type": "character(*)"
        }, 
        "double": {
            "PY_format": "d", 
            "c_fortran": "real(C_DOUBLE)", 
            "c_type": "double", 
            "cpp_type": "double", 
            "f_cast": "real({var}, C_DOUBLE)", 
            "f_kind": "C_DOUBLE", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "float": {
            "PY_format": "f", 
            "c_fortran": "real(C_FLOAT)", 
            "c_type": "float", 
            "cpp_type": "float", 
            "f_cast": "real({var}, C_FLOAT)", 
            "f_kind": "C_FLOAT", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "int": {
            "PY_format": "i", 
            "c_fortran": "integer(C_INT)", 
            "c_type": "int", 
            "cpp_type": "int", 
            "f_cast": "int({var}, C_INT)", 
            "f_kind": "C_INT", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "integer(C_INT)": {
            "PY_format": "i", 
            "c_fortran": "integer(C_INT)", 
            "c_type": "int", 
            "cpp_type": "int", 
            "f_cast": "int({var}, C_INT)", 
            "f_kind": "C_INT", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "integer(C_LONG)": {
            "PY_format": "l", 
            "c_fortran": "integer(C_LONG)", 
            "c_type": "long", 
            "cpp_type": "long", 
            "f_cast": "int({var}, C_LONG)", 
            "f_kind": "C_LONG", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "long": {
            "PY_format": "l", 
            "c_fortran": "integer(C_LONG)", 
            "c_type": "long", 
            "cpp_type": "long", 
            "f_cast": "int({var}, C_LONG)", 
            "f_kind": "C_LONG", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "real(C_DOUBLE)": {
            "PY_format": "d", 
            "c_fortran": "real(C_DOUBLE)", 
            "c_type": "double", 
            "cpp_type": "double", 
            "f_cast": "real({var}, C_DOUBLE)", 
            "f_kind": "C_DOUBLE", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "real(C_FLOAT)": {
            "PY_format": "f", 
            "c_fortran": "real(C_FLOAT)", 
            "c_type": "float", 
            "cpp_type": "float", 
            "f_cast": "real({var}, C_FLOAT)", 
            "f_kind": "C_FLOAT", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "size_t": {
            "PY_ctor": "PyInt_FromLong({rv})", 
            "c_fortran": "integer(C_SIZE_T)", 
            "c_header": "stdlib.h", 
            "c_type": "size_t", 
            "cpp_type": "size_t", 
            "f_cast": "int({var}, C_SIZE_T)", 
            "f_kind": "C_SIZE_T", 
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            }, 
            "f_type": "integer(C_SIZE_T)"
        }, 
        "std::string": {
            "PY_ctor": "PyString_FromString({var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_fortran": "character(kind=C_CHAR)", 
            "c_statements": {
                "intent_in": {
                    "pre_call": [
                        "std::string {cpp_var}({c_var});"
                    ], 
                    "pre_call_trim": [
                        "std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "asctoolkit::shroud::FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ]
                }
            }, 
            "c_to_cpp": "{cpp_var}", 
            "c_type": "char", 
            "cpp_header": "<string>", 
            "cpp_to_c": "{var}.c_str()", 
            "cpp_type": "std::string", 
            "f_module": {
                "iso_c_binding": null
            }, 
            "f_type": "character(*)"
        }, 
        "string": {
            "PY_ctor": "PyString_FromString({var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_fortran": "character(kind=C_CHAR)", 
            "c_statements": {
                "intent_in": {
                    "pre_call": [
                        "std::string {cpp_var}({c_var});"
                    ], 
                    "pre_call_trim": [
                        "std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "asctoolkit::shroud::FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ]
                }
            }, 
            "c_to_cpp": "{cpp_var}", 
            "c_type": "char", 
            "cpp_header": "<string>", 
            "cpp_to_c": "{var}.c_str()", 
            "cpp_type": "std::string", 
            "f_module": {
                "iso_c_binding": null
            }, 
            "f_type": "character(*)"
        }, 
        "string_result_as_arg": {
            "PY_ctor": "PyString_FromString({var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_fortran": "character(kind=C_CHAR)", 
            "c_statements": {
                "intent_in": {
                    "pre_call": [
                        "std::string {cpp_var}({c_var});"
                    ], 
                    "pre_call_trim": [
                        "std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "asctoolkit::shroud::FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ]
                }
            }, 
            "c_to_cpp": "{cpp_var}", 
            "c_type": "char", 
            "cpp_header": "shroudrt.hpp", 
            "cpp_to_c": "{var}.c_str()", 
            "cpp_type": "std::string", 
            "f_module": {
                "iso_c_binding": null
            }, 
            "f_type": "character(*)"
        }, 
        "string_result_fstr": {
            "PY_ctor": "PyString_FromString({var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_fortran": "character(kind=C_CHAR)", 
            "c_statements": {
                "intent_in": {
                    "pre_call": [
                        "std::string {cpp_var}({c_var});"
                    ], 
                    "pre_call_trim": [
                        "std::string {cpp_var}({c_var}, {c_var_trim});"
                    ]
                }, 
                "intent_out": {
                    "post_call": [
                        "asctoolkit::shroud::FccCopy({c_var}, {c_var_len}, {cpp_val});"
                    ]
                }
            }, 
            "c_to_cpp": "{cpp_var}", 
            "c_type": "char", 
            "cpp_header": "<string>", 
            "cpp_to_c": "{var}.c_str()", 
            "cpp_type": "std::string", 
            "f_module": {
                "iso_c_binding": null
            }, 
            "f_return_code": "{F_result} = fstr({F_C_name}({F_arg_c_call_tab}))", 
            "f_type": "character(*)"
        }, 
        "void": {
            "c_fortran": "type(C_PTR)", 
            "c_type": "void", 
            "cpp_type": "void", 
            "f_type": "type(C_PTR)"
        }
    }
}