#
# run-tutorial - A test program to use the tutorial examples
#

include_directories(.)  # needed by ../tutorial files

if(ENABLE_FORTRAN)
    blt_add_executable(
        NAME shroud-run-tutorial-fortran
        SOURCES
            main.f
            # The 'library' to wrap
            tutorial.cpp
            # Files generated by shroud
            ../tutorial/wrapftutorial.f
            ../tutorial/wrapTutorial.cpp
            ../tutorial/wrapClass1.cpp
            ../tutorial/shroudrt.cpp
        DEPENDS_ON fruit
        OUTPUT_DIR ${TEST_OUTPUT_DIRECTORY}
    )
    blt_add_test(
        NAME shroud-run-tutorial-fortran
        COMMAND shroud-run-tutorial-fortran
    )
endif()

#
# Make Python module library
#
if(PYTHON_FOUND)
    blt_add_library(
        NAME tutorial
        PYTHON_MODULE
        SOURCES
            tutorial.cpp
            # Files generated by shroud
            ../tutorial/pyClass1type.cpp
            ../tutorial/pyTutorialmodule.cpp
            ../tutorial/pyTutorialhelper.cpp
        OUTPUT_DIR
            ${CMAKE_CURRENT_BINARY_DIR}/python
    )
    add_test (
        NAME shroud-run-tutorial-python
        COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/python/test.py
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/python
    )
    set_tests_properties(shroud-run-tutorial-python PROPERTIES
        ENVIRONMENT PYTHONPATH=${CMAKE_CURRENT_BINARY_DIR}/python)
        
    set_target_properties(tutorial-python-module 
        PROPERTIES COMPILE_FLAGS "${ATK_DISABLE_UNUSED_PARAMETER_WARNINGS} ${ATK_DISABLE_UNINITIALIZED_WARNINGS}")
    
endif()

#
# Make Lua module library
#
if(LUA_FOUND)
    blt_add_library(
        NAME tutorial
        LUA_MODULE
        SOURCES
            tutorial.cpp
            # Files generated by shroud
            ../tutorial/luaTutorialmodule.cpp
        OUTPUT_DIR
            ${CMAKE_CURRENT_BINARY_DIR}/lua
    )
    add_test (
        NAME shroud-run-tutorial-lua
        COMMAND ${LUA_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/lua/test.lua
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lua
    )
endif()
