#
# run-tutorial - A test program to use the tutorial examples
#

include_directories(.)  # needed by ../tutorial files

add_executable( shroud-run-tutorial
    main.f

    # The 'library' to wrap
    tutorial.cpp
#    ftutorial.c

    # Files generated by shroud
    ../tutorial/wrapftutorial.f
    ../tutorial/wrapTutorial.cpp
    ../tutorial/wrapClass1.cpp
)
target_link_libraries(shroud-run-tutorial fruit shroudrt)
set_target_properties(shroud-run-tutorial PROPERTIES
    LINKER_LANGUAGE Fortran
    RUNTIME_OUTPUT_DIRECTORY ${TEST_OUTPUT_DIRECTORY}
)
add_test( NAME shroud-run-tutorial
          COMMAND shroud-run-tutorial
          WORKING_DIRECTORY ${TEST_OUTPUT_DIRECTORY}
)

#add_fortran_test(
#    TEST_SOURCE ${test}
#    DEPENDS_ON fruit
#)


#
# Make Python module library
#
if(ENABLE_PYTHON_API)
    include_directories(${PYTHON_INCLUDE_DIRS})

    set(BUILD_SHARED_LIBS TRUE)
    make_library(
        LIBRARY_NAME
            tutorial
        LIBRARY_SOURCES
            tutorial.cpp
            # Files generated by shroud
            ../tutorial/pyClass1type.cpp
	    ../tutorial/pyTutorialmodule.cpp
            ../tutorial/pyTutorialhelper.cpp
        DEPENDS_ON
            shroudrt
    )

    # Python wants the name to be tutorial.so
    set_target_properties(tutorial
        PROPERTIES
          PREFIX ""
    )

#    add_custom_command(
#        TARGET tutorial POST_BUILD
#        WORKING_DIRECTORY ${LIBRARY_OUTPUT_PATH}
#        COMMAND ln -sf libtutorial.so tutorial.so
#    )

endif(ENABLE_PYTHON_API)
