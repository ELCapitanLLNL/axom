Read yaml example.yaml
Read splicer csplicer.c
Read splicer pysplicer.c
Read splicer fsplicer.f
class ExClass1
C method ExClass1 *new ( const string *name ) +constructor
C method ExClass1 *new ( const string *name ) +constructor
C method void delete() +destructor
C method int incrementCount(int incr)
C method const string& getName() const
C method int GetNameLength() const
C method const string& getNameErrorCheck() const
C method const string& getNameArg() const
C method ExClass2 *getRoot()
C method int  getValue(int value)
C method long getValue(long value)
C method void *getAddr()
C method bool hasAddr(bool in)
C method void SplicerSpecial
Close wrapExClass1.h
Close wrapExClass1.cpp
class ExClass2
C method ExClass2 *ExClass2 (const string *name) +constructor
C method ExClass2 *ExClass2 (const string *name) +constructor
C method void delete() +destructor
C method const string& getName const
C method GetNameLength
C method ExClass1 *get_class1(const ExClass1 *in)
C method void* declare(TypeID type, SidreLength len = 1)
C method void destroyall()
C method TypeID getTypeID() const
C method void setValue(ValueType value)
C method void setValue(ValueType value)
C method void setValue(ValueType value)
C method void setValue(ValueType value)
C method ValueType getValue()
C method ValueType getValue()
C method void testoptional(int i = 1, long j=2)
Close wrapExClass2.h
Close wrapExClass2.cpp
C function void local_function1
C function bool isNameValid(const std::string& name)
C function bool isNameValid(const std::string& name)
Close wrapUserLibrary.h
Close wrapUserLibrary.cpp
class ExClass1
C-interface, Fortran method ExClass1 *new ( const string *name ) +constructor
C-interface method ExClass1 *new ( const string *name ) +constructor
C-interface, Fortran method void delete() +destructor
C-interface, Fortran method int incrementCount(int incr)
C-interface, Fortran method const string& getName() const
C-interface, Fortran method int GetNameLength() const
C-interface, Fortran method const string& getNameErrorCheck() const
C-interface, Fortran method const string& getNameArg() const
C-interface, Fortran method ExClass2 *getRoot()
C-interface, Fortran method int  getValue(int value)
C-interface, Fortran method long getValue(long value)
C-interface, Fortran method void *getAddr()
C-interface, Fortran method bool hasAddr(bool in)
C-interface, Fortran method void SplicerSpecial
Close wrapfExClass1.f
class ExClass2
C-interface, Fortran method ExClass2 *ExClass2 (const string *name) +constructor
C-interface method ExClass2 *ExClass2 (const string *name) +constructor
C-interface, Fortran method void delete() +destructor
C-interface, Fortran method const string& getName const
C-interface, Fortran method GetNameLength
C-interface, Fortran method ExClass1 *get_class1(const ExClass1 *in)
C-interface method void* declare(TypeID type, SidreLength len = 1)
Fortran method void* declare(TypeID type, SidreLength len = 1)
Fortran method void* declare(TypeID type, SidreLength len = 1)
C-interface, Fortran method void destroyall()
C-interface, Fortran method TypeID getTypeID() const
C-interface, Fortran method void setValue(ValueType value)
C-interface, Fortran method void setValue(ValueType value)
C-interface, Fortran method void setValue(ValueType value)
C-interface, Fortran method void setValue(ValueType value)
C-interface, Fortran method ValueType getValue()
C-interface, Fortran method ValueType getValue()
C-interface, Fortran method void testoptional(int i = 1, long j=2)
Close wrapfExClass2.f
C-interface, Fortran function void local_function1
C-interface, Fortran function bool isNameValid(const std::string& name)
C-interface function bool isNameValid(const std::string& name)
Close wrapfuserlibrary.f
class ExClass1
Python method ExClass1 *new ( const string *name ) +constructor
Python method void delete() +destructor
Python method int incrementCount(int incr)
Python method const string& getName() const
Python method int GetNameLength() const
Python method const string& getNameErrorCheck() const
Python method const string& getNameArg() const
Python method ExClass2 *getRoot()
Python method int  getValue(int value)
Python method long getValue(long value)
Python method void *getAddr()
Python method bool hasAddr(bool in)
Python method void SplicerSpecial
Close pyExClass1type.cpp
class ExClass2
Python method ExClass2 *ExClass2 (const string *name) +constructor
Python method void delete() +destructor
Python method const string& getName const
Python method GetNameLength
Python method ExClass1 *get_class1(const ExClass1 *in)
Python method void* declare(TypeID type, SidreLength len = 1)
Python method void destroyall()
Python method TypeID getTypeID() const
Python method void testoptional(int i = 1, long j=2)
Close pyExClass2type.cpp
Python function void local_function1
Python function bool isNameValid(const std::string& name)
Close pyUserLibrarymodule.hpp
Close pyUserLibrarymodule.cpp
Close pyUserLibraryhelper.cpp
