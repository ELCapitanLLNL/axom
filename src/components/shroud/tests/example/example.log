Read yaml example.yaml
Read splicer csplicer.c
Read splicer pysplicer.c
Read splicer fsplicer.f
class ExClass1
C method ExClass1 * new(const string * name+intent(in))+constructor
C method ExClass1 * new(const string * name+intent(in)+len_trim(Lname))+constructor
C method void delete()+destructor
C method int incrementCount(int incr+intent(in)+value)
C method const string & getName() const
C method void getName(string_result_as_arg & SH_F_rv+intent(out)+len(LSH_F_rv)) const
C method int GetNameLength() const
C method const string & getNameErrorCheck() const
C method void getNameErrorCheck(string_result_as_arg & SH_F_rv+intent(out)+len(LSH_F_rv)) const
C method const string & getNameArg() const
C method void getNameArg(string_result_as_arg & name+intent(out)+len(Lname)) const
C method ExClass2 * getRoot()
C method int getValue(int value+intent(in)+value)
C method long getValue(long value+intent(in)+value)
C method void * getAddr()
C method bool hasAddr(bool in+intent(in)+value)
C method void SplicerSpecial()
Close wrapExClass1.h
Close wrapExClass1.cpp
class ExClass2
C method ExClass2 * ExClass2(const string * name+intent(in))+constructor
C method ExClass2 * ExClass2(const string * name+intent(in)+len_trim(Lname))+constructor
C method void delete()+destructor
C method const string & getName() const
C method void getName(string_result_as_arg & SH_F_rv+intent(out)+len(LSH_F_rv)) const
C method const int GetNameLength()
C method ExClass1 * get_class1(const ExClass1 * in+intent(in)+value)
C method void * declare(TypeID type+intent(in)+value)
C method void * declare(TypeID type+intent(in)+value, SidreLength len+default(1)+intent(in)+value)
C method void destroyall()
C method TypeID getTypeID() const
C method void setValue(int value+intent(in)+value)
C method void setValue(long value+intent(in)+value)
C method void setValue(float value+intent(in)+value)
C method void setValue(double value+intent(in)+value)
C method int getValue()
C method double getValue()
Close wrapExClass2.h
Close wrapExClass2.cpp
C function void local_function1()
C function bool isNameValid(const std::string & name+intent(in))
C function bool isNameValid(const std::string & name+intent(in)+len_trim(Lname))
C function bool isInitialized()
C function void test_names(const std::string & name+intent(in))
C function void test_names(const std::string & name+intent(in)+len_trim(Lname))
C function void test_names(const std::string & name+intent(in), int flag+intent(in)+value)
C function void test_names(const std::string & name+intent(in)+len_trim(Lname), int flag+intent(in)+value)
C function void testoptional()
C function void testoptional(int i+default(1)+intent(in)+value)
C function void testoptional(int i+default(1)+intent(in)+value, long j+default(2)+intent(in)+value)
Close wrapUserLibrary.h
Close wrapUserLibrary.cpp
Close shroudrt.hpp
class ExClass1
C-interface, Fortran method ExClass1 * new(const string * name+intent(in))+constructor
C-interface method ExClass1 * new(const string * name+intent(in)+len_trim(Lname))+constructor
C-interface, Fortran method void delete()+destructor
C-interface, Fortran method int incrementCount(int incr+intent(in)+value)
C-interface, Fortran method const string & getName() const
C-interface method void getName(string_result_as_arg & SH_F_rv+intent(out)+len(LSH_F_rv)) const
C-interface, Fortran method int GetNameLength() const
C-interface, Fortran method const string & getNameErrorCheck() const
C-interface method void getNameErrorCheck(string_result_as_arg & SH_F_rv+intent(out)+len(LSH_F_rv)) const
C-interface method const string & getNameArg() const
C-interface method void getNameArg(string_result_as_arg & name+intent(out)+len(Lname)) const
Fortran method void getNameArg(string_result_as_arg & name+intent(out)+len(Lname)) const
C-interface, Fortran method ExClass2 * getRoot()
C-interface, Fortran method int getValue(int value+intent(in)+value)
C-interface, Fortran method long getValue(long value+intent(in)+value)
C-interface, Fortran method void * getAddr()
C-interface, Fortran method bool hasAddr(bool in+intent(in)+value)
C-interface, Fortran method void SplicerSpecial()
Close wrapfExClass1.f
class ExClass2
C-interface, Fortran method ExClass2 * ExClass2(const string * name+intent(in))+constructor
C-interface method ExClass2 * ExClass2(const string * name+intent(in)+len_trim(Lname))+constructor
C-interface, Fortran method void delete()+destructor
C-interface, Fortran method const string & getName() const
C-interface method void getName(string_result_as_arg & SH_F_rv+intent(out)+len(LSH_F_rv)) const
C-interface, Fortran method const int GetNameLength()
C-interface, Fortran method ExClass1 * get_class1(const ExClass1 * in+intent(in)+value)
C-interface method void * declare(TypeID type+intent(in)+value)
Fortran method void * declare(TypeID type+intent(in)+value)
Fortran method void * declare(TypeID type+intent(in)+value)
C-interface method void * declare(TypeID type+intent(in)+value, SidreLength len+default(1)+intent(in)+value)
Fortran method void * declare(TypeID type+intent(in)+value, int len+default(1)+intent(in)+value)
Fortran method void * declare(TypeID type+intent(in)+value, long len+default(1)+intent(in)+value)
C-interface, Fortran method void destroyall()
C-interface, Fortran method TypeID getTypeID() const
C-interface, Fortran method void setValue(int value+intent(in)+value)
C-interface, Fortran method void setValue(long value+intent(in)+value)
C-interface, Fortran method void setValue(float value+intent(in)+value)
C-interface, Fortran method void setValue(double value+intent(in)+value)
C-interface, Fortran method int getValue()
C-interface, Fortran method double getValue()
Close wrapfExClass2.f
C-interface, Fortran function void local_function1()
C-interface, Fortran function bool isNameValid(const std::string & name+intent(in))
C-interface function bool isNameValid(const std::string & name+intent(in)+len_trim(Lname))
C-interface, Fortran function bool isInitialized()
C-interface, Fortran function void test_names(const std::string & name+intent(in))
C-interface function void test_names(const std::string & name+intent(in)+len_trim(Lname))
C-interface, Fortran function void test_names(const std::string & name+intent(in), int flag+intent(in)+value)
C-interface function void test_names(const std::string & name+intent(in)+len_trim(Lname), int flag+intent(in)+value)
C-interface, Fortran function void testoptional()
C-interface, Fortran function void testoptional(int i+default(1)+intent(in)+value)
C-interface, Fortran function void testoptional(int i+default(1)+intent(in)+value, long j+default(2)+intent(in)+value)
Close wrapfuserlibrary.f
class ExClass1
Python method ExClass1 * new(const string * name+intent(in))+constructor
Python method void delete()+destructor
Python method int incrementCount(int incr+intent(in)+value)
Python method const string & getName() const
Python method int GetNameLength() const
Python method const string & getNameErrorCheck() const
Python method const string & getNameArg() const
Python method ExClass2 * getRoot()
Python method int getValue(int value+intent(in)+value)
Python method long getValue(long value+intent(in)+value)
Python method void * getAddr()
Python method bool hasAddr(bool in+intent(in)+value)
Python method void SplicerSpecial()
Close pyExClass1type.cpp
class ExClass2
Python method ExClass2 * ExClass2(const string * name+intent(in))+constructor
Python method void delete()+destructor
Python method const string & getName() const
Python method const int GetNameLength()
Python method ExClass1 * get_class1(const ExClass1 * in+intent(in)+value)
Python method void * declare(TypeID type+intent(in)+value, SidreLength len+default(1)+intent(in)+value)
Python method void destroyall()
Python method TypeID getTypeID() const
Close pyExClass2type.cpp
Python function void local_function1()
Python function bool isNameValid(const std::string & name+intent(in))
Python function bool isInitialized()
Python function void test_names(const std::string & name+intent(in))
Python function void test_names(const std::string & name+intent(in), int flag+intent(in)+value)
Python function void testoptional(int i+default(1)+intent(in)+value, long j+default(2)+intent(in)+value)
Close pyUserLibrarymodule.hpp
Close pyUserLibrarymodule.cpp
Close pyUserLibraryhelper.cpp
