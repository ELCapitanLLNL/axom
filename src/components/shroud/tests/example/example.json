{
    "F_module_dependencies": [], 
    "classes": [
        {
            "F_module_dependencies": [
                [
                    "exclass1_mod", 
                    [
                        "exclass1"
                    ]
                ], 
                [
                    "exclass2_mod", 
                    [
                        "exclass2"
                    ]
                ], 
                [
                    "iso_c_binding", 
                    [
                        "C_INT", 
                        "C_LONG"
                    ]
                ]
            ], 
            "fmt": {
                "C_header_filename": "wrapExClass1.h", 
                "C_impl_filename": "wrapExClass1.cpp", 
                "C_prefix": "AA_", 
                "C_type_name": "AA_exclass1", 
                "F_derived_name": "exclass1", 
                "F_impl_filename": "wrapfExClass1.f", 
                "F_module_name": "exclass1_mod", 
                "PY_PyObject": "PP_ExClass1", 
                "PY_PyTypeObject": "PP_ExClass1_Type", 
                "PY_capsule_name": "PY_ExClass1_capsule_name", 
                "PY_from_object_func": "PP_ExClass1_from_Object", 
                "PY_to_object_func": "PP_ExClass1_to_Object", 
                "PY_type_filename": "pyExClass1type.cpp", 
                "cpp_class": "ExClass1", 
                "lower_class": "exclass1", 
                "upper_class": "EXCLASS1"
            }, 
            "methods": [
                {
                    "_PTR_F_C_index": 13, 
                    "_decl": "ExClass1 * new(const string * name+intent(in))+constructor", 
                    "_function_index": 0, 
                    "args": [
                        {
                            "attrs": {
                                "const": true, 
                                "intent": "in", 
                                "ptr": true, 
                                "value": false
                            }, 
                            "name": "name", 
                            "type": "string"
                        }
                    ], 
                    "attrs": {
                        "constructor": true
                    }, 
                    "decl": "ExClass1 *new ( const string *name ) +constructor", 
                    "docs": "constructor", 
                    "fmt": {
                        "C_name": "AA_exclass1_new", 
                        "F_C_name": "aa_exclass1_new", 
                        "F_name_generic": "new", 
                        "F_name_impl": "exclass1_new", 
                        "F_name_method": "new", 
                        "method_name": "new", 
                        "underscore_name": "new"
                    }, 
                    "options": {}, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "name": "new", 
                        "type": "ExClass1"
                    }
                }, 
                {
                    "_decl": "ExClass1 * new(const string * name+intent(in)+len_trim)+constructor", 
                    "_function_index": 13, 
                    "_generated": "string_to_buffer_and_len", 
                    "args": [
                        {
                            "attrs": {
                                "const": true, 
                                "intent": "in", 
                                "len_trim": true, 
                                "ptr": true, 
                                "value": false
                            }, 
                            "name": "name", 
                            "type": "string"
                        }
                    ], 
                    "attrs": {
                        "constructor": true
                    }, 
                    "decl": "ExClass1 *new ( const string *name ) +constructor", 
                    "docs": "constructor", 
                    "fmt": {
                        "C_name": "AA_exclass1_new_bufferify", 
                        "F_C_name": "aa_exclass1_new_bufferify", 
                        "function_suffix": "_bufferify"
                    }, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "name": "new", 
                        "type": "ExClass1"
                    }
                }, 
                {
                    "_decl": "void delete()+destructor", 
                    "_function_index": 1, 
                    "args": [], 
                    "attrs": {
                        "destructor": true
                    }, 
                    "decl": "void delete() +destructor", 
                    "fmt": {
                        "C_name": "AA_exclass1_delete", 
                        "F_C_name": "aa_exclass1_delete", 
                        "F_name_generic": "delete", 
                        "F_name_impl": "exclass1_delete", 
                        "F_name_method": "delete", 
                        "PY_name_impl": "PP_exclass1_delete", 
                        "method_name": "delete", 
                        "underscore_name": "delete"
                    }, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "name": "delete", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "int incrementCount(int incr+intent(in)+value)", 
                    "_function_index": 2, 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "name": "incr", 
                            "type": "int"
                        }
                    ], 
                    "attrs": {}, 
                    "decl": "int incrementCount(int incr)", 
                    "docs": "blah blah", 
                    "fmt": {
                        "C_name": "AA_exclass1_increment_count", 
                        "F_C_name": "aa_exclass1_increment_count", 
                        "F_name_generic": "increment_count", 
                        "F_name_impl": "exclass1_increment_count", 
                        "F_name_method": "increment_count", 
                        "PY_name_impl": "PP_exclass1_increment_count", 
                        "method_name": "incrementCount", 
                        "underscore_name": "increment_count"
                    }, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "name": "incrementCount", 
                        "type": "int"
                    }
                }, 
                {
                    "C_error_pattern": "C_invalid_name", 
                    "PY_error_pattern": "PY_invalid_name", 
                    "_decl": "const string & getName() const", 
                    "_function_index": 3, 
                    "args": [], 
                    "attrs": {
                        "const": true
                    }, 
                    "decl": "const string& getName() const", 
                    "fmt": {
                        "C_name": "AA_exclass1_get_name", 
                        "F_C_name": "aa_exclass1_get_name", 
                        "F_name_generic": "get_name", 
                        "F_name_impl": "exclass1_get_name", 
                        "F_name_method": "get_name", 
                        "PY_name_impl": "PP_exclass1_get_name", 
                        "method_name": "getName", 
                        "underscore_name": "get_name"
                    }, 
                    "options": {}, 
                    "result": {
                        "attrs": {
                            "const": true, 
                            "len": "aa_exclass1_get_name_length({F_instance_ptr})", 
                            "reference": true
                        }, 
                        "name": "getName", 
                        "type": "string"
                    }
                }, 
                {
                    "_decl": "int GetNameLength() const", 
                    "_function_index": 4, 
                    "args": [], 
                    "attrs": {
                        "const": true
                    }, 
                    "decl": "int GetNameLength() const", 
                    "docs": "helper function for Fortran", 
                    "fmt": {
                        "C_name": "AA_exclass1_get_name_length", 
                        "F_C_name": "aa_exclass1_get_name_length", 
                        "F_name_generic": "get_name_length", 
                        "F_name_impl": "exclass1_get_name_length", 
                        "F_name_method": "get_name_length", 
                        "PY_name_impl": "PP_exclass1_get_name_length", 
                        "method_name": "GetNameLength", 
                        "underscore_name": "get_name_length"
                    }, 
                    "helper": true, 
                    "options": {
                        "C_code": "return selfobj->getName().length();"
                    }, 
                    "result": {
                        "attrs": {}, 
                        "name": "GetNameLength", 
                        "type": "int"
                    }
                }, 
                {
                    "_decl": "const string & getNameErrorCheck() const", 
                    "_function_index": 5, 
                    "args": [], 
                    "attrs": {
                        "const": true
                    }, 
                    "decl": "const string& getNameErrorCheck() const", 
                    "fmt": {
                        "C_name": "AA_exclass1_get_name_error_check", 
                        "F_C_name": "aa_exclass1_get_name_error_check", 
                        "F_name_generic": "get_name_error_check", 
                        "F_name_impl": "exclass1_get_name_error_check", 
                        "F_name_method": "get_name_error_check", 
                        "PY_name_impl": "PP_exclass1_get_name_error_check", 
                        "method_name": "getNameErrorCheck", 
                        "underscore_name": "get_name_error_check"
                    }, 
                    "options": {}, 
                    "result": {
                        "attrs": {
                            "const": true, 
                            "reference": true
                        }, 
                        "name": "getNameErrorCheck", 
                        "type": "string"
                    }
                }, 
                {
                    "_decl": "const string & getNameArg() const", 
                    "_function_index": 6, 
                    "args": [], 
                    "attrs": {
                        "const": true
                    }, 
                    "decl": "const string& getNameArg() const", 
                    "fmt": {
                        "C_name": "AA_exclass1_get_name_arg", 
                        "F_C_name": "aa_exclass1_get_name_arg", 
                        "F_name_generic": "get_name_arg", 
                        "F_name_impl": "exclass1_get_name_arg", 
                        "F_name_method": "get_name_arg", 
                        "PY_name_impl": "PP_exclass1_get_name_arg", 
                        "method_name": "getNameArg", 
                        "underscore_name": "get_name_arg"
                    }, 
                    "options": {
                        "F_string_result_as_arg": "name"
                    }, 
                    "result": {
                        "attrs": {
                            "const": true, 
                            "reference": true
                        }, 
                        "name": "getNameArg", 
                        "type": "string"
                    }
                }, 
                {
                    "_decl": "ExClass2 * getRoot()", 
                    "_function_index": 7, 
                    "args": [], 
                    "attrs": {}, 
                    "decl": "ExClass2 *getRoot()", 
                    "fmt": {
                        "C_name": "AA_exclass1_get_root", 
                        "F_C_name": "aa_exclass1_get_root", 
                        "F_name_generic": "get_root", 
                        "F_name_impl": "exclass1_get_root", 
                        "F_name_method": "get_root", 
                        "PY_name_impl": "PP_exclass1_get_root", 
                        "method_name": "getRoot", 
                        "underscore_name": "get_root"
                    }, 
                    "options": {}, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "name": "getRoot", 
                        "type": "ExClass2"
                    }
                }, 
                {
                    "_cpp_overload": [
                        8, 
                        9
                    ], 
                    "_decl": "int getValue(int value+intent(in)+value)", 
                    "_function_index": 8, 
                    "_overloaded": true, 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "name": "value", 
                            "type": "int"
                        }
                    ], 
                    "attrs": {}, 
                    "decl": "int  getValue(int value)", 
                    "fmt": {
                        "C_name": "AA_exclass1_get_value_from_int", 
                        "F_C_name": "aa_exclass1_get_value_from_int", 
                        "F_name_generic": "get_value", 
                        "F_name_impl": "exclass1_get_value_from_int", 
                        "F_name_method": "get_value_from_int", 
                        "PY_name_impl": "PP_exclass1_get_value_from_int", 
                        "function_suffix": "_from_int", 
                        "method_name": "getValue", 
                        "underscore_name": "get_value"
                    }, 
                    "function_suffix": "_from_int", 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "name": "getValue", 
                        "type": "int"
                    }
                }, 
                {
                    "_cpp_overload": [
                        8, 
                        9
                    ], 
                    "_decl": "long getValue(long value+intent(in)+value)", 
                    "_function_index": 9, 
                    "_overloaded": true, 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "name": "value", 
                            "type": "long"
                        }
                    ], 
                    "attrs": {}, 
                    "decl": "long getValue(long value)", 
                    "fmt": {
                        "C_name": "AA_exclass1_get_value_1", 
                        "F_C_name": "aa_exclass1_get_value_1", 
                        "F_name_generic": "get_value", 
                        "F_name_impl": "exclass1_get_value_1", 
                        "F_name_method": "get_value_1", 
                        "PY_name_impl": "PP_exclass1_get_value_1", 
                        "function_suffix": "_1", 
                        "method_name": "getValue", 
                        "underscore_name": "get_value"
                    }, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "name": "getValue", 
                        "type": "long"
                    }
                }, 
                {
                    "_decl": "void * getAddr()", 
                    "_function_index": 10, 
                    "args": [], 
                    "attrs": {}, 
                    "decl": "void *getAddr()", 
                    "fmt": {
                        "C_name": "AA_exclass1_get_addr", 
                        "F_C_name": "aa_exclass1_get_addr", 
                        "F_name_generic": "get_addr", 
                        "F_name_impl": "exclass1_get_addr", 
                        "F_name_method": "get_addr", 
                        "PY_name_impl": "PP_exclass1_get_addr", 
                        "method_name": "getAddr", 
                        "underscore_name": "get_addr"
                    }, 
                    "options": {}, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "name": "getAddr", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "bool hasAddr(bool in+intent(in)+value)", 
                    "_function_index": 11, 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "name": "in", 
                            "type": "bool"
                        }
                    ], 
                    "attrs": {}, 
                    "decl": "bool hasAddr(bool in)", 
                    "fmt": {
                        "C_name": "AA_exclass1_has_addr", 
                        "F_C_name": "aa_exclass1_has_addr", 
                        "F_name_generic": "has_addr", 
                        "F_name_impl": "exclass1_has_addr", 
                        "F_name_method": "has_addr", 
                        "PY_name_impl": "PP_exclass1_has_addr", 
                        "method_name": "hasAddr", 
                        "underscore_name": "has_addr"
                    }, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "name": "hasAddr", 
                        "type": "bool"
                    }
                }, 
                {
                    "_decl": "void SplicerSpecial()", 
                    "_function_index": 12, 
                    "args": [], 
                    "attrs": {}, 
                    "decl": "void SplicerSpecial", 
                    "fmt": {
                        "C_name": "AA_exclass1_splicer_special", 
                        "F_C_name": "aa_exclass1_splicer_special", 
                        "F_name_generic": "splicer_special", 
                        "F_name_impl": "exclass1_splicer_special", 
                        "F_name_method": "splicer_special", 
                        "PY_name_impl": "PP_exclass1_splicer_special", 
                        "method_name": "SplicerSpecial", 
                        "underscore_name": "splicer_special"
                    }, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "name": "SplicerSpecial", 
                        "type": "void"
                    }
                }
            ], 
            "name": "ExClass1", 
            "options": {
                "cpp_header": "ExClass1.hpp"
            }, 
            "python": {
                "type": [
                    "init", 
                    "repr", 
                    "richcompare"
                ]
            }
        }, 
        {
            "F_module_dependencies": [
                [
                    "exclass1_mod", 
                    [
                        "exclass1"
                    ]
                ], 
                [
                    "exclass2_mod", 
                    [
                        "exclass2"
                    ]
                ], 
                [
                    "iso_c_binding", 
                    [
                        "C_DOUBLE", 
                        "C_FLOAT", 
                        "C_INT", 
                        "C_LONG"
                    ]
                ]
            ], 
            "fmt": {
                "C_header_filename": "wrapExClass2.h", 
                "C_impl_filename": "wrapExClass2.cpp", 
                "C_prefix": "AA_", 
                "C_type_name": "AA_exclass2", 
                "F_derived_name": "exclass2", 
                "F_impl_filename": "wrapfExClass2.f", 
                "F_module_name": "exclass2_mod", 
                "PY_PyObject": "PP_ExClass2", 
                "PY_PyTypeObject": "PP_ExClass2_Type", 
                "PY_capsule_name": "PY_ExClass2_capsule_name", 
                "PY_from_object_func": "PP_ExClass2_from_Object", 
                "PY_to_object_func": "PP_ExClass2_to_Object", 
                "PY_type_filename": "pyExClass2type.cpp", 
                "cpp_class": "ExClass2", 
                "lower_class": "exclass2", 
                "upper_class": "EXCLASS2"
            }, 
            "methods": [
                {
                    "_PTR_F_C_index": 31, 
                    "_decl": "ExClass2 * ExClass2(const string * name+intent(in))+constructor", 
                    "_function_index": 14, 
                    "args": [
                        {
                            "attrs": {
                                "const": true, 
                                "intent": "in", 
                                "ptr": true, 
                                "value": false
                            }, 
                            "name": "name", 
                            "type": "string"
                        }
                    ], 
                    "attrs": {
                        "constructor": true
                    }, 
                    "decl": "ExClass2 *ExClass2 (const string *name) +constructor", 
                    "fmt": {
                        "C_name": "AA_exclass2_ex_class2", 
                        "F_C_name": "aa_exclass2_ex_class2", 
                        "F_name_generic": "ex_class2", 
                        "F_name_impl": "exclass2_ex_class2", 
                        "F_name_method": "ex_class2", 
                        "method_name": "ExClass2", 
                        "underscore_name": "ex_class2"
                    }, 
                    "options": {}, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "name": "ExClass2", 
                        "type": "ExClass2"
                    }
                }, 
                {
                    "_decl": "ExClass2 * ExClass2(const string * name+intent(in)+len_trim)+constructor", 
                    "_function_index": 31, 
                    "_generated": "string_to_buffer_and_len", 
                    "args": [
                        {
                            "attrs": {
                                "const": true, 
                                "intent": "in", 
                                "len_trim": true, 
                                "ptr": true, 
                                "value": false
                            }, 
                            "name": "name", 
                            "type": "string"
                        }
                    ], 
                    "attrs": {
                        "constructor": true
                    }, 
                    "decl": "ExClass2 *ExClass2 (const string *name) +constructor", 
                    "fmt": {
                        "C_name": "AA_exclass2_ex_class2_bufferify", 
                        "F_C_name": "aa_exclass2_ex_class2_bufferify", 
                        "function_suffix": "_bufferify"
                    }, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "name": "ExClass2", 
                        "type": "ExClass2"
                    }
                }, 
                {
                    "_decl": "void delete()+destructor", 
                    "_function_index": 15, 
                    "args": [], 
                    "attrs": {
                        "destructor": true
                    }, 
                    "decl": "void delete() +destructor", 
                    "fmt": {
                        "C_name": "AA_exclass2_delete", 
                        "F_C_name": "aa_exclass2_delete", 
                        "F_name_generic": "delete", 
                        "F_name_impl": "exclass2_delete", 
                        "F_name_method": "delete", 
                        "PY_name_impl": "PP_exclass2_delete", 
                        "method_name": "delete", 
                        "underscore_name": "delete"
                    }, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "name": "delete", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "const string & getName() const", 
                    "_function_index": 16, 
                    "args": [], 
                    "attrs": {
                        "const": true
                    }, 
                    "decl": "const string& getName const", 
                    "fmt": {
                        "C_name": "AA_exclass2_get_name", 
                        "F_C_name": "aa_exclass2_get_name", 
                        "F_name_generic": "get_name", 
                        "F_name_impl": "exclass2_get_name", 
                        "F_name_method": "get_name", 
                        "PY_name_impl": "PP_exclass2_get_name", 
                        "method_name": "getName", 
                        "underscore_name": "get_name"
                    }, 
                    "options": {}, 
                    "result": {
                        "attrs": {
                            "const": true, 
                            "len": "aa_exclass2_get_name_length({F_instance_ptr})", 
                            "reference": true
                        }, 
                        "name": "getName", 
                        "type": "string"
                    }
                }, 
                {
                    "_decl": "const int GetNameLength()", 
                    "_function_index": 17, 
                    "args": [], 
                    "attrs": {}, 
                    "docs": "helper function for Fortran", 
                    "fmt": {
                        "C_name": "AA_exclass2_get_name_length", 
                        "F_C_name": "aa_exclass2_get_name_length", 
                        "F_name_generic": "get_name_length", 
                        "F_name_impl": "exclass2_get_name_length", 
                        "F_name_method": "get_name_length", 
                        "PY_name_impl": "PP_exclass2_get_name_length", 
                        "method_name": "GetNameLength", 
                        "underscore_name": "get_name_length"
                    }, 
                    "options": {
                        "C_code": "return selfobj->getName().length();"
                    }, 
                    "result": {
                        "attrs": {
                            "const": true
                        }, 
                        "name": "GetNameLength", 
                        "type": "int"
                    }
                }, 
                {
                    "_decl": "ExClass1 * get_class1(const ExClass1 * in+intent(in)+value)", 
                    "_function_index": 18, 
                    "args": [
                        {
                            "attrs": {
                                "const": true, 
                                "intent": "in", 
                                "ptr": true, 
                                "value": true
                            }, 
                            "name": "in", 
                            "type": "ExClass1"
                        }
                    ], 
                    "attrs": {}, 
                    "decl": "ExClass1 *get_class1(const ExClass1 *in)", 
                    "fmt": {
                        "C_name": "AA_exclass2_get_class1", 
                        "F_C_name": "aa_exclass2_get_class1", 
                        "F_name_generic": "get_class1", 
                        "F_name_impl": "exclass2_get_class1", 
                        "F_name_method": "get_class1", 
                        "PY_name_impl": "PP_exclass2_get_class1", 
                        "method_name": "get_class1", 
                        "underscore_name": "get_class1"
                    }, 
                    "options": {}, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "name": "get_class1", 
                        "type": "ExClass1"
                    }
                }, 
                {
                    "_decl": "void * declare(TypeID type+intent(in)+value)", 
                    "_function_index": 24, 
                    "_generated": "has_default_arg", 
                    "_overloaded": true, 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "name": "type", 
                            "type": "TypeID"
                        }
                    ], 
                    "attrs": {}, 
                    "decl": "void* declare(TypeID type, SidreLength len = 1)", 
                    "fmt": {
                        "C_name": "AA_exclass2_declare_0", 
                        "F_C_name": "aa_exclass2_declare_0", 
                        "function_suffix": "_0"
                    }, 
                    "fortran_generic": {
                        "len": [
                            "int", 
                            "long"
                        ]
                    }, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "name": "declare", 
                        "type": "void"
                    }, 
                    "return_this": true
                }, 
                {
                    "_PTR_F_C_index": 24, 
                    "_decl": "void * declare(TypeID type+intent(in)+value)", 
                    "_function_index": 32, 
                    "_generated": "fortran_generic", 
                    "_overloaded": true, 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "name": "type", 
                            "type": "TypeID"
                        }
                    ], 
                    "attrs": {}, 
                    "decl": "void* declare(TypeID type, SidreLength len = 1)", 
                    "fmt": {
                        "F_name_generic": "declare", 
                        "F_name_impl": "exclass2_declare_0_int", 
                        "F_name_method": "declare_0_int", 
                        "function_suffix": "_0_int"
                    }, 
                    "options": {
                        "wrap_c": false, 
                        "wrap_fortran": true, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "name": "declare", 
                        "type": "void"
                    }, 
                    "return_this": true
                }, 
                {
                    "_PTR_F_C_index": 24, 
                    "_decl": "void * declare(TypeID type+intent(in)+value)", 
                    "_function_index": 33, 
                    "_generated": "fortran_generic", 
                    "_overloaded": true, 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "name": "type", 
                            "type": "TypeID"
                        }
                    ], 
                    "attrs": {}, 
                    "decl": "void* declare(TypeID type, SidreLength len = 1)", 
                    "fmt": {
                        "F_name_generic": "declare", 
                        "F_name_impl": "exclass2_declare_0_long", 
                        "F_name_method": "declare_0_long", 
                        "function_suffix": "_0_long"
                    }, 
                    "options": {
                        "wrap_c": false, 
                        "wrap_fortran": true, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "name": "declare", 
                        "type": "void"
                    }, 
                    "return_this": true
                }, 
                {
                    "_decl": "void * declare(TypeID type+intent(in)+value, SidreLength len+default(1)+intent(in)+value)", 
                    "_default_funcs": [
                        24
                    ], 
                    "_function_index": 19, 
                    "_has_default_arg": true, 
                    "_overloaded": true, 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "name": "type", 
                            "type": "TypeID"
                        }, 
                        {
                            "attrs": {
                                "default": 1, 
                                "intent": "in", 
                                "value": true
                            }, 
                            "name": "len", 
                            "type": "SidreLength"
                        }
                    ], 
                    "attrs": {}, 
                    "decl": "void* declare(TypeID type, SidreLength len = 1)", 
                    "fmt": {
                        "C_name": "AA_exclass2_declare_1", 
                        "F_C_name": "aa_exclass2_declare_1", 
                        "PY_name_impl": "PP_exclass2_declare_1", 
                        "function_suffix": "_1", 
                        "method_name": "declare", 
                        "underscore_name": "declare"
                    }, 
                    "fortran_generic": {
                        "len": [
                            "int", 
                            "long"
                        ]
                    }, 
                    "options": {
                        "wrap_fortran": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "name": "declare", 
                        "type": "void"
                    }, 
                    "return_this": true
                }, 
                {
                    "_PTR_F_C_index": 19, 
                    "_decl": "void * declare(TypeID type+intent(in)+value, int len+default(1)+intent(in)+value)", 
                    "_default_funcs": [
                        24
                    ], 
                    "_function_index": 34, 
                    "_generated": "fortran_generic", 
                    "_has_default_arg": true, 
                    "_overloaded": true, 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "name": "type", 
                            "type": "TypeID"
                        }, 
                        {
                            "attrs": {
                                "default": 1, 
                                "intent": "in", 
                                "value": true
                            }, 
                            "name": "len", 
                            "type": "int"
                        }
                    ], 
                    "attrs": {}, 
                    "decl": "void* declare(TypeID type, SidreLength len = 1)", 
                    "fmt": {
                        "F_name_generic": "declare", 
                        "F_name_impl": "exclass2_declare_1_int", 
                        "F_name_method": "declare_1_int", 
                        "function_suffix": "_1_int"
                    }, 
                    "options": {
                        "wrap_c": false, 
                        "wrap_fortran": true, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "name": "declare", 
                        "type": "void"
                    }, 
                    "return_this": true
                }, 
                {
                    "_PTR_F_C_index": 19, 
                    "_decl": "void * declare(TypeID type+intent(in)+value, long len+default(1)+intent(in)+value)", 
                    "_default_funcs": [
                        24
                    ], 
                    "_function_index": 35, 
                    "_generated": "fortran_generic", 
                    "_has_default_arg": true, 
                    "_overloaded": true, 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "name": "type", 
                            "type": "TypeID"
                        }, 
                        {
                            "attrs": {
                                "default": 1, 
                                "intent": "in", 
                                "value": true
                            }, 
                            "name": "len", 
                            "type": "long"
                        }
                    ], 
                    "attrs": {}, 
                    "decl": "void* declare(TypeID type, SidreLength len = 1)", 
                    "fmt": {
                        "F_name_generic": "declare", 
                        "F_name_impl": "exclass2_declare_1_long", 
                        "F_name_method": "declare_1_long", 
                        "function_suffix": "_1_long"
                    }, 
                    "options": {
                        "wrap_c": false, 
                        "wrap_fortran": true, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {
                            "ptr": true
                        }, 
                        "name": "declare", 
                        "type": "void"
                    }, 
                    "return_this": true
                }, 
                {
                    "_decl": "void destroyall()", 
                    "_function_index": 20, 
                    "args": [], 
                    "attrs": {}, 
                    "decl": "void destroyall()", 
                    "fmt": {
                        "C_name": "AA_exclass2_destroyall", 
                        "F_C_name": "aa_exclass2_destroyall", 
                        "F_name_generic": "destroyall", 
                        "F_name_impl": "exclass2_destroyall", 
                        "F_name_method": "destroyall", 
                        "PY_name_impl": "PP_exclass2_destroyall", 
                        "method_name": "destroyall", 
                        "underscore_name": "destroyall"
                    }, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "name": "destroyall", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "TypeID getTypeID() const", 
                    "_function_index": 21, 
                    "args": [], 
                    "attrs": {
                        "const": true
                    }, 
                    "decl": "TypeID getTypeID() const", 
                    "fmt": {
                        "C_name": "AA_exclass2_get_type_id", 
                        "F_C_name": "aa_exclass2_get_type_id", 
                        "F_name_generic": "get_type_id", 
                        "F_name_impl": "exclass2_get_type_id", 
                        "F_name_method": "get_type_id", 
                        "PY_name_impl": "PP_exclass2_get_type_id", 
                        "method_name": "getTypeID", 
                        "underscore_name": "get_type_id"
                    }, 
                    "options": {}, 
                    "result": {
                        "attrs": {}, 
                        "name": "getTypeID", 
                        "type": "TypeID"
                    }
                }, 
                {
                    "_decl": "void setValue(ValueType value+intent(in)+value)", 
                    "_function_index": 22, 
                    "_overloaded": true, 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "name": "value", 
                            "type": "ValueType"
                        }
                    ], 
                    "attrs": {}, 
                    "cpp_template": {
                        "ValueType": [
                            "int", 
                            "long", 
                            "float", 
                            "double"
                        ]
                    }, 
                    "decl": "void setValue(ValueType value)", 
                    "fmt": {
                        "method_name": "setValue", 
                        "underscore_name": "set_value"
                    }, 
                    "options": {
                        "wrap_c": false, 
                        "wrap_fortran": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {}, 
                        "name": "setValue", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "void setValue(int value+intent(in)+value)", 
                    "_function_index": 25, 
                    "_generated": "cpp_template", 
                    "_overloaded": true, 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "name": "value", 
                            "type": "int"
                        }
                    ], 
                    "attrs": {}, 
                    "decl": "void setValue(ValueType value)", 
                    "fmt": {
                        "CPP_template": "<int>", 
                        "C_name": "AA_exclass2_set_value_int", 
                        "F_C_name": "aa_exclass2_set_value_int", 
                        "F_name_generic": "set_value", 
                        "F_name_impl": "exclass2_set_value_int", 
                        "F_name_method": "set_value_int", 
                        "function_suffix": "_int"
                    }, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": true, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {}, 
                        "name": "setValue", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "void setValue(long value+intent(in)+value)", 
                    "_function_index": 26, 
                    "_generated": "cpp_template", 
                    "_overloaded": true, 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "name": "value", 
                            "type": "long"
                        }
                    ], 
                    "attrs": {}, 
                    "decl": "void setValue(ValueType value)", 
                    "fmt": {
                        "CPP_template": "<long>", 
                        "C_name": "AA_exclass2_set_value_long", 
                        "F_C_name": "aa_exclass2_set_value_long", 
                        "F_name_generic": "set_value", 
                        "F_name_impl": "exclass2_set_value_long", 
                        "F_name_method": "set_value_long", 
                        "function_suffix": "_long"
                    }, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": true, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {}, 
                        "name": "setValue", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "void setValue(float value+intent(in)+value)", 
                    "_function_index": 27, 
                    "_generated": "cpp_template", 
                    "_overloaded": true, 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "name": "value", 
                            "type": "float"
                        }
                    ], 
                    "attrs": {}, 
                    "decl": "void setValue(ValueType value)", 
                    "fmt": {
                        "CPP_template": "<float>", 
                        "C_name": "AA_exclass2_set_value_float", 
                        "F_C_name": "aa_exclass2_set_value_float", 
                        "F_name_generic": "set_value", 
                        "F_name_impl": "exclass2_set_value_float", 
                        "F_name_method": "set_value_float", 
                        "function_suffix": "_float"
                    }, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": true, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {}, 
                        "name": "setValue", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "void setValue(double value+intent(in)+value)", 
                    "_function_index": 28, 
                    "_generated": "cpp_template", 
                    "_overloaded": true, 
                    "args": [
                        {
                            "attrs": {
                                "intent": "in", 
                                "value": true
                            }, 
                            "name": "value", 
                            "type": "double"
                        }
                    ], 
                    "attrs": {}, 
                    "decl": "void setValue(ValueType value)", 
                    "fmt": {
                        "CPP_template": "<double>", 
                        "C_name": "AA_exclass2_set_value_double", 
                        "F_C_name": "aa_exclass2_set_value_double", 
                        "F_name_generic": "set_value", 
                        "F_name_impl": "exclass2_set_value_double", 
                        "F_name_method": "set_value_double", 
                        "function_suffix": "_double"
                    }, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": true, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {}, 
                        "name": "setValue", 
                        "type": "void"
                    }
                }, 
                {
                    "_decl": "ValueType getValue()", 
                    "_function_index": 23, 
                    "_overloaded": true, 
                    "args": [], 
                    "attrs": {}, 
                    "cpp_template": {
                        "ValueType": [
                            "int", 
                            "double"
                        ]
                    }, 
                    "decl": "ValueType getValue()", 
                    "fmt": {
                        "method_name": "getValue", 
                        "underscore_name": "get_value"
                    }, 
                    "options": {
                        "wrap_c": false, 
                        "wrap_fortran": false, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {}, 
                        "name": "getValue", 
                        "type": "ValueType"
                    }
                }, 
                {
                    "_decl": "int getValue()", 
                    "_function_index": 29, 
                    "_generated": "cpp_template", 
                    "_overloaded": true, 
                    "args": [], 
                    "attrs": {}, 
                    "decl": "ValueType getValue()", 
                    "fmt": {
                        "CPP_return_templated": true, 
                        "CPP_template": "<int>", 
                        "C_name": "AA_exclass2_get_value_int", 
                        "F_C_name": "aa_exclass2_get_value_int", 
                        "F_name_generic": "get_value", 
                        "F_name_impl": "exclass2_get_value_int", 
                        "F_name_method": "get_value_int", 
                        "function_suffix": "_int"
                    }, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": true, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {}, 
                        "name": "getValue", 
                        "type": "int"
                    }
                }, 
                {
                    "_decl": "double getValue()", 
                    "_function_index": 30, 
                    "_generated": "cpp_template", 
                    "_overloaded": true, 
                    "args": [], 
                    "attrs": {}, 
                    "decl": "ValueType getValue()", 
                    "fmt": {
                        "CPP_return_templated": true, 
                        "CPP_template": "<double>", 
                        "C_name": "AA_exclass2_get_value_double", 
                        "F_C_name": "aa_exclass2_get_value_double", 
                        "F_name_generic": "get_value", 
                        "F_name_impl": "exclass2_get_value_double", 
                        "F_name_method": "get_value_double", 
                        "function_suffix": "_double"
                    }, 
                    "options": {
                        "wrap_c": true, 
                        "wrap_fortran": true, 
                        "wrap_python": false
                    }, 
                    "result": {
                        "attrs": {}, 
                        "name": "getValue", 
                        "type": "double"
                    }
                }
            ], 
            "name": "ExClass2", 
            "options": {
                "cpp_header": "ExClass2.hpp"
            }, 
            "python": {
                "type": [
                    "dealloc", 
                    "print", 
                    "compare", 
                    "getattr", 
                    "setattr", 
                    "getattro", 
                    "setattro", 
                    "repr", 
                    "hash", 
                    "call", 
                    "str", 
                    "init", 
                    "alloc", 
                    "new", 
                    "free", 
                    "del"
                ]
            }
        }
    ], 
    "copyright": [
        "blah blah", 
        "yada yada", 
        null
    ], 
    "fmt": {
        "BBB": "BBB", 
        "C_const": "", 
        "C_header_filename": "wrapUserLibrary.h", 
        "C_impl_filename": "wrapUserLibrary.cpp", 
        "C_prefix": "AA_", 
        "C_this": "self", 
        "F_C_pure_clause": "", 
        "F_C_result_clause": "", 
        "F_derived_member": "voidptr", 
        "F_impl_filename": "wrapfuserlibrary.f", 
        "F_module_name": "userlibrary_mod", 
        "F_pure_clause": "", 
        "F_result": "rv", 
        "F_result_clause": "", 
        "F_this": "obj", 
        "PY_header_filename": "pyUserLibrarymodule.hpp", 
        "PY_helper_filename": "pyUserLibraryhelper.cpp", 
        "PY_library_doc": "library documentation", 
        "PY_module_filename": "pyUserLibrarymodule.cpp", 
        "PY_module_name": "userlibrary", 
        "PY_prefix": "PP_", 
        "function_suffix": "", 
        "library": "UserLibrary", 
        "lower_library": "userlibrary", 
        "overloaded": false, 
        "rv": "rv", 
        "upper_library": "USERLIBRARY"
    }, 
    "functions": [
        {
            "_decl": "void local_function1()", 
            "_function_index": 36, 
            "args": [], 
            "attrs": {}, 
            "decl": "void local_function1", 
            "docs": "yada yada yada", 
            "fmt": {
                "C_name": "AA_local_function1", 
                "F_C_name": "local_function1", 
                "F_name_generic": "local_function1", 
                "F_name_impl": "local_function1", 
                "F_name_method": "local_function1", 
                "PY_name_impl": "PP_local_function1", 
                "method_name": "local_function1", 
                "underscore_name": "local_function1"
            }, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "name": "local_function1", 
                "type": "void"
            }
        }, 
        {
            "_PTR_F_C_index": 43, 
            "_decl": "bool isNameValid(const std::string & name+intent(in))", 
            "_function_index": 37, 
            "args": [
                {
                    "attrs": {
                        "const": true, 
                        "intent": "in", 
                        "reference": true, 
                        "value": false
                    }, 
                    "name": "name", 
                    "type": "std::string"
                }
            ], 
            "attrs": {}, 
            "decl": "bool isNameValid(const std::string& name)", 
            "fmt": {
                "C_name": "AA_is_name_valid", 
                "F_C_name": "aa_is_name_valid", 
                "F_name_generic": "is_name_valid", 
                "F_name_impl": "is_name_valid", 
                "F_name_method": "is_name_valid", 
                "PY_name_impl": "PP_is_name_valid", 
                "method_name": "isNameValid", 
                "underscore_name": "is_name_valid"
            }, 
            "options": {
                "C_code": "return name != NULL;", 
                "F_code": "rv = name .ne. \" \""
            }, 
            "result": {
                "attrs": {}, 
                "name": "isNameValid", 
                "type": "bool"
            }
        }, 
        {
            "_decl": "bool isNameValid(const std::string & name+intent(in)+len_trim)", 
            "_function_index": 43, 
            "_generated": "string_to_buffer_and_len", 
            "args": [
                {
                    "attrs": {
                        "const": true, 
                        "intent": "in", 
                        "len_trim": true, 
                        "reference": true, 
                        "value": false
                    }, 
                    "name": "name", 
                    "type": "std::string"
                }
            ], 
            "attrs": {}, 
            "decl": "bool isNameValid(const std::string& name)", 
            "fmt": {
                "C_name": "AA_is_name_valid_bufferify", 
                "F_C_name": "aa_is_name_valid_bufferify", 
                "function_suffix": "_bufferify"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {}, 
                "name": "isNameValid", 
                "type": "bool"
            }
        }, 
        {
            "_PTR_F_C_index": 44, 
            "_cpp_overload": [
                38, 
                39
            ], 
            "_decl": "void test_names(const std::string & name+intent(in))", 
            "_function_index": 38, 
            "_overloaded": true, 
            "args": [
                {
                    "attrs": {
                        "const": true, 
                        "intent": "in", 
                        "reference": true, 
                        "value": false
                    }, 
                    "name": "name", 
                    "type": "std::string"
                }
            ], 
            "attrs": {}, 
            "decl": "void test_names(const std::string &name)", 
            "fmt": {
                "C_name": "AA_test_names", 
                "F_C_name": "aa_test_names", 
                "F_name_generic": "test_names", 
                "F_name_impl": "test_names", 
                "F_name_method": "test_names", 
                "PY_name_impl": "PP_test_names", 
                "function_suffix": "", 
                "method_name": "test_names", 
                "underscore_name": "test_names"
            }, 
            "function_suffix": "", 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "name": "test_names", 
                "type": "void"
            }
        }, 
        {
            "_cpp_overload": [
                38, 
                39
            ], 
            "_decl": "void test_names(const std::string & name+intent(in)+len_trim)", 
            "_function_index": 44, 
            "_generated": "string_to_buffer_and_len", 
            "_overloaded": true, 
            "args": [
                {
                    "attrs": {
                        "const": true, 
                        "intent": "in", 
                        "len_trim": true, 
                        "reference": true, 
                        "value": false
                    }, 
                    "name": "name", 
                    "type": "std::string"
                }
            ], 
            "attrs": {}, 
            "decl": "void test_names(const std::string &name)", 
            "fmt": {
                "C_name": "AA_test_names_bufferify", 
                "F_C_name": "aa_test_names_bufferify", 
                "function_suffix": "_bufferify"
            }, 
            "function_suffix": "", 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {}, 
                "name": "test_names", 
                "type": "void"
            }
        }, 
        {
            "_PTR_F_C_index": 45, 
            "_cpp_overload": [
                38, 
                39
            ], 
            "_decl": "void test_names(const std::string & name+intent(in), int flag+intent(in)+value)", 
            "_function_index": 39, 
            "_overloaded": true, 
            "args": [
                {
                    "attrs": {
                        "const": true, 
                        "intent": "in", 
                        "reference": true, 
                        "value": false
                    }, 
                    "name": "name", 
                    "type": "std::string"
                }, 
                {
                    "attrs": {
                        "intent": "in", 
                        "value": true
                    }, 
                    "name": "flag", 
                    "type": "int"
                }
            ], 
            "attrs": {}, 
            "decl": "void test_names(const std::string &name, int flag)", 
            "fmt": {
                "C_name": "AA_test_names_flag", 
                "F_C_name": "aa_test_names_flag", 
                "F_name_generic": "test_names", 
                "F_name_impl": "test_names_flag", 
                "F_name_method": "test_names_flag", 
                "PY_name_impl": "PP_test_names_flag", 
                "function_suffix": "_flag", 
                "method_name": "test_names", 
                "underscore_name": "test_names"
            }, 
            "function_suffix": "_flag", 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "name": "test_names", 
                "type": "void"
            }
        }, 
        {
            "_cpp_overload": [
                38, 
                39
            ], 
            "_decl": "void test_names(const std::string & name+intent(in)+len_trim, int flag+intent(in)+value)", 
            "_function_index": 45, 
            "_generated": "string_to_buffer_and_len", 
            "_overloaded": true, 
            "args": [
                {
                    "attrs": {
                        "const": true, 
                        "intent": "in", 
                        "len_trim": true, 
                        "reference": true, 
                        "value": false
                    }, 
                    "name": "name", 
                    "type": "std::string"
                }, 
                {
                    "attrs": {
                        "intent": "in", 
                        "value": true
                    }, 
                    "name": "flag", 
                    "type": "int"
                }
            ], 
            "attrs": {}, 
            "decl": "void test_names(const std::string &name, int flag)", 
            "fmt": {
                "C_name": "AA_test_names_flag_bufferify", 
                "F_C_name": "aa_test_names_flag_bufferify", 
                "function_suffix": "_flag_bufferify"
            }, 
            "function_suffix": "_flag", 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": false, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {}, 
                "name": "test_names", 
                "type": "void"
            }
        }, 
        {
            "_decl": "void testoptional()", 
            "_function_index": 41, 
            "_generated": "has_default_arg", 
            "_overloaded": true, 
            "args": [], 
            "attrs": {}, 
            "decl": "void testoptional(int i = 1, long j=2)", 
            "fmt": {
                "C_name": "AA_testoptional_0", 
                "F_C_name": "aa_testoptional_0", 
                "F_name_generic": "testoptional", 
                "F_name_impl": "testoptional_0", 
                "F_name_method": "testoptional_0", 
                "function_suffix": "_0"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": true, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {}, 
                "name": "testoptional", 
                "type": "void"
            }
        }, 
        {
            "_decl": "void testoptional(int i+default(1)+intent(in)+value)", 
            "_function_index": 42, 
            "_generated": "has_default_arg", 
            "_overloaded": true, 
            "args": [
                {
                    "attrs": {
                        "default": 1, 
                        "intent": "in", 
                        "value": true
                    }, 
                    "name": "i", 
                    "type": "int"
                }
            ], 
            "attrs": {}, 
            "decl": "void testoptional(int i = 1, long j=2)", 
            "fmt": {
                "C_name": "AA_testoptional_1", 
                "F_C_name": "aa_testoptional_1", 
                "F_name_generic": "testoptional", 
                "F_name_impl": "testoptional_1", 
                "F_name_method": "testoptional_1", 
                "function_suffix": "_1"
            }, 
            "options": {
                "wrap_c": true, 
                "wrap_fortran": true, 
                "wrap_python": false
            }, 
            "result": {
                "attrs": {}, 
                "name": "testoptional", 
                "type": "void"
            }
        }, 
        {
            "_decl": "void testoptional(int i+default(1)+intent(in)+value, long j+default(2)+intent(in)+value)", 
            "_default_funcs": [
                41, 
                42
            ], 
            "_function_index": 40, 
            "_has_default_arg": true, 
            "_overloaded": true, 
            "args": [
                {
                    "attrs": {
                        "default": 1, 
                        "intent": "in", 
                        "value": true
                    }, 
                    "name": "i", 
                    "type": "int"
                }, 
                {
                    "attrs": {
                        "default": 2, 
                        "intent": "in", 
                        "value": true
                    }, 
                    "name": "j", 
                    "type": "long"
                }
            ], 
            "attrs": {}, 
            "decl": "void testoptional(int i = 1, long j=2)", 
            "fmt": {
                "C_name": "AA_testoptional_2", 
                "F_C_name": "aa_testoptional_2", 
                "F_name_generic": "testoptional", 
                "F_name_impl": "testoptional_2", 
                "F_name_method": "testoptional_2", 
                "PY_name_impl": "PP_testoptional_2", 
                "function_suffix": "_2", 
                "method_name": "testoptional", 
                "underscore_name": "testoptional"
            }, 
            "options": {}, 
            "result": {
                "attrs": {}, 
                "name": "testoptional", 
                "type": "void"
            }
        }
    ], 
    "options": {
        "C_header_filename_class_template": "wrap{cpp_class}.h", 
        "C_header_filename_library_template": "wrap{library}.h", 
        "C_impl_filename_class_template": "wrap{cpp_class}.cpp", 
        "C_impl_filename_library_template": "wrap{library}.cpp", 
        "C_name_function_template": "{C_prefix}{underscore_name}{function_suffix}", 
        "C_name_method_template": "{C_prefix}{lower_class}_{underscore_name}{function_suffix}", 
        "C_prefix": "AA_", 
        "F_force_wrapper": false, 
        "F_impl_filename_class_template": "wrapf{cpp_class}.f", 
        "F_impl_filename_library_template": "wrapf{lower_library}.f", 
        "F_module_name_class_template": "{lower_class}_mod", 
        "F_module_name_library_template": "{lower_library}_mod", 
        "F_module_per_class": true, 
        "F_name_generic_template": "{underscore_name}", 
        "F_name_impl_function_template": "{underscore_name}{function_suffix}", 
        "F_name_impl_method_template": "{lower_class}_{underscore_name}{function_suffix}", 
        "F_name_method_template": "{underscore_name}{function_suffix}", 
        "F_string_len_trim": true, 
        "PY_PyObject_template": "{PY_prefix}{cpp_class}", 
        "PY_PyTypeObject_template": "{PY_prefix}{cpp_class}_Type", 
        "PY_header_filename_template": "py{library}module.hpp", 
        "PY_helper_filename_template": "py{library}helper.cpp", 
        "PY_module_filename_template": "py{library}module.cpp", 
        "PY_name_impl_function_template": "{PY_prefix}{underscore_name}{function_suffix}", 
        "PY_name_impl_method_template": "{PY_prefix}{lower_class}_{underscore_name}{function_suffix}", 
        "PY_prefix": "PP_", 
        "PY_type_filename_template": "py{cpp_class}type.cpp", 
        "cpp_header": "", 
        "debug": true, 
        "library": "UserLibrary", 
        "namespace": "example nested", 
        "wrap_c": true, 
        "wrap_fortran": true, 
        "wrap_python": true
    }, 
    "patterns": {
        "C_invalid_name": "if (! isNameValid({var})) {{\n    return NULL;\n}}\n", 
        "PY_invalid_name": "if (! isNameValid({var})) {{\n    PyErr_SetString(PyExc_KeyError, \"{var}\");\n    return NULL;\n}}\n"
    }, 
    "splicer": {
        "c": [
            "csplicer.c"
        ], 
        "f": [
            "fsplicer.f"
        ], 
        "py": [
            "pysplicer.c"
        ]
    }, 
    "types": {
        "ExClass1": {
            "PY_PyObject": "PP_ExClass1", 
            "PY_PyTypeObject": "PP_ExClass1_Type", 
            "PY_from_object": "PP_ExClass1_from_Object", 
            "PY_post_parse": "{var} = {var_obj} ? {var_obj}->{BBB} : NULL;", 
            "PY_to_object": "PP_ExClass1_to_Object", 
            "base": "wrapped", 
            "c_fortran": "type(C_PTR)", 
            "c_to_cpp": "static_cast<{C_const}ExClass1{ptr}>(static_cast<{C_const}void *>({var}))", 
            "c_type": "AA_exclass1", 
            "cpp_to_c": "static_cast<{C_const}AA_exclass1 *>(static_cast<{C_const}void *>({var}))", 
            "cpp_type": "ExClass1", 
            "f_args": "{var}%{F_derived_member}", 
            "f_derived_type": "exclass1", 
            "f_module": {
                "exclass1_mod": [
                    "exclass1"
                ]
            }, 
            "f_return_code": "{F_result}%{F_derived_member} = {F_C_name}({F_arg_c_call_tab})", 
            "f_type": "type(exclass1)", 
            "forward": "ExClass1"
        }, 
        "ExClass2": {
            "PY_PyObject": "PP_ExClass2", 
            "PY_PyTypeObject": "PP_ExClass2_Type", 
            "PY_from_object": "PP_ExClass2_from_Object", 
            "PY_post_parse": "{var} = {var_obj} ? {var_obj}->{BBB} : NULL;", 
            "PY_to_object": "PP_ExClass2_to_Object", 
            "base": "wrapped", 
            "c_fortran": "type(C_PTR)", 
            "c_to_cpp": "static_cast<{C_const}ExClass2{ptr}>(static_cast<{C_const}void *>({var}))", 
            "c_type": "AA_exclass2", 
            "cpp_to_c": "static_cast<{C_const}AA_exclass2 *>(static_cast<{C_const}void *>({var}))", 
            "cpp_type": "ExClass2", 
            "f_args": "{var}%{F_derived_member}", 
            "f_derived_type": "exclass2", 
            "f_module": {
                "exclass2_mod": [
                    "exclass2"
                ]
            }, 
            "f_return_code": "{F_result}%{F_derived_member} = {F_C_name}({F_arg_c_call_tab})", 
            "f_type": "type(exclass2)", 
            "forward": "ExClass2"
        }, 
        "SidreLength": {
            "PY_format": "l", 
            "c_fortran": "integer(C_LONG)", 
            "c_header": "sidre/SidreTypes.h", 
            "c_type": "ATK_SidreLength", 
            "cpp_type": "SidreLength", 
            "f_cast": "int({var}, C_LONG)", 
            "f_kind": "C_LONG", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)", 
            "typedef": "long"
        }, 
        "TypeID": {
            "c_fortran": "integer(C_INT)", 
            "c_header": "sidre/SidreTypes.h", 
            "c_to_cpp": "getTypeID({var})", 
            "c_type": "int", 
            "cpp_header": "sidre/SidreWrapperHelpers.hpp", 
            "cpp_type": "TypeID", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "bool": {
            "PY_PyTypeObject": "PyBool_Type", 
            "PY_ctor": "PyBool_FromLong({rv})", 
            "PY_post_parse": "{var} = PyObject_IsTrue({var_obj});", 
            "c_fortran": "logical(C_BOOL)", 
            "c_type": "bool", 
            "cpp_type": "bool", 
            "f_argsdecl": [
                "logical(C_BOOL) {tmp_var}"
            ], 
            "f_kind": "C_BOOL", 
            "f_pre_call": "{tmp_var} = {var}  ! coerce to C_BOOL", 
            "f_type": "logical", 
            "f_use_tmp": true
        }, 
        "double": {
            "PY_format": "d", 
            "c_fortran": "real(C_DOUBLE)", 
            "c_type": "double", 
            "cpp_type": "double", 
            "f_cast": "real({var}, C_DOUBLE)", 
            "f_kind": "C_DOUBLE", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "float": {
            "PY_format": "f", 
            "c_fortran": "real(C_FLOAT)", 
            "c_type": "float", 
            "cpp_type": "float", 
            "f_cast": "real({var}, C_FLOAT)", 
            "f_kind": "C_FLOAT", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "int": {
            "PY_format": "i", 
            "c_fortran": "integer(C_INT)", 
            "c_type": "int", 
            "cpp_type": "int", 
            "f_cast": "int({var}, C_INT)", 
            "f_kind": "C_INT", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "integer(C_INT)": {
            "PY_format": "i", 
            "c_fortran": "integer(C_INT)", 
            "c_type": "int", 
            "cpp_type": "int", 
            "f_cast": "int({var}, C_INT)", 
            "f_kind": "C_INT", 
            "f_module": {
                "iso_c_binding": [
                    "C_INT"
                ]
            }, 
            "f_type": "integer(C_INT)"
        }, 
        "integer(C_LONG)": {
            "PY_format": "l", 
            "c_fortran": "integer(C_LONG)", 
            "c_type": "long", 
            "cpp_type": "long", 
            "f_cast": "int({var}, C_LONG)", 
            "f_kind": "C_LONG", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "long": {
            "PY_format": "l", 
            "c_fortran": "integer(C_LONG)", 
            "c_type": "long", 
            "cpp_type": "long", 
            "f_cast": "int({var}, C_LONG)", 
            "f_kind": "C_LONG", 
            "f_module": {
                "iso_c_binding": [
                    "C_LONG"
                ]
            }, 
            "f_type": "integer(C_LONG)"
        }, 
        "other": {
            "cpp_type": "junk"
        }, 
        "real(C_DOUBLE)": {
            "PY_format": "d", 
            "c_fortran": "real(C_DOUBLE)", 
            "c_type": "double", 
            "cpp_type": "double", 
            "f_cast": "real({var}, C_DOUBLE)", 
            "f_kind": "C_DOUBLE", 
            "f_module": {
                "iso_c_binding": [
                    "C_DOUBLE"
                ]
            }, 
            "f_type": "real(C_DOUBLE)"
        }, 
        "real(C_FLOAT)": {
            "PY_format": "f", 
            "c_fortran": "real(C_FLOAT)", 
            "c_type": "float", 
            "cpp_type": "float", 
            "f_cast": "real({var}, C_FLOAT)", 
            "f_kind": "C_FLOAT", 
            "f_module": {
                "iso_c_binding": [
                    "C_FLOAT"
                ]
            }, 
            "f_type": "real(C_FLOAT)"
        }, 
        "size_t": {
            "PY_ctor": "PyInt_FromLong({rv})", 
            "c_fortran": "integer(C_SIZE_T)", 
            "c_header": "stdlib.h", 
            "c_type": "size_t", 
            "cpp_type": "size_t", 
            "f_cast": "int({var}, C_SIZE_T)", 
            "f_kind": "C_SIZE_T", 
            "f_module": {
                "iso_c_binding": [
                    "C_SIZE_T"
                ]
            }, 
            "f_type": "integer(C_SIZE_T)"
        }, 
        "std::string": {
            "PY_ctor": "PyString_FromString({var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_fortran": "character(kind=C_CHAR)", 
            "c_type": "char", 
            "cpp_to_c": "{var}.c_str()", 
            "cpp_type": "std::string", 
            "f_args": "trim({var}) // C_NULL_CHAR", 
            "f_module": {
                "iso_c_binding": null
            }, 
            "f_return_code": "{F_result} = fstr({F_C_name}({F_arg_c_call_tab}))", 
            "f_type": "character(*)"
        }, 
        "string": {
            "PY_ctor": "PyString_FromString({var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_fortran": "character(kind=C_CHAR)", 
            "c_type": "char", 
            "cpp_to_c": "{var}.c_str()", 
            "cpp_type": "std::string", 
            "f_args": "trim({var}) // C_NULL_CHAR", 
            "f_module": {
                "iso_c_binding": null
            }, 
            "f_return_code": "{F_result} = fstr({F_C_name}({F_arg_c_call_tab}))", 
            "f_type": "character(*)"
        }, 
        "string_from_buffer": {
            "base": "string", 
            "c_argdecl": [
                "const char *{var}", 
                "int len_{var}"
            ], 
            "c_fortran": "character(kind=C_CHAR)", 
            "c_to_cpp": "std::string({var}, len_{var})", 
            "c_type": "char", 
            "cpp_to_c": "{var}.c_str()", 
            "cpp_type": "std::string", 
            "f_args": "{var}, len_trim({var})", 
            "f_c_argdecl": [
                "type(C_PTR), intent(IN), value :: {var}", 
                "integer(C_INT), intent(IN), value :: len_{var}"
            ], 
            "f_c_args": [
                "{var}", 
                "len_{var}"
            ], 
            "f_module": {
                "iso_c_binding": null
            }, 
            "f_return_code": "{F_result} = fstr({F_C_name}({F_arg_c_call_tab}))", 
            "f_type": "character(*)"
        }, 
        "string_result_as_arg": {
            "PY_ctor": "PyString_FromString({var})", 
            "PY_format": "s", 
            "base": "string", 
            "c_fortran": "character(kind=C_CHAR)", 
            "c_type": "char", 
            "cpp_to_c": "{var}.c_str()", 
            "cpp_type": "std::string", 
            "f_args": "trim({var}) // C_NULL_CHAR", 
            "f_argsdecl": [
                "character(*), intent(OUT) :: {result_arg}", 
                "type(C_PTR) :: {F_result}"
            ], 
            "f_module": {
                "iso_c_binding": null
            }, 
            "f_post_call": "call FccCopyPtr({result_arg}, len({result_arg}), {F_result})", 
            "f_return_code": "{F_result} = {F_C_name}({F_arg_c_call_tab})", 
            "f_type": "character(*)"
        }, 
        "void": {
            "c_fortran": "type(C_PTR)", 
            "c_type": "void", 
            "cpp_type": "void", 
            "f_type": "type(C_PTR)"
        }
    }
}