/* This file was generated by PyBindGen 0.17.0 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX < 0x020400F0

#define PyEval_ThreadsInitialized() 1

#define Py_CLEAR(op)				\
        do {                            	\
                if (op) {			\
                        PyObject *tmp = (PyObject *)(op);	\
                        (op) = NULL;		\
                        Py_DECREF(tmp);		\
                }				\
        } while (0)


#define Py_VISIT(op)							\
        do { 								\
                if (op) {						\
                        int vret = visit((PyObject *)(op), arg);	\
                        if (vret)					\
                                return vret;				\
                }							\
        } while (0)

#endif



#if PY_VERSION_HEX < 0x020500F0

typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intobjargproc ssizeobjargproc;

#endif


#ifndef PyVarObject_HEAD_INIT
#define PyVarObject_HEAD_INIT(type, size) \
        PyObject_HEAD_INIT(type) size,
#endif


#if PY_VERSION_HEX >= 0x03000000
typedef void* cmpfunc;
#define PyCObject_FromVoidPtr(a, b) PyCapsule_New(a, NULL, b)
#define PyCObject_AsVoidPtr(a) PyCapsule_GetPointer(a, NULL)
#define PyString_FromString(a) PyBytes_FromString(a)
#define Py_TPFLAGS_CHECKTYPES 0 /* this flag doesn't exist in python 3 */
#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

#ifndef _PyBindGenWrapperFlags_defined_
#define _PyBindGenWrapperFlags_defined_
typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;
#endif


#include "PolygonMeshXY.hpp"
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    VectorXY *obj;
    PyBindGenWrapperFlags flags:8;
} PyVectorXY;


extern PyTypeObject *_PyVectorXY_Type;
#define PyVectorXY_Type (*_PyVectorXY_Type)


typedef struct {
    PyObject_HEAD
    PolygonMeshXY *obj;
    PyBindGenWrapperFlags flags:8;
} PyPolygonMeshXY;


extern PyTypeObject PyPolygonMeshXY_Type;

static PyMethodDef PolygonMeshXY_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


PyTypeObject *_PyVectorXY_Type;


static PyObject* _wrap_PyPolygonMeshXY__get_nzones(PyPolygonMeshXY *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", self->obj->nzones);
    return py_retval;
}
static int _wrap_PyPolygonMeshXY__set_nzones(PyPolygonMeshXY *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->nzones)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyPolygonMeshXY__get_nnodes(PyPolygonMeshXY *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", self->obj->nnodes);
    return py_retval;
}
static int _wrap_PyPolygonMeshXY__set_nnodes(PyPolygonMeshXY *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->nnodes)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyPolygonMeshXY__get_timeElapsed(PyPolygonMeshXY *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "d", self->obj->timeElapsed);
    return py_retval;
}
static int _wrap_PyPolygonMeshXY__set_timeElapsed(PyPolygonMeshXY *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->timeElapsed)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyPolygonMeshXY__getsets[] = {
    {
        (char*) "nzones", /* attribute name */
        (getter) _wrap_PyPolygonMeshXY__get_nzones, /* C function to get the attribute */
        (setter) _wrap_PyPolygonMeshXY__set_nzones, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "nnodes", /* attribute name */
        (getter) _wrap_PyPolygonMeshXY__get_nnodes, /* C function to get the attribute */
        (setter) _wrap_PyPolygonMeshXY__set_nnodes, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "timeElapsed", /* attribute name */
        (getter) _wrap_PyPolygonMeshXY__get_timeElapsed, /* C function to get the attribute */
        (setter) _wrap_PyPolygonMeshXY__set_timeElapsed, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

static int
_wrap_PyPolygonMeshXY__tp_init(PyPolygonMeshXY *self, PyObject *args, PyObject *kwargs)
{
    int kmax;
    int lmax;
    double xmin = 0.0;
    double xmax = 1.0;
    double ymin = 0.0;
    double ymax = 1.0;
    const char *keywords[] = {"kmax", "lmax", "xmin", "xmax", "ymin", "ymax", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii|dddd", (char **) keywords, &kmax, &lmax, &xmin, &xmax, &ymin, &ymax)) {
        return -1;
    }
    self->obj = new PolygonMeshXY(kmax, lmax, xmin, xmax, ymin, ymax);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyPolygonMeshXY_meshAverageKLZMemOrderA(PyPolygonMeshXY *self)
{
    PyObject *py_retval;
    PyVectorXY *py_VectorXY;

    VectorXY retval = self->obj->meshAverageKLZMemOrderA();
    py_VectorXY = PyObject_New(PyVectorXY, &PyVectorXY_Type);
    py_VectorXY->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXY->obj = new VectorXY(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXY);
    return py_retval;
}


PyObject *
_wrap_PyPolygonMeshXY_zoneNodePos(PyPolygonMeshXY *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int iz;
    int in;
    const char *keywords[] = {"iz", "in", NULL};
    PyVectorXY *py_VectorXY;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &iz, &in)) {
        return NULL;
    }
    VectorXY retval = self->obj->zoneNodePos(iz, in);
    py_VectorXY = PyObject_New(PyVectorXY, &PyVectorXY_Type);
    py_VectorXY->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXY->obj = new VectorXY(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXY);
    return py_retval;
}


PyObject *
_wrap_PyPolygonMeshXY_getPos(PyPolygonMeshXY *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int i;
    const char *keywords[] = {"i", NULL};
    PyVectorXY *py_VectorXY;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &i)) {
        return NULL;
    }
    VectorXY retval = self->obj->getPos(i);
    py_VectorXY = PyObject_New(PyVectorXY, &PyVectorXY_Type);
    py_VectorXY->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXY->obj = new VectorXY(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXY);
    return py_retval;
}


PyObject *
_wrap_PyPolygonMeshXY_setPos(PyPolygonMeshXY *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int i;
    PyVectorXY *v;
    const char *keywords[] = {"i", "v", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!", (char **) keywords, &i, &PyVectorXY_Type, &v)) {
        return NULL;
    }
    self->obj->setPos(i, *((PyVectorXY *) v)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyPolygonMeshXY_getZonePos(PyPolygonMeshXY *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int i;
    const char *keywords[] = {"i", NULL};
    PyVectorXY *py_VectorXY;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &i)) {
        return NULL;
    }
    VectorXY retval = self->obj->getZonePos(i);
    py_VectorXY = PyObject_New(PyVectorXY, &PyVectorXY_Type);
    py_VectorXY->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_VectorXY->obj = new VectorXY(retval);
    py_retval = Py_BuildValue((char *) "N", py_VectorXY);
    return py_retval;
}


PyObject *
_wrap_PyPolygonMeshXY_zoneNode(PyPolygonMeshXY *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    int iz;
    int in;
    const char *keywords[] = {"iz", "in", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &iz, &in)) {
        return NULL;
    }
    retval = self->obj->zoneNode(iz, in);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyPolygonMeshXY_zoneNumNodes(PyPolygonMeshXY *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    int i;
    const char *keywords[] = {"i", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &i)) {
        return NULL;
    }
    retval = self->obj->zoneNumNodes(i);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyPolygonMeshXY_zoneVol(PyPolygonMeshXY *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    int i;
    const char *keywords[] = {"i", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &i)) {
        return NULL;
    }
    retval = self->obj->zoneVol(i);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}

static PyMethodDef PyPolygonMeshXY_methods[] = {
    {(char *) "meshAverageKLZMemOrderA", (PyCFunction) _wrap_PyPolygonMeshXY_meshAverageKLZMemOrderA, METH_NOARGS, NULL },
    {(char *) "zoneNodePos", (PyCFunction) _wrap_PyPolygonMeshXY_zoneNodePos, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "getPos", (PyCFunction) _wrap_PyPolygonMeshXY_getPos, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "setPos", (PyCFunction) _wrap_PyPolygonMeshXY_setPos, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "getZonePos", (PyCFunction) _wrap_PyPolygonMeshXY_getZonePos, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "zoneNode", (PyCFunction) _wrap_PyPolygonMeshXY_zoneNode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "zoneNumNodes", (PyCFunction) _wrap_PyPolygonMeshXY_zoneNumNodes, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "zoneVol", (PyCFunction) _wrap_PyPolygonMeshXY_zoneVol, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyPolygonMeshXY__tp_dealloc(PyPolygonMeshXY *self)
{
        PolygonMeshXY *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyPolygonMeshXY__tp_richcompare (PyPolygonMeshXY *PYBINDGEN_UNUSED(self), PyPolygonMeshXY *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyPolygonMeshXY_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyPolygonMeshXY_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "PolygonMeshXY.PolygonMeshXY",            /* tp_name */
    sizeof(PyPolygonMeshXY),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyPolygonMeshXY__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyPolygonMeshXY__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyPolygonMeshXY_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyPolygonMeshXY__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyPolygonMeshXY__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef PolygonMeshXY_moduledef = {
    PyModuleDef_HEAD_INIT,
    "PolygonMeshXY",
    NULL,
    -1,
    PolygonMeshXY_functions,
};
#endif


#if PY_VERSION_HEX >= 0x03000000
    #define MOD_ERROR NULL
    #define MOD_INIT(name) PyObject* PyInit_##name(void)
    #define MOD_RETURN(val) val
#else
    #define MOD_ERROR
    #define MOD_INIT(name) void init##name(void)
    #define MOD_RETURN(val)
#endif
#if defined(__cplusplus)
extern "C"
#endif
#if defined(__GNUC__) && __GNUC__ >= 4
__attribute__ ((visibility("default")))
#endif


MOD_INIT(PolygonMeshXY)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&PolygonMeshXY_moduledef);
    #else
    m = Py_InitModule3((char *) "PolygonMeshXY", PolygonMeshXY_functions, NULL);
    #endif
    if (m == NULL) {
        return MOD_ERROR;
    }
    /* Import the 'VectorXY' class from module 'vectorXY' */
    {
        PyObject *module = PyImport_ImportModule((char*) "vectorXY");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyVectorXY_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "VectorXY");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Register the 'PolygonMeshXY' class */
    if (PyType_Ready(&PyPolygonMeshXY_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "PolygonMeshXY", (PyObject *) &PyPolygonMeshXY_Type);
    return MOD_RETURN(m);
}
